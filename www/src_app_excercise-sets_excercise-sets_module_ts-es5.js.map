{"version":3,"sources":["webpack:///src/app/excercise-sets/choosing/choosing.component.ts","webpack:///src/app/excercise-sets/excercise-sets-routing.module.ts","webpack:///src/app/excercise-sets/excercise-sets.module.ts","webpack:///src/app/excercise-sets/excercise-sets.page.ts","webpack:///src/app/games-list/games-list.module.ts","webpack:///src/app/excercise-sets/choosing/choosing.component.scss","webpack:///src/app/excercise-sets/excercise-sets.page.scss","webpack:///src/app/excercise-sets/choosing/choosing.component.html","webpack:///src/app/excercise-sets/excercise-sets.page.html"],"names":["ChoosingComponent","gameService","eventEmitter","choices","answers","choicesarray","imgmode","numberChecked","console","log","choice","push","name","val","isChecked","includes","inputtedanswers","i","length","wrongs","answer","response","score","getScore","onRoundFinished","index","GameService","EventemitterService","Input","Component","selector","template","routes","path","component","ExcerciseSetsPage","ExcerciseSetsPageRoutingModule","NgModule","imports","RouterModule","exports","ExcerciseSetsPageModule","CommonModule","FormsModule","IonicModule","GamesListModule","SharedModule","declarations","activatedroute","hiddenArray","currentIndex","levels","level","aggregatescore","finalishidden","startScreen","setsHaveStarted","memorizedSubscription","memorizedItems","subscribe","value","correct","params","set","excerciseSetsDescription","excerciseSets","number","type","gameIndexes","currindex","currnum","spclVar","subscription","RoundFinished","unsubscribe","ActivatedRoute","CardSpanPageModule","DigitSpanPageModule","TriviaPageModule","SortThemPageModule","StroopGamePageModule","TrafficLightPageModule","WordPairsPageModule","WordToImagesPageModule","WordfinderPageModule","MatrixReasoningPageModule"],"mappings":"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","file":"src_app_excercise-sets_excercise-sets_module_ts-es5.js","sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { EventemitterService } from 'src/app/shared/eventemitter.service';\nimport { GameService } from 'src/app/shared/game.service';\n\n@Component({\n  selector: 'app-choosing',\n  templateUrl: './choosing.component.html',\n  styleUrls: ['./choosing.component.scss'],\n})\nexport class ChoosingComponent implements OnInit {\n  @Input('choices') choices = []\n  @Input('answers') answers = []\n  choicesarray = []\n  imgmode = false\n  numberChecked = 0\n\n  constructor(private gameService: GameService, private eventEmitter: EventemitterService) { }\n\n// This function takes the choices that are given from the excercise sets component and then formats them to\n// be displayed as options\n\n  ngOnInit() {\n    console.log(this.choices, this.answers)\n    for (let choice of this.choices) {\n      this.choicesarray.push({name: choice.name, val: choice.val, isChecked: false})\n    }\n    console.log(this.choices)\n    if (this.choicesarray[0].val.includes('.jpeg') === true) {\n      this.imgmode = true\n    }\n  }\n\n  // After the submit button is clicked, this function checks how much is wrong and it determines a score \n  // using the common score formula\n\n  onSubmit() {\n    let inputtedanswers = []\n    for (let i = 0; i < this.choicesarray.length; i++) {\n      if (this.choicesarray[i].isChecked === true) {\n        inputtedanswers.push(this.choicesarray[i].name)\n      }\n    }\n    // let incorrect = false\n    // if (this.answers.length !== inputtedanswers.length) {\n    //   incorrect = true\n    // }\n    // for (let item of this.answers) {\n    //   if (inputtedanswers.includes(item) === false) {\n    //     incorrect = true\n    //   }\n    // }\n    let wrongs = 0\n    for (let answer of this.answers) {\n      wrongs++\n      for (let response of inputtedanswers) {\n        if (answer === response) {\n          wrongs--\n        }\n      }\n    }\n\n    let score = this.gameService.getScore(this.answers.length, wrongs)\n    this.eventEmitter.onRoundFinished({continue: true, score: score})\n    // if (incorrect === false) {\n    //   console.log(\"WIN\")\n    // } else {\n    //   console.log(\"INCORRECT\", inputtedanswers, this.answers)\n    // }\n  }\n\n  // When a choice in the html component is clicked, then the checkmark circle is filled up. Which choices are\n  // selected are stored in the choicesarray[index].isChecked property and this function alters that property\n  // when something is clicked.\n\n  onClick(index) {\n    if (this.choicesarray[index].isChecked === true) {\n      this.choicesarray[index].isChecked = false\n      this.numberChecked-- \n    }\n    else if (this.numberChecked < this.answers.length && this.choicesarray[index].isChecked === false) {\n      this.numberChecked++\n      this.choicesarray[index].isChecked = !this.choicesarray[index].isChecked\n    }\n  }\n\n  // This function just controls what class is given to the checkmark is the isChecked property is true or false\n\n  getClass(i) {\n    if (this.choicesarray[i].isChecked === true) {\n      return false\n    } \n    if (this.choicesarray[i].isChecked === false) {\n      return true\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ExcerciseSetsPage } from './excercise-sets.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ExcerciseSetsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ExcerciseSetsPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ExcerciseSetsPageRoutingModule } from './excercise-sets-routing.module';\n\nimport { ExcerciseSetsPage } from './excercise-sets.page';\nimport { GamesListModule } from '../games-list/games-list.module';\nimport { SharedModule } from '../shared/shared.module';\nimport { ChoosingComponent } from './choosing/choosing.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ExcerciseSetsPageRoutingModule,\n    GamesListModule,\n    SharedModule\n  ],\n  declarations: [ExcerciseSetsPage, ChoosingComponent]\n})\nexport class ExcerciseSetsPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ValueAccessor } from '@ionic/angular/directives/control-value-accessors/value-accessor';\nimport { Subscription } from 'rxjs';\nimport { EventemitterService } from '../shared/eventemitter.service';\nimport { GameService } from '../shared/game.service';\n\n@Component({\n  selector: 'app-excercise-sets',\n  templateUrl: './excercise-sets.page.html',\n  styleUrls: ['./excercise-sets.page.scss'],\n})\nexport class ExcerciseSetsPage implements OnInit {\n  set: number;\n  hiddenArray = [true, true, true, true, true, true, true, true, true, true]\n  currentIndex = 0\n  levels = []\n  subscription: Subscription;\n  memorizedSubscription: Subscription;\n  level = 1\n  score = 0\n  choices = []\n  answers = []\n  spclVar;\n  aggregatescore = 0\n  finalishidden = true\n  startScreen = true\n  setsHaveStarted = false;\n\n\n  constructor(\n    private activatedroute: ActivatedRoute,\n    private gameService: GameService,\n    private eventEmitter: EventemitterService\n    ) { }\n\n  ngOnInit() {\n    // if (localStorage.getItem('setsStarted')) {\n    //   this.setsHaveStarted = true\n    // } else {\n    //   localStorage.setItem('setsStarted', 'exists')\n    // }\n\n    // This emitter just gets the choices and correct answers from word to images to transmit to the choosing component.\n    this.memorizedSubscription = this.eventEmitter.memorizedItems.subscribe(value => {\n      this.choices = value.choices\n      this.answers = value.correct\n    })\n\n    // This subscription obtans the data about the particular excercise set from the game service and then it adjusts the excercise set based on that\n    this.activatedroute.params.subscribe(value => {\n      this.set = this.gameService.excerciseSetsDescription[this.gameService.excerciseSets[value.number - 1].type - 1].gameIndexes\n      this.levels = this.gameService.excerciseSets[value.number - 1].level\n      console.log(this.set)\n      let currindex = this.set[this.currentIndex]\n      let currnum;\n      if (currindex.number) {\n        currnum = currindex.number\n        this.spclVar = currindex.spclVar\n      } else {\n        currnum = currindex\n      }\n      this.hiddenArray[currnum] = false\n    })\n\n    // This subscription proceeds to the next game after a game is finished running and it also gets the score and adds it to the total\n    this.subscription = this.eventEmitter.RoundFinished.subscribe(value => {\n      if (value) {\n        if (value.score) {\n          this.aggregatescore = this.aggregatescore + value.score\n        }\n        let currnum = this.set[this.currentIndex]\n        if (currnum.number) {\n          this.hiddenArray[currnum.number] = true\n        } else {\n          this.hiddenArray[currnum] = true\n        }\n        this.currentIndex++\n        currnum = this.set[this.currentIndex]\n        if (this.hiddenArray[currnum]) {\n          if (currnum.number) {\n            this.hiddenArray[currnum.number] = false\n          } else {\n            this.hiddenArray[currnum] = false\n          }\n        } else {\n          this.finalishidden = false\n          console.log(this.aggregatescore)\n        }\n        console.log(this.choices, this.currentIndex, this.set[this.currentIndex], this.hiddenArray)\n      }\n\n    })\n  }\n\n\n  // Unsrubscribes from any ongoing subscriptions at the end\n  ionViewDidLeave() {\n    this.memorizedSubscription.unsubscribe()\n    this.subscription.unsubscribe()\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CardSpanPageModule } from './card-span/card-span.module';\nimport { DigitSpanPageModule } from './digit-span/digit-span.module';\nimport { TriviaPageModule } from './trivia/trivia.module';\nimport { SortThemPageModule } from './sort-them/sort-them.module';\nimport { StroopGamePageModule } from './stroop-game/stroop-game.module';\nimport { TrafficLightPageModule } from './traffic-light/traffic-light.module';\nimport { WordPairsPageModule } from './word-pairs/word-pairs.module';\nimport { WordToImagesPageModule } from './word-to-images/word-to-images.module';\nimport { WordfinderPageModule } from './wordfinder/wordfinder.module';\nimport { MatrixReasoningPageModule } from './matrix-reasoning/matrix-reasoning.module';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    CardSpanPageModule,\n    DigitSpanPageModule,\n    TriviaPageModule,\n    SortThemPageModule,\n    StroopGamePageModule,\n    TrafficLightPageModule,\n    WordPairsPageModule,\n    WordToImagesPageModule,\n    WordfinderPageModule,\n    MatrixReasoningPageModule\n  ],\n  exports: [\n    CardSpanPageModule,\n    DigitSpanPageModule,\n    TriviaPageModule,\n    SortThemPageModule,\n    StroopGamePageModule,\n    TrafficLightPageModule,\n    WordPairsPageModule,\n    WordToImagesPageModule,\n    WordfinderPageModule,\n    MatrixReasoningPageModule\n  ]\n})\nexport class GamesListModule { }\n","export default \".maxopacity {\\n  opacity: 0.25;\\n}\\n\\n.displaycontainer {\\n  position: relative;\\n}\\n\\n.bottomright {\\n  position: absolute;\\n  right: 0;\\n  bottom: 0;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNob29zaW5nLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksYUFBQTtBQUNKOztBQUVFO0VBQ0Usa0JBQUE7QUFDSjs7QUFFRTtFQUNFLGtCQUFBO0VBQ0EsUUFBQTtFQUNBLFNBQUE7QUFDSiIsImZpbGUiOiJjaG9vc2luZy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5tYXhvcGFjaXR5IHtcbiAgICBvcGFjaXR5OiAwLjI1O1xuICB9XG4gIFxuICAuZGlzcGxheWNvbnRhaW5lciB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB9XG4gIFxuICAuYm90dG9tcmlnaHQge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICByaWdodDogMDtcbiAgICBib3R0b206IDA7XG4gIH0iXX0= */\";","export default \".ion-content {\\n  display: flex;\\n  flex-direction: column;\\n}\\n.ion-content .scroll {\\n  height: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4Y2VyY2lzZS1zZXRzLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGFBQUE7RUFDQSxzQkFBQTtBQUNKO0FBQUk7RUFBUSxZQUFBO0FBR1oiLCJmaWxlIjoiZXhjZXJjaXNlLXNldHMucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmlvbi1jb250ZW50IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgLnNjcm9sbHtoZWlnaHQ6IDEwMCU7fVxuIH1cbiJdfQ== */\";","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Choose the answer</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<!-- this component is shown after the last game in the exercise set and it \\n  basically shows the images/words that loops three times in word to images at the start of the exercise set-->\\n\\n  <!-- This component is mostly done except for maybe some UI changes -->\\n\\n<ion-content>\\n  <ion-list *ngIf=\\\"!imgmode\\\">\\n    <ion-item *ngFor=\\\"let choice of choicesarray\\\">\\n      <ion-label>{{ choice.val.split(\\\"_\\\").join(\\\" \\\") }}</ion-label>\\n      <ion-checkbox slot=\\\"start\\\" [(ngModel)]=\\\"choice.isChecked\\\"></ion-checkbox>\\n    </ion-item>\\n    <ion-item button (click)=\\\"onSubmit()\\\">\\n      <ion-label>Submit</ion-label>\\n    </ion-item>\\n  </ion-list>\\n  <ion-grid *ngIf=\\\"imgmode\\\">\\n    <ion-row >\\n      <ion-col size=\\\"4\\\" offset=\\\"0\\\" *ngFor=\\\"let entry of choicesarray; index as i\\\">\\n        <div>\\n          <img [src]=\\\"'../../assets/word-to-images/' + entry.val \\\" (click)=\\\"onClick(i)\\\" [class]=\\\"getClass(i) === true ? '' : 'maxopacity'\\\">\\n          <div class=\\\"container bottomright\\\" *ngIf=\\\"getClass(i) === true ? false : true\\\"><ion-icon name=\\\"checkmark-circle\\\"></ion-icon></div>\\n        </div>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row>\\n      <ion-col class=\\\"ion-text-center\\\">\\n        <ion-button (click)=\\\"onSubmit()\\\">Submit</ion-button>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n  <!-- <ion-list *ngIf=\\\"imgmode\\\">\\n    <ion-item *ngFor=\\\"let choice of choicesarray\\\">\\n      <img [src]=\\\"'../../assets/word-to-images/' + choice.val\\\">\\n      <ion-checkbox slot=\\\"start\\\" [(ngModel)]=\\\"choice.isChecked\\\"></ion-checkbox>\\n    </ion-item>\\n    <ion-item button (click)=\\\"onSubmit()\\\">\\n      <ion-label>Submit</ion-label>\\n    </ion-item>\\n  </ion-list> -->\\n</ion-content> \";","export default \"<ion-header *ngIf=\\\"!finalishidden\\\">\\n  <ion-toolbar style=\\\"--border-width: 0\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-button color=\\\"dark\\\" routerLink=\\\"/home\\\">\\n        <ion-icon name=\\\"chevron-back-outline\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n    <ion-title class=\\\"ion-text-center\\\" style=\\\"font-size: 20px;\\\">Final Results</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n\\n\\n<ion-header *ngIf=\\\"!setsHaveStarted\\\">\\n  <ion-toolbar style=\\\"--border-width: 0\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-button color=\\\"dark\\\" routerLink=\\\"/home\\\">\\n        <ion-icon name=\\\"chevron-back-outline\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n    <ion-title class=\\\"ion-text-center\\\" style=\\\"font-size: 20px;\\\">Exercise Sets</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n<!-- <ion-content>\\n<app-card-span></app-card-span>\\n<app-digit-span></app-digit-span>\\n</ion-content> -->\\n\\n\\n\\n<!-- <div scrollY=\\\"false\\\" *ngIf=\\\"finalishidden\\\">\\n    <app-digit-span *ngIf=\\\"!hiddenArray[0]\\\" [excerciseSet]=\\\"true\\\" [levels]=\\\"levels\\\"></app-digit-span>\\n    <app-riddles *ngIf=\\\"!hiddenArray[1]\\\" [excerciseSet]=\\\"true\\\"></app-riddles>\\n    <app-card-span *ngIf=\\\"!hiddenArray[2]\\\" [excerciseSet]=\\\"true\\\" [levels]=\\\"levels\\\"></app-card-span>\\n    <app-traffic-light *ngIf=\\\"!hiddenArray[3]\\\" [excerciseSet]=\\\"true\\\" [levels]=\\\"levels\\\"></app-traffic-light>\\n    <app-sort-them *ngIf=\\\"!hiddenArray[4]\\\" [excerciseSet]=\\\"true\\\" [levels]=\\\"levels\\\"></app-sort-them>\\n    <app-word-pairs *ngIf=\\\"!hiddenArray[5]\\\"></app-word-pairs>\\n    <app-word-to-images *ngIf=\\\"!hiddenArray[6]\\\" [excerciseSet]=\\\"true\\\" [levels]=\\\"levels\\\" [spclVar]=\\\"spclVar\\\"></app-word-to-images>\\n    <app-stroop-game *ngIf=\\\"!hiddenArray[7]\\\"></app-stroop-game>\\n    <app-wordfinder *ngIf=\\\"!hiddenArray[8]\\\"></app-wordfinder>\\n    <app-choosing *ngIf=\\\"!hiddenArray[9]\\\" [choices]=\\\"choices\\\" [answers]=\\\"answers\\\"></app-choosing>\\n</div> -->\\n\\n<!-- This is the main exercise set component. In the first section is the start screen with the start button before the exercise set. The second section is basically the component forms\\n    of the different games. The excerciseSet property basically just tells the game that it should be in the excerciseSet mode. The levels property feeds the games what levels they should display and the spclVar\\n    is for any extra variables that these games need. For example, word to images in ex set 1 is in mode 1 and it is in mode 2 in ex set 2 and so the spclVar feeds this mode to the component. In section 3 is the \\n    part that is displayed after the excercise sets which shows the score and will show maybe stars  and will have a restart and back to home button. -->\\n\\n<!-- This component is mostly done except it needs to be tested and the games need to be integrated.\\n    Additionally, the final screen needs to be built. -->\\n\\n<!-- Section 1 -->\\n<ion-content *ngIf=\\\"!setsHaveStarted\\\"  scrollY=\\\"false\\\">\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col class=\\\"ion-text-center\\\">\\n        <ion-label>TEXT</ion-label>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row>\\n      <ion-col class=\\\"ion-text-center\\\">\\n        <ion-button (click)=\\\"setsHaveStarted = true\\\">Begin Exercise Set</ion-button>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\\n\\n\\n<!-- Section 2 -->\\n  <div class=\\\"ion-content\\\" style=\\\"height: 100%;\\\" *ngIf=\\\"setsHaveStarted\\\">\\n    <app-digit-span *ngIf=\\\"!hiddenArray[0]\\\" [excerciseSet]=\\\"true\\\" [levels]=\\\"levels\\\"></app-digit-span>\\n    <app-riddles style=\\\"height: 82%;\\\" *ngIf=\\\"!hiddenArray[1]\\\" [excerciseSet]=\\\"true\\\"></app-riddles>\\n    <app-card-span style=\\\"height: 82%;\\\" *ngIf=\\\"!hiddenArray[2]\\\" [excerciseSet]=\\\"true\\\" [levels]=\\\"levels\\\"></app-card-span>\\n    <app-traffic-light style=\\\"height: 82%;\\\" *ngIf=\\\"!hiddenArray[3]\\\" [excerciseSet]=\\\"true\\\" [levels]=\\\"levels\\\"></app-traffic-light>\\n    <app-sort-them style=\\\"height: 72%;\\\" *ngIf=\\\"!hiddenArray[4]\\\" [excerciseSet]=\\\"true\\\" [levels]=\\\"levels\\\"></app-sort-them>\\n    <app-word-pairs style=\\\"height: 82%;\\\" *ngIf=\\\"!hiddenArray[5]\\\"></app-word-pairs>\\n    <app-stroop-game style=\\\"height: 82%;\\\" *ngIf=\\\"!hiddenArray[7]\\\"></app-stroop-game>\\n    <app-wordfinder style=\\\"height: 82%;\\\" *ngIf=\\\"!hiddenArray[8]\\\"></app-wordfinder>\\n    <app-choosing style=\\\"height: 82%;\\\" *ngIf=\\\"!hiddenArray[9]\\\" [choices]=\\\"choices\\\" [answers]=\\\"answers\\\"></app-choosing>\\n    <app-word-to-images style=\\\"height: 82%;\\\" *ngIf=\\\"!hiddenArray[6]\\\" [excerciseSet]=\\\"true\\\" [levels]=\\\"levels\\\" [spclVar]=\\\"spclVar\\\"></app-word-to-images>\\n  </div>\\n\\n\\n<!-- Section 3 -->\\n<ion-content *ngIf=\\\"!finalishidden\\\">\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col>\\n        <ion-label>Score: {{aggregatescore}}</ion-label>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\";"]}