{"version":3,"sources":["webpack:///src/app/shared/data.service.ts","webpack:///src/app/shared/eventemitter.service.ts"],"names":["DataService","http","eventemitter","sqlite","platform","link","imglink","get","subscribe","value","console","log","gameinfoget","gamename","score","level","excerciseSetMode","time","wrongs","prevscore","prevlevel","getLocalID","path","put","error","is","excerciseMode","create","name","localID","location","then","db","executeSql","e","date","Date","sessiondata","post","idPath","onDatabase","resData","rows","item","emittedObject","game","sessionID","object","push","i","length","theobject","gameName","localStorage","clear","idToken","email","refreshtoken","expiresIn","autoLogin","refreshToken","setItem","JSON","stringify","funcname","funcparams","parse","getItem","valueOf","grant_type","refresh_token","id_token","expires_in","params","storedvar","excerciseset","gameslist","gameinfo","onLoading","HttpClient","EventemitterService","SQLite","Platform","Injectable","providedIn","animate","EventEmitter","form","CurrentCardRoute","Subject","gameStateSubj","RoundFinished","memorizedItems","databaseemitter","loading","string","emit","next","any","array","boolean"],"mappings":"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","file":"default-src_app_shared_data_service_ts-es5.js","sourcesContent":["// needs a database sync function and needs to store data from the new games and the images and data from the database\n\nimport { HttpClient, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EventemitterService } from './eventemitter.service';\nimport { SQLite, SQLiteObject } from '@ionic-native/sqlite/ngx'\nimport { Platform } from '@ionic/angular';\nimport { GameService } from './game.service';\n\nexport interface AutoLoginData {\n  email: string;\n  idToken: string;\n  refreshToken: string;\n  localID: string;\n  expiresIn: number;\n}\n\nexport interface RefreshData {\n  expires_in:\tstring;\n  token_type:\tstring;\n  refresh_token: string;\n  id_token:\tstring;\n  user_id: string;\t\n  project_id:\tstring;\t\n}\n\nexport interface SessionData {\n  time: number;\n  date: Date;\n  score: number;\n  level: number;\n  wrongs: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  localID: string;\n  idToken: any;\n  complete: string;\n  idPath: any;\n  link = \"https://memoryattention-1.firebaseio.com/\"\n  imglink = \"gs://memoryattention-1.appspot.com/\" \n\n  constructor(\n    private http: HttpClient,\n    private eventemitter: EventemitterService,\n    private sqlite: SQLite,\n    private platform: Platform) \n    { }\n\n\n\n  take1() {\n    this.http.get('https://firebasestorage.googleapis.com/v0/b/memoryattention-1.appspot.com/o/download-8.jpg?alt=media&token=5d723f86-5887-4049-bfaa-fcfd686725ed', {}).subscribe(value => {console.log(value)})\n  }\n\n  // this function stores level and score in the database as well as session data\n\n  getTriviaData(){\n    this.gameinfoget('Trivia')\n  }\n\n  getMatrixReasoningData(){\n    this.gameinfoget('MatrixReasoning')\n  }\n\n\n  storeLevelScore(gamename, score, level, excerciseSetMode: boolean, time?, wrongs?, prevscore?, prevlevel?) {\n    this.getLocalID('storeLevelScore(', [gamename, score, level, excerciseSetMode])\n    let path = ''\n    if (excerciseSetMode === true) {\n      path = \"excerciseset\"\n    } else {\n      path = \"gameslist\"\n    }\n    this.put('score/' + gamename + '/' + path, score).subscribe(value => {\n      console.log(value)\n    }, error => {\n      console.log(error)\n    })\n    this.put('level/' + gamename + '/' + path, level).subscribe(value => {\n      console.log(value)\n    }, error => {\n      console.log(error)\n    })\n\n    if (this.platform.is('capacitor') === true) {\n      let excerciseMode = excerciseSetMode ? 1 : 0\n      this.sqlite.create(\n        {\n          name: this.localID + '.db',\n          location: 'default'\n        }\n      ).then((db: SQLiteObject) => {\n        db.executeSql('create table [' + gamename + ' score] (excerciseMode boolean, score float)', [])\n        .then(() => {\n          db.executeSql('insert into [' + gamename + ' score] (excerciseMode, score) values (' + excerciseMode + ',' + score + ')').then().catch(e => {console.log(e)})\n        })\n        .catch(e => {\n          console.log(e)\n          db.executeSql('update [' + gamename + ' score] set score =' + score + ' where excerciseMode = ' + excerciseMode, []).then(value => {\n            console.log(value)\n          }).catch(() => {\n            db.executeSql('insert into [' + gamename + ' score] (excerciseMode, score) values (' + excerciseMode + ',' + score + ')').then().catch(e => {console.log(e)})\n          })\n        })\n\n        db.executeSql('create table [' + gamename + ' level] (excerciseMode boolean, level int)', [])\n        .then(() => {\n          db.executeSql('insert into [' + gamename + ' level] (excerciseMode, level) values (' + excerciseMode + ',' + level + ')').then().catch(e => {console.log(e)})\n        })\n        .catch(e => {\n          console.log(e)\n          db.executeSql('update [' + gamename + ' level] set level =' + level + ' where excerciseMode = ' + excerciseMode, []).then(value => {\n            console.log(value)\n          }).catch(() => {\n            db.executeSql('insert into [' + gamename + ' level] (excerciseMode, level) values (' + excerciseMode + ',' + level + ')').then().catch(e => {console.log(e)})\n          })\n        })\n\n      })\n    }\n\n    if ((time !== null && wrongs !== null) && (prevlevel !== null && prevscore !== null)) {\n      let date = new Date()\n      let sessiondata: SessionData = {\n        time: time,\n        date: date,\n        score: prevscore,\n        level: prevlevel,\n        wrongs: wrongs\n      }\n      this.http.post<SessionData>(this.link + 'users/' + this.localID + '/sessiondata/' + gamename + this.idPath, sessiondata).subscribe()\n      if (this.platform.is(\"capacitor\") === true) {\n        // sessiondata stored as (gameName VARCHAR(64), date date, level int, score float, time float, wrongs int)\n        this.sqlite.create(\n          {\n            name: this.localID + '.db',\n            location: 'default'\n          }).then((db: SQLiteObject) => {\n            db.executeSql('create table sessiondata (gameName VARCHAR(64), date VARCHAR(64), level int, score float, time float, wrongs int)', []).then(() => {\n              db.executeSql('insert into sessiondata (gameName, date, level, score, time, wrongs) values ( \"' + gamename + '\", \"' + date + '\", ' + prevlevel + ', ' + prevscore + ', ' + time + ', ' + wrongs + ')', []).then().catch(e => {console.log(e)})\n            }).catch(e => {\n              console.log(e)\n              db.executeSql('insert into sessiondata (gameName, date, level, score, time, wrongs) values ( \"' + gamename + '\", \"' + date + '\", ' + prevlevel + ', ' + prevscore + ', ' + time + ', ' + wrongs + ')', []).then().catch(e => {console.log(e)})\n            })\n            \n          })\n      }\n    }\n  }\n\n\n  // this function gets the level and score from the database\n\n  getLevelScore(gamename, excerciseSetMode) {\n    this.getLocalID('getLevelScore(', [gamename, excerciseSetMode])\n    let path = ''\n    if (excerciseSetMode === true) {\n      path = \"excerciseset\"\n    } else {\n      path = \"gameslist\"\n    }\n    this.get('score/' + gamename + '/' + path).subscribe(value => {\n      console.log(value)\n      if (value) {\n        this.eventemitter.onDatabase({score: value})\n      }\n    }, error => {\n      console.log(error)\n      if (this.platform.is(\"capacitor\") === true) {\n        let excerciseMode = excerciseSetMode ? 1 : 0\n        this.sqlite.create(\n        {\n          name: this.localID + '.db',\n          location: 'default'\n        }).then((db: SQLiteObject) => {\n          db.executeSql('select * from [' + gamename + ' score] where excerciseMode = ' + excerciseMode, []).then(resData => {\n            this.eventemitter.onDatabase({score: resData.rows.item(0).score})\n          })\n        }).catch(() => {\n          this.eventemitter.onDatabase({score: null})\n        })\n      }\n    })\n    this.get('level/' + gamename + '/' + path).subscribe(value => {\n      console.log(value)\n      if (value) {\n        this.eventemitter.onDatabase({level: value})\n      }\n    }, error => {\n      console.log(error)\n      if (this.platform.is(\"capacitor\") === true) {\n        let excerciseMode = excerciseSetMode ? 1 : 0\n        this.sqlite.create(\n        {\n          name: this.localID + '.db',\n          location: 'default'\n        }).then((db: SQLiteObject) => {\n          db.executeSql('select * from [' + gamename + ' level] where excerciseMode = ' + excerciseMode, []).then(resData => {\n            console.log(resData.rows.item(0))\n            this.eventemitter.onDatabase({level: resData.rows.item(0).level})\n          })\n        }).catch(() => {\n          this.eventemitter.onDatabase({level: null})\n        })\n      }\n    })\n\n  }\n\n  // this function gets sessiondata\n\n  getSessionData() {\n    this.getLocalID('getSessionData(')\n    // if (this.platform.is(\"capacitor\") === true) {\n    //   console.log('sessiondata')\n    //   let emittedObject = []\n    //   this.sqlite.create(\n    //     {\n    //       name: this.localID + '.db',\n    //       location: 'default'\n    //     }).then((db: SQLiteObject) => {\n    //       db.executeSql('select * from [sessiondata]')\n    //       .then(value => {\n    //         console.log(value.rows.item(0))\n    //         if (value.rows.item(0)) {\n    //           for (let i = 0; i < value.rows.length; i++) {\n    //             value.rows.item(i).date = new Date(value.rows.item(i).date)\n    //             emittedObject.push(value.rows.item(i))\n    //           }\n    //           // this.eventemitter.onDatabase(emittedObject)\n    //           console.log(emittedObject)\n    //         } else {\n    //           console.log(emittedObject)\n    //           // this.eventemitter.onDatabase(emittedObject)\n    //         }\n    //       })\n    //       .catch(e => {\n    //         console.log(\"an error has occurred\", e)\n    //         console.log(e.rows.item(0))\n    //         if (e.rows.item(0)) {\n    //           for (let i = 0; i < e.rows.length; i++) {\n    //             e.rows.item(i).date = new Date(e.rows.item(i).date)\n    //             emittedObject.push(e.rows.item(i))\n    //           }\n    //           // this.eventemitter.onDatabase(emittedObject)\n    //           console.log(emittedObject)\n    //           console.log(\"emittedObject\")\n    //         } else {\n    //           console.log(emittedObject)\n    //           console.log(\"emittedObject\")\n    //           // this.eventemitter.onDatabase(emittedObject)\n    //         }\n    //       })\n    //     })\n    // }\n    this.http.get(this.link +'users/' + this.localID + '/sessiondata' + this.idPath).subscribe(value => {\n      let emittedObject = []\n      for (let game in value) {\n        for (let sessionID in value[game]) {\n          let object = {\n            game: game,\n            date: value[game][sessionID].date,\n            level: value[game][sessionID].level,\n            score: value[game][sessionID].score,\n            time: value[game][sessionID].time,\n            wrongs: value[game][sessionID].wrongs\n          }\n          emittedObject.push(object)\n        }\n      }\n      this.eventemitter.onDatabase(emittedObject)\n    }, error => {\n      if (this.platform.is(\"capacitor\") === true) {\n        console.log('sessiondata23')\n        let emittedObject = []\n        this.sqlite.create(\n          {\n            name: this.localID + '.db',\n            location: 'default'\n          }).then((db: SQLiteObject) => {\n            db.executeSql('select * from [sessiondata]')\n            .then(value => {\n              console.log(value.rows.item(0))\n              if (value.rows.item(0)) {\n                for (let i = 0; i < value.rows.length; i++) {\n                  let theobject = value.rows.item(i)\n                  value.rows.item(i).date = new Date(value.rows.item(i).date)\n                  let object = {\n                    game: theobject.gameName,\n                    date: theobject.date,\n                    level: theobject.level,\n                    score: theobject.score,\n                    time: theobject.time,\n                    wrongs: theobject.wrongs\n                  }\n                  emittedObject.push(object)\n                }\n                this.eventemitter.onDatabase(emittedObject)\n              } else {\n                this.eventemitter.onDatabase(emittedObject)\n              }\n            })\n            .catch(e => {\n              console.log(\"an error has occurred\", e)\n              console.log(e.rows.item(0))\n              if (e.rows.item(0)) {\n                for (let i = 0; i < e.rows.length; i++) {\n                  let theobject = e.rows.item(i)\n                  e.rows.item(i).date = new Date(e.rows.item(i).date)\n                  let object = {\n                    game: theobject.gameName,\n                    date: theobject.date,\n                    level: theobject.level,\n                    score: theobject.score,\n                    time: theobject.time,\n                    wrongs: theobject.wrongs\n                  }\n                  emittedObject.push(object)\n                }\n                this.eventemitter.onDatabase(emittedObject)\n              } else {\n                this.eventemitter.onDatabase(emittedObject)\n              }\n            })\n          })\n      }\n    })\n  }\n\n  //this function clears localstorage after the user logs out\n\n  logout() {\n    localStorage.clear()\n  }\n\n  // after the user is authenticated or after a new refreshtoken is issued, this function runs and the localID gets stored in localStorage\n\n  storeLocalID(localID, idToken, email, refreshtoken, expiresIn) {\n    let autoLogin: AutoLoginData = {\n      email: email,\n      idToken: idToken,\n      refreshToken: refreshtoken,\n      localID: localID,\n      expiresIn: expiresIn\n    }\n    localStorage.setItem('loggedIn', JSON.stringify(autoLogin))\n  }\n\n  // this function gets the localID from localstorage and should be run before every function accessing the database\n  // this is because if the user's timer runs out and is no longer authenticated, this function runs the refreshToken function\n\n  getLocalID(funcname?: string, funcparams?) {\n    let autoLogin = JSON.parse(localStorage.getItem('loggedIn'))\n    let expiresIn = autoLogin.expiresIn\n    this.localID = JSON.parse(localStorage.getItem('loggedIn')).localID\n    this.idToken = JSON.parse(localStorage.getItem('loggedIn')).idToken\n    this.idPath = '.json?auth=' + this.idToken\n    console.log(this.localID)\n    if (new Date().valueOf() > expiresIn) {\n      this.refreshToken(funcname, funcparams)\n    } \n  }\n\n\n  // this function gets refreshtokens from the database and reaunthenticate the user\n\n  refreshToken(funcname?: string, funcparams?) {\n    let autoLogin = JSON.parse(localStorage.getItem('loggedIn'))\n    this.http.post<RefreshData>(\"https://securetoken.googleapis.com/v1/token?key=AIzaSyAXQtQdjbu_Sq341mRWn_s_jaqV9LxtftM\", {\n      grant_type: \"refresh_token\",\n      refresh_token: autoLogin.refreshToken\n    }).subscribe(resData => {\n      autoLogin.idToken = resData.id_token\n      autoLogin.refreshToken = resData.refresh_token\n      autoLogin.expiresIn = new Date().valueOf() + +resData.expires_in*1000\n      localStorage.setItem('loggedIn', JSON.stringify(autoLogin))\n      console.log('refreshtoken')\n      if (funcname) {\n        if (funcparams) {\n          let params = \"\"\n          for (let object of funcparams) {\n            params = params + JSON.stringify(object)\n          }\n          this[funcname + funcparams + \")\"]\n        }\n        else {\n          this[funcname + ')']\n        }\n      }\n    })\n  }\n\n  // this function puts user data like score, level or sessions into the database\n\n  put(path, storedvar) {\n    return this.http.put(this.link + 'users/' + this.localID + '/' + path + this.idPath, storedvar)\n  }\n\n  // this function gets user data like score or level or can get previously played sessions\n\n  get(path) {\n    return this.http.get(this.link +'users/' + this.localID + '/' + path + this.idPath)\n  }\n\n  //This command can be used to get something from gameinfo\n  // To call it just put this.gameinfoget('Word Pairs/pair1'), this would pull from \"https://memoryattention-1.firebaseio.com/gameinfo/WordPairs/pair1.json\"\n\n  gameinfoget(path) {\n    this.http.get(this.link + 'gameinfo/' + path + this.idPath).subscribe(value => {\n      this.eventemitter.onDatabase({path: path, value: value})\n    })\n  }\n\n\n  onLogin() {\n    this.getLocalID('onLogin(')\n    this.http.get<{level?: Object, score?: Object, sessiondata?: Object}>(this.link + 'users/' + this.localID + this.idPath).subscribe(value => {\n      console.log(value)\n      if (this.platform.is(\"capacitor\") === true && value) {\n        // SQLite sync with the database occurs in this code\n        // The db.executeSql statements run sql code and add to the sql database and the database is stored under localID\n        // The firebase structure is users/{localID}/(score, level, sessiondata) (3 separate folders)\n\n        this.sqlite.create(\n          {\n            name: this.localID + '.db',\n            location: 'default'\n          }).then((db: SQLiteObject) => {\n              if (value.level) {\n                for (let game in value.level) {\n\n                  db.executeSql('create table [' + game + ' level]' + ' (excerciseMode boolean, level int)', []).then(resData => {\n                    console.log(value.level[game] + \"LEVEL STUFF HERE\")\n                    console.log(value.level + 'level')\n                    console.log(resData)\n                    if (value.level[game].excerciseset) {\n                      db.executeSql('insert into [' + game + ' level]' + ' (excerciseMode, level) values (1, ' + value.level[game].excerciseset + ')').then(resData => {\n                        console.log(resData)\n                      })\n                    }\n                    if (value.level[game].gameslist) {\n                      db.executeSql('insert into [' + game + ' level]' + ' (excerciseMode, level) values (0, ' + value.level[game].gameslist + ')').then(resData => {\n                        console.log(resData)\n                      })\n                    }\n                  })\n                  .catch(e => {\n                    console.log(e)\n                    if (value.level[game].excerciseset) {\n                      db.executeSql('update [' + game + ' level] set level = ' + value.level[game].excerciseset + ' where excerciseMode = 1', []).then(resData => {\n                        console.log(resData)\n                      })\n                      .catch(() => {\n                        db.executeSql('insert into [' + game + ' level]' + ' (excerciseMode, level) values (1, ' + value.level[game].excerciseset + ')').then().catch(e => {console.log(e)})\n                      })\n                    }\n                    if (value.score[game].gameslist) {\n                      db.executeSql('update [' + game + ' level] set level = ' + value.level[game].gameslist + ' where excerciseMode = 1', []).then(resData => {\n                        console.log(resData)\n                      })\n                      .catch(() => {\n                        db.executeSql('insert into [' + game + ' level]' + ' (excerciseMode, level) values (1, ' + value.level[game].gameslist + ')').then().catch(e => {console.log(e)})\n                      })\n                    }\n                  })\n                }\n              }\n              if (value.score) {\n                \n                for (let game in value.score) {\n                  console.log(value.score[game])\n                  db.executeSql('create table [' + game + ' score]' + ' (excerciseMode boolean, score float)', [])\n                  .then(() => {\n                    if (value.level[game].excerciseset) {\n                      db.executeSql('insert into [' + game + ' score]' + ' (excerciseMode, score) values (1, ' + value.score[game].excerciseset + ')').then(resData => {\n                        console.log(resData)\n                      })\n                    }\n                    if (value.level[game].gameslist) {\n                      db.executeSql('insert into [' + game + ' score]' + ' (excerciseMode, score) values (0, ' + value.score[game].gameslist + ')').then(resData => {\n                        console.log(resData)\n                      })\n                    }\n                  })\n                  .catch(e => {\n                    console.log(e)\n                    if (value.score[game].excerciseset) {\n                      db.executeSql('update [' + game + ' score] set score = ' + value.score[game].excerciseset + ' where excerciseMode = 1', []).then(resData => {\n                        console.log(resData)\n                      })\n                      .catch(error => {\n                        db.executeSql('insert into [' + game + ' score]' + ' (excerciseMode, score) values (1, ' + value.score[game].excerciseset + ')').then().catch(e => {console.log(e)})\n                      })\n                    }\n                    if (value.score[game].gameslist) {\n                      db.executeSql('update [' + game + ' score] set score = ' + value.score[game].gameslist + ' where excerciseMode = 1', []).then(resData => {\n                        console.log(resData)\n                      })\n                      .catch(error => {\n                        db.executeSql('insert into [' + game + ' score]' + ' (excerciseMode, score) values (1, ' + value.score[game].gameslist + ')').then().catch(e => {console.log(e)})\n                      })\n                    }\n                  })\n                }\n              }\n              // sessiondata stored as (gameName VARCHAR(64), date date, level int, score float, time float, wrongs int)\n              if (value.sessiondata) {\n\n                db.executeSql('create table [sessiondata] (id integer primary key, gameName VARCHAR(64), date VARCHAR(64), level int, score float, time float, wrongs int)',[])\n                .then(() => {\n                  console.log(value.sessiondata)\n                  for (let game in value.sessiondata) {\n                    console.log(game)\n                    for (let sessionID in value.sessiondata[game]) {\n                      let gameinfo = value.sessiondata[game][sessionID]\n                      db.executeSql('insert into sessiondata (gameName, date, level, score, time, wrongs) values (\"' + game + '\", \"' + gameinfo.date + '\", ' + gameinfo.level + ', ' + gameinfo.score + ', ' + gameinfo.time + ', ' + gameinfo.wrongs + ')', [] ).then(resData => {\n                        console.log(resData)\n                      }).catch(e => {console.log(e)})\n                    }\n                  }\n                })\n                .catch(e => {\n                  console.log(e)\n                  for (let game in value.sessiondata) {\n                    console.log(game)\n                    for (let sessionID in value.sessiondata[game]) {\n                      let gameinfo = value.sessiondata[game][sessionID]\n                      // db.executeSql('update sessiondata set date = \"' + gameinfo.date + '\", gameName = \"' + game + '\", level = ' + gameinfo.level + ', score = ' + gameinfo.score + ', time = ' + gameinfo.time + ', wrongs = ' + gameinfo.wrongs + ' where date = \"' + gameinfo.date + '\" and time = ' + gameinfo.time + ' and gameName = \"' + game + '\"', []).then().catch(e => {\n                      //   console.log(e)\n                        db.executeSql('insert or replace into [sessiondata] values ( \"' + game + '\", \"' + gameinfo.date + '\", ' + gameinfo.level + ', ' + gameinfo.score + ', ' + gameinfo.time + ', ' + gameinfo.wrongs + ')', [] ).then(resData => {\n                          console.log(resData)\n                        }).catch(e => {console.log(e)})\n                      // })\n\n                    }\n                  }\n                })\n              }\n          }).then(() => {\n            this.eventemitter.onLoading(true)\n          })\n        }\n        else {\n          this.eventemitter.onLoading(true)\n        }\n    }, error => {\n      console.log(error)\n      this.eventemitter.onLoading(false)\n    })\n  }\n\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventemitterService {\n  animate = new EventEmitter<string>();\n  // CurrentCardRoute = new EventEmitter<string>();\n  form = new EventEmitter<string>();\n  // gameState = new EventEmitter<string>();\n  CurrentCardRoute = new Subject<string>();\n  gameStateSubj = new Subject<string>();\n  RoundFinished = new Subject<any>();\n  memorizedItems = new Subject<any>();\n  databaseemitter = new Subject<any>();\n  loading = new Subject<boolean>();\n\n  constructor() { }\n  // has the different subjects and event emitters that are used in the app\n\n  onAnimate(string: string) {\n    this.animate.emit(string)\n  }\n\n  onCurrentCardRoute(string: string) {\n    this.CurrentCardRoute.next(string)\n  }\n\n  onForm(string: string) {\n    this.form.emit(string)\n  }\n\n  onGameState(string: string) {\n    // this.gameState.emit(string)\n    this.gameStateSubj.next(string)\n  }\n\n  onRoundFinished(any) {\n    this.RoundFinished.next(any)\n  }\n\n  onMemorizedItems(array: any) {\n    this.memorizedItems.next(array)\n  }\n\n  onDatabase(object) {\n    this.databaseemitter.next(object)\n  }\n\n  onLoading(boolean: boolean) {\n    this.loading.next(boolean)\n  }\n\n}\n"]}