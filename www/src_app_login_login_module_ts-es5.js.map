{"version":3,"sources":["webpack:///src/app/login/login-routing.module.ts","webpack:///src/app/login/login.module.ts","webpack:///src/app/login/login.page.ts","webpack:///src/app/login/login.service.ts","webpack:///src/app/login/login.page.scss","webpack:///src/app/login/login.page.html"],"names":["routes","path","component","LoginPage","LoginPageRoutingModule","NgModule","imports","RouterModule","exports","LoginPageModule","CommonModule","FormsModule","IonicModule","declarations","loginService","router","datastorage","eventemitter","loginMode","forgotPasswordMode","isLoading","loggedIn","localStorage","getItem","navigate","login","email","password","subscribe","resData","storeLocalID","localId","idToken","refreshToken","Date","valueOf","expiresIn","subscription","Subscription","loading","value","unsubscribe","console","log","onLogin","error","handleError","message","signUp","presentAlert","forgotPassword","LoginService","Router","DataService","EventemitterService","Component","selector","template","http","AlertCtrl","API_KEY","post","returnSecureToken","errorm","create","header","buttons","alert","present","requestType","HttpClient","AlertController","Injectable","providedIn"],"mappings":"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","file":"src_app_login_login_module_ts-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPageRoutingModule } from './login-routing.module';\n\nimport { LoginPage } from './login.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    LoginPageRoutingModule\n  ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { DataService } from '../shared/data.service';\nimport { EventemitterService } from '../shared/eventemitter.service';\nimport { LoginService } from './login.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage implements OnInit {\n  email:string;\n  password:string;\n  loginMode = true;\n  forgotPasswordMode = false;\n  isLoading = true\n  constructor(\n    private loginService: LoginService,\n    private router: Router,\n    private datastorage: DataService,\n    private eventemitter: EventemitterService) { }\n\n    // navigates to the main page if logged in\n  ngOnInit() {\n    let loggedIn = localStorage.getItem('loggedIn')\n    if (loggedIn) {\n      this.router.navigate(['/home/main'])\n    }\n  }\n\n  // what happens when the form with email and password is submitted\n  onSubmit() {\n    if (this.loginMode === true) {\n      this.loginService.login(this.email, this.password).subscribe(resData => {\n        this.datastorage.storeLocalID(resData.localId, resData.idToken, resData.email, resData.refreshToken, new Date().valueOf() + +resData.expiresIn)\n        this.isLoading = true\n        let subscription = new Subscription()\n        subscription = this.eventemitter.loading.subscribe(value => {\n          if (value === true) {\n            this.router.navigate(['/home/main'])\n            subscription.unsubscribe()\n          } else {\n            console.log('an error has occurred')\n          }\n        })\n        this.datastorage.onLogin()\n      }, error => {\n        console.log(error)\n        this.loginService.handleError(error.error.error.message)\n      })\n\n    }\n    if (this.loginMode === false) {\n      this.loginService.signUp(this.email, this.password).subscribe(resData => {\n        this.loginService.presentAlert('Sign Up Successful!', \"Now login to get started.\")\n        this.loginMode = true\n      }, error => {\n        console.log(error)\n        this.loginService.handleError(error.error.error.message)\n      })\n    }\n  }\n\n  // forgot password function\n  forgotPassword() {\n    this.loginService.forgotPassword(this.email)\n    this.forgotPasswordMode = false\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { AlertController } from '@ionic/angular';\n\nexport interface AuthResponseData {\n  kind: string;\n  idToken: string;\n  email: string;\n  refreshToken: string;\n  expiresIn: string;\n  localId: string;\n  registered?: boolean;\n  }\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  API_KEY = 'AIzaSyCf59OjdjdHXpM_bkjz6wElQAQCJLBxsEA'\n\n  constructor(private http: HttpClient, private AlertCtrl: AlertController) { }\n\n  // onLogin(email: string, password: string) {\n    // let currentemail = localStorage.getItem('credential1')\n    // let currentpassword = localStorage.getItem('credential2')\n    // if (email === currentemail && password === currentpassword) {\n    //   console.log(true)\n    //   localStorage.setItem('isLoggedIn', 'true')\n    //   return true\n    // } \n  // }\n\n  // sign up function from database\n  signUp(email, password) {\n    return this.http.post<AuthResponseData>(\n      'https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=' + this.API_KEY,\n      {\n          email: email,\n          password: password,\n          returnSecureToken: true\n      }\n  )\n  }\n\n  // login function from database\n  login(email: string, password: string) {\n    console.log('login')\n    return this.http\n      .post<AuthResponseData>(\n        'https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=' + this.API_KEY,\n        {\n          email: email,\n          password: password,\n          returnSecureToken: true\n        }\n      )\n}\n\n// in case of an error, shows the message\nhandleError(error) {\n  let message: string;\n  let errorm: string;\n  console.log(error)\n  switch(error) {\n    case 'EMAIL_EXISTS':\n      errorm = \"Email Exists\"\n      message = \"The email address is already in use by another account.\"\n      break\n    case 'INVALID_EMAIL':\n      errorm = \"Invalid Email\"\n      message = \"This email does not exist. Please enter a valid email.\"\n      break\n    case 'TOO_MANY_ATTEMPTS_TRY_LATER':\n      errorm = \"Too Many Attempts\"\n      message = \"We have blocked all requests from this device due to unusual activity. Try again later.\"\n      break\n    case 'EMAIL_NOT_FOUND':\n      errorm = \"Email Not Found\"\n      message = \"There is no user record corresponding to this identifier. The user may have been deleted.\"\n      break\n    case 'INVALID_PASSWORD':\n      errorm = \"Invalid Password\"\n      message = \"The password is invalid.\"\n      break\n    case 'USER_DISABLED':\n      errorm = \"User Disabled\"\n      message = \"The user account has been disabled by an administrator.\"\n      break\n  }\n  this.presentAlert(errorm, message)\n}\n\n// presents the error\nasync presentAlert(error, message) {\n  const alert = await this.AlertCtrl.create({\n    header: error,\n    message: message,\n    buttons: ['OK']\n  });\n\n  await alert.present();\n}\n\n// forgot password function from the database\nforgotPassword(email) {\n  this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:sendOobCode?key=' + this.API_KEY, {\n    requestType: \"PASSWORD_RESET\",\n    email: email\n  }).subscribe(value => {\n    console.log(value)\n  })\n}\n\n  // onSignUp(email, password) {\n\n    // localStorage.setItem('credential1', this.encode(email))\n    // localStorage.setItem('credential2', this.encode(password))\n  // }\n\n  // encode(string) {\n  //   let hex\n  //   let result = \"\";\n  //   for (let i = 0; i < string.length; i++) {\n  //       hex = ''+string.charCodeAt(i).toString(16);\n  //       result += (\"000\"+hex).slice(-4);\n  //   }\n  //   return result\n  // }\n\n  // decode(string) {\n  //   let hex  = string.toString();\n  //   let str = '';\n  //   for (var n = 0; n < hex.length; n += 4) {\n  //     str += String.fromCharCode(parseInt(hex.substr(n, 4), 16));\n  //   }\n  //   return str;\n  // }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsb2dpbi5wYWdlLnNjc3MifQ== */\";","export default \"<!-- has the forgot password function and title of the page -->\\n<ion-header>\\n  <ion-toolbar>\\n    <ion-title *ngIf=\\\"!forgotPasswordMode\\\">{{ loginMode ? \\\"Log In\\\" : \\\"Sign Up\\\" }}</ion-title>\\n    <ion-title *ngIf=\\\"forgotPasswordMode\\\">Forgot Password</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<!-- the login page with the email and password and the submit button -->\\n<ion-content>\\n  <form #f=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(); f.reset()\\\">\\n    <ion-grid>\\n      <ion-row>\\n        <ion-col>\\n          <div class=\\\"form-group\\\">\\n            <ion-item>\\n              <ion-label for=\\\"email\\\" position=\\\"floating\\\">\\n                E-mail\\n              </ion-label>   \\n              <ion-input\\n              type=\\\"email\\\"\\n              email\\n              required\\n              [(ngModel)]=\\\"email\\\"\\n              name=\\\"email\\\"\\n              id=\\\"email\\\"\\n              class=\\\"form-control\\\"></ion-input>         \\n            </ion-item>\\n          </div>\\n        </ion-col>\\n      </ion-row>\\n      <ion-row *ngIf=\\\"!forgotPasswordMode\\\">\\n        <ion-col>\\n          <div class=\\\"form-group\\\">\\n            <ion-item>\\n              <ion-label for=\\\"password\\\" position=\\\"floating\\\">\\n                Password\\n              </ion-label>   \\n              <ion-input\\n              type=\\\"password\\\"\\n              required\\n              [(ngModel)]=\\\"password\\\"\\n              name=\\\"password\\\"\\n              id=\\\"password\\\"\\n              class=\\\"form-control\\\"\\n              minlength=\\\"6\\\"></ion-input>         \\n            </ion-item>\\n          </div>\\n        </ion-col>\\n      </ion-row>\\n      <ion-row>\\n        <ion-col>\\n            <ion-button *ngIf=\\\"!forgotPasswordMode\\\" [disabled]=\\\"!f.valid\\\" type=\\\"submit\\\">{{ loginMode ? \\\"Log In\\\" : \\\"Sign Up\\\"}}</ion-button>\\n            <ion-label *ngIf=\\\"!forgotPasswordMode\\\" class=\\\"ion-padding\\\"> {{ loginMode ? \\\"Don't have an account?\\\" : \\\"Already have an account?\\\"}} <a (click)=\\\"loginMode = !loginMode\\\">{{ loginMode ? \\\"Sign Up\\\" : \\\"Log In\\\" }}</a></ion-label>\\n            <ion-button *ngIf=\\\"forgotPasswordMode\\\"  (click)=\\\"forgotPassword()\\\">Submit</ion-button>\\n            <a class=\\\"ion-padding\\\" (click)=\\\"forgotPasswordMode = !forgotPasswordMode\\\" *ngIf=\\\"loginMode\\\">{{ !forgotPasswordMode ? \\\"Forgot Password?\\\" : \\\"Back\\\"}}</a>\\n        </ion-col>\\n      </ion-row>\\n    </ion-grid>\\n  </form>\\n</ion-content>\\n\";"]}