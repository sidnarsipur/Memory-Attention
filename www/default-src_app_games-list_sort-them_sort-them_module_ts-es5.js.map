{"version":3,"sources":["webpack:///src/app/games-list/sort-them/sort-them-routing.module.ts","webpack:///src/app/games-list/sort-them/sort-them.module.ts","webpack:///src/app/games-list/sort-them/sort-them.page.ts","webpack:///src/app/games-list/sort-them/sort-them.service.ts","webpack:///src/app/games-list/sort-them/sort-them.page.scss","webpack:///src/app/games-list/sort-them/sort-them.page.html"],"names":["routes","path","component","SortThemPage","SortThemPageRoutingModule","NgModule","imports","RouterModule","exports","SortThemPageModule","CommonModule","FormsModule","IonicModule","SharedModule","declarations","eventemitter","platform","sortThemService","router","alertCtrl","gameService","gameHasBegun","paused","wrongcount","lost","currentIndex","gameno","startButtonIsDisabled","numberofchips","array","clickedcards","currentindex","wrongselected","times","timerfunc","setInterval","timer","score","gamewrongs","instructionsarray","subscription","Subscription","database","level","excerciseMode","getLevelScore","databaseemitter","subscribe","value","height","width","console","log","gameStateSubj","onStart","onEndGame","setTimeout","onResume","onQuit","onPause","levels","topleft","generateCoordinates","create","header","getLevel","message","scoringconstant","buttons","text","role","handler","startRound","then","alert","present","inittime","getRadiusConstant","endGame","pausetimer","navigate","top","left","startTimer","chip","index","currentcard","push","color","allAnswersSelected","wrongChipSelected","endingtime","prevelevel","slice","determineScore","increaselevel","increaseLevel","pointsneeded","onRoundFinished","storeLevelScore","gamescore","currentcolor","getScore","card","unsubscribe","EventemitterService","Platform","SortThemService","Router","AlertController","GameService","Input","Component","selector","template","alphabet","smallalphabet","radiusconstant","heightconstant","bottomconstant","colors","prevscore","getDimensions","mode","platforms","item","radconst","generateRadiusConstant","toppossibilities","tops","currenttoplength","length","i","shape","currentop","Math","round","random","currentleft","splice","seriesFixArray","getArray","fixArray","tobefixed","numtobefixed","possibilities","coordinate","currenttopleft","startindex","numbersorletters","multiple","sevenoreight","Injectable","providedIn"],"mappings":"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","file":"default-src_app_games-list_sort-them_sort-them_module_ts-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SortThemPage } from './sort-them.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SortThemPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SortThemPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SortThemPageRoutingModule } from './sort-them-routing.module';\n\nimport { SortThemPage } from './sort-them.page';\nimport { SharedModule } from '../../shared/shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SortThemPageRoutingModule,\n    SharedModule\n  ],\n  declarations: [SortThemPage],\n  exports: [SortThemPage],\n})\nexport class SortThemPageModule {}\n","import { Component, OnInit, ViewChild, ElementRef, Input, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AlertController, Platform } from '@ionic/angular';\nimport { Subscription } from 'rxjs';\nimport { EventemitterService } from '../../shared/eventemitter.service';\nimport { GameService } from '../../shared/game.service';\nimport { SortThemService } from './sort-them.service';\n\n\n@Component({\n  selector: 'app-sort-them',\n  templateUrl: './sort-them.page.html',\n  styleUrls: ['./sort-them.page.scss'],\n})\nexport class SortThemPage implements OnInit, OnDestroy {\n  gameHasBegun = false;\n  paused = false;\n  wrongcount: number = 0;\n  lost = false;\n  currentIndex: number = 0;\n  numbersRemembered: number;\n  gameno = 4;\n  startButtonIsDisabled = false;\n  numberofchips = 20\n  array = []\n  clickedcards = []\n  currentindex = 0 \n  wrongselected = []\n  height: number;\n  width: number;\n  top: number[];\n  left: number[];\n  times: number[] = [];\n  timerfunc = setInterval(() => {\n    this.timer = this.timer + 1000\n  }, 1000)\n  timer = 0\n  inittime: number;\n  pausetimer: number;\n  score = 0\n  gamewrongs = 0\n  instructionsarray = [\"Tap the numbers from 1-20\", \"Tap the letters from A-T\", \"Tap the letters from a-t\", \"Tap the letters from earliest to last\", \"Tap the numbers then letters 1, A, 2, B...\", \"Tap the lowest number then lowest letter then up to the highest\", \"Tap the lowest number and increase in multiples\", \"Tap the lowest number and increase in multiples\", \"1Aa2Bb...\", \"12Ab34Bc...\" ]\n  subscription = new Subscription()\n  database = new Subscription()\n  gamescore: number;\n  level = 1\n  @Input('excerciseSet') excerciseMode = false;\n  @Input('levels') levels;\n\n  constructor(\n    private eventemitter: EventemitterService,\n    private platform: Platform,\n    private sortThemService: SortThemService,\n    private router: Router,\n    private alertCtrl: AlertController,\n    private gameService: GameService) { }\n\n  ngOnInit() {\n\n    // gets existing level and score from the database\n    this.gameService.getLevelScore(this.gameno, this.excerciseMode)\n    this.database = this.eventemitter.databaseemitter.subscribe(value => {\n      if (value.level) {\n        this.sortThemService.level = value.level\n      }\n      if (value.score) {\n        this.score = value.score\n      }\n    })\n\n    // based on the size of the device, the size of the buttons changes and this function just gets the height and width of the device\n    this.height = +this.platform.height()\n    this.width = +this.platform.width()\n    console.log(this.height, this.width)\n\n    // emitter to get menu function calls from the start component\n    this.subscription = this.eventemitter.gameStateSubj.subscribe(value => {\n      console.log(value)\n      switch (value) {\n        case 'start': \n          this.onStart()\n          break\n        case 'restart':\n          this.startButtonIsDisabled = true\n          this.onEndGame()\n          setTimeout(() => {\n            this.startButtonIsDisabled = false\n            this.onStart()\n          }, 700)\n          break\n        case 'resume':\n          this.onResume()\n          break\n        case 'quit':\n          this.onQuit()\n          break\n        case 'pause':\n          this.onPause()\n          break\n        case 'stop':\n          this.onEndGame()\n          break\n      }\n    })\n\n    if (this.excerciseMode === true) {\n      this.sortThemService.level = this.levels[0]\n      this.score = 0\n    }\n  }\n\n  // starts the game and shows the popup\n  onStart() {\n    let topleft = this.sortThemService.generateCoordinates()\n    this.alertCtrl.create({\n      header: 'Level: ' + this.sortThemService.getLevel(),\n      message: 'You need ' + (this.gameService.scoringconstant - this.score) + ' points to go to the next level',\n      buttons: [{\n        text: 'Continue',\n        role: 'Continue',\n        handler: () => {\n          this.startRound(topleft)\n          this.gameHasBegun = true\n      }}]}).then(alert=> alert.present())\n  }\n\n  // begins the timer\n  startTimer() {\n    this.inittime = this.timer\n  }\n\n  // figures out the radius of the buttons\n  getRadius() {\n    return this.sortThemService.getRadiusConstant()\n  }\n\n  // fetches the lvel from the service\n  getLevel() {\n    return [this.sortThemService.level]\n  }\n\n  // async presentAlert(message) {\n  //   const alert = await this.alertCtrl.create({\n  //     header: 'Score:' + this.score,\n  //     message: 'You need' + message + 'points to go to the next level',\n  //     buttons: ['Continue']\n  //   })\n  //   await alert.present()\n  // }\n\n  // ends the game\n  onEndGame() {\n    this.gameHasBegun = false\n    this.sortThemService.endGame()\n    this.score = 0\n  }\n\n\n  // resumes the game\n  onResume() {\n    this.timer = this.pausetimer\n  }\n\n  // quits to the home page\n  onQuit() {\n    this.onEndGame()\n    this.inittime = 0\n    this.router.navigate([\"/home\"])\n  }\n\n  // pauses the game timer\n  onPause() {\n    this.pausetimer = this.timer\n  }\n\n  // begins the round with information from the service\n  startRound(topleft) {\n    this.gamewrongs = 0\n    this.top = topleft.top\n    this.left = topleft.left\n    this.array = topleft.array\n    this.startTimer()\n    console.log(this.array)\n    console.log(\"top: \" + this.top)\n    console.log(\"left: \" + this.left)\n  }\n\n  // what happens when a button is clicked and the color change and ends game if all answers are selected\n  onClickChip(chip, index) {\n    let currentcard = this.array[this.currentIndex].text\n    console.log(currentcard, chip)\n    if (chip === currentcard) {\n      console.log(chip, currentcard)\n      this.clickedcards.push(chip)   \n      this.array[this.currentIndex].color = \"success\" \n      this.currentIndex++\n      if (this.currentIndex === this.numberofchips) {\n        this.allAnswersSelected()\n      }\n    } if (chip != currentcard) {\n      this.wrongChipSelected(index, chip)\n    }\n    console.log(this.currentIndex)\n  }\n\n  // stops the timer and ends the game and starts a new round when all the answers are selected\n  allAnswersSelected() {\n    let endingtime = this.timer\n    let prevelevel = [this.sortThemService.level].slice(0, 1)\n    this.determineScore()\n    this.times.push(endingtime - this.inittime)\n    let increaselevel = this.sortThemService.increaseLevel(this.score)\n    if (increaselevel === true) {\n      console.log(this.times)\n      this.gameHasBegun = false\n    } else {\n      if(this.score >= this.gameService.scoringconstant) {\n        this.score = 0\n      }\n      let topleft = this.sortThemService.generateCoordinates()\n      let pointsneeded = null\n      if (this.excerciseMode === true) {\n        if (this.sortThemService.level === this.levels[1]) {\n          this.eventemitter.onRoundFinished({continue: true, score: this.score})\n        }\n        this.sortThemService.level++\n      } else {\n        pointsneeded = this.gameService.scoringconstant - this.score\n        this.gameService.storeLevelScore(this.gameno, this.score, this.sortThemService.level, this.excerciseMode, (endingtime - this.inittime)/1000, this.gamewrongs, this.gamescore, prevelevel[0])\n      }\n      const alert = this.alertCtrl.create({\n        header: 'Level: ' + this.sortThemService.getLevel(),\n        message: 'You need ' + pointsneeded + ' points to go to the next level',\n        buttons: [{\n          text: 'Continue',\n          role: 'Continue',\n          handler: () => {\n            this.startRound(topleft)\n            this.clickedcards = []\n            this.currentIndex = 0\n        }}]}).then(alert=> alert.present())\n    }\n  }\n\n  // what happens when a wrong button is selected\n  wrongChipSelected(index, chip) {\n    this.gamewrongs++\n    let currentcolor = this.array[index].color\n    this.array[index].color = \"danger\"  \n    this.wrongselected.push(chip) \n    setTimeout(() => {\n      this.array[index].color = currentcolor\n    }, 300)\n  }\n\n  // figures out the score after a round\n  determineScore() {\n    this.gamescore = this.gameService.getScore(20, this.gamewrongs)\n    if (this.gamescore < 0) {\n      this.gamescore = 0\n    }\n    console.log(this.gamescore)\n    this.score = this.score + this.gamescore\n  }\n\n  // disables a correct chip\n  isDisabled(chip) {\n    for (let card of this.clickedcards) {\n      if (chip === card) {\n        return true\n      }\n    }\n    return false\n  }\n\n  // unsubscribes when destroyed\n  ngOnDestroy() {\n    this.subscription.unsubscribe()\n    this.database.unsubscribe()\n  }\n\n  // unsubscribes when leave\n  ionViewDidLeave() {\n    this.subscription.unsubscribe()\n    this.database.unsubscribe()\n  }\n}","import { Injectable } from '@angular/core';\nimport { Platform } from '@ionic/angular';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SortThemService {\n  numberofchips = 20\n  height: number;\n  width: number;\n  level: number = 1;\n  alphabet = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\n  smallalphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\",\"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n  radiusconstant = 55\n  heightconstant = 70\n  bottomconstant = 55\n  colors = [\"primary\", \"secondary\", \"tertiary\", \"warning\", \"danger\", \"dark\", \"medium\", \"light\"]\n  prevscore = 0\n\n  // figures out the dimensions of the screen when the service is created\n  constructor(private platform: Platform) { \n    this.getDimensions()\n  }\n\n  // figures out the radius and returns it\n  getRadiusConstant() {\n    return this.radiusconstant\n  }\n\n  // returns the game level\n  getLevel() {\n    return this.level\n  }\n\n  // figures out the button size from the screen size\n  getDimensions() {\n    this.height = +this.platform.height()\n    this.width = +this.platform.width()\n    let mode = this.platform.platforms()\n    console.log(mode)\n    let platform:string;\n    for (let item of mode) {\n      if (item === \"ios\") {\n        this.heightconstant = 110\n        platform = \"ios\"\n      }\n      if (item === \"android\") {\n        this.heightconstant = 130\n        this.bottomconstant = 75\n        platform = \"android\"\n      }\n    }\n    if (this.width*this.height >= 250126) {\n      if (platform === \"ios\") {\n        this.bottomconstant = 125\n        if(this.width*this.height >= 786432) {\n          this.bottomconstant = 175\n        }\n      }\n    }\n\n  }\n\n  // makes the radius from the height of the screen\n  generateRadiusConstant() {\n    let height = this.height - this.heightconstant - this.bottomconstant\n    let radconst = height/10\n    if (radconst > 75) {\n      radconst = 75\n    }\n    this.radiusconstant = radconst\n    console.log(this.radiusconstant)\n  }\n\n\n  // generates coordinates for the buttons \n  generateCoordinates() {\n    this.getDimensions()\n    this.generateRadiusConstant()\n    let top = []\n    let left = []\n    let array = []\n    let toppossibilities: number[] = [];\n    for (let tops = this.heightconstant; tops < this.height - this.bottomconstant;) {\n      toppossibilities.push(tops)\n      tops = tops + this.radiusconstant\n    }\n    let currenttoplength = toppossibilities.length\n    for (let i = 1; i < this.numberofchips + 1; i++) {\n      array.push({text: 1, color: \"light\", shape: \"round\"})\n      let currentop = Math.round(Math.random()*(toppossibilities.length - 1))\n      let currentleft = Math.round(Math.random()*(this.width - 80))\n      top.push(toppossibilities[currentop])\n      left.push(currentleft)\n      console.log(toppossibilities, currentop, toppossibilities[currentop], toppossibilities[1])\n      toppossibilities.splice(currentop, 1)\n    }\n    let topleft = this.seriesFixArray(currenttoplength, top, left)\n    top = topleft.top\n    left = topleft.left\n    array = this.getArray(array)\n    return {top: top, left: left, array: array}\n  }\n\n  // fixes the array if too many or too few coordinates are generated\n  seriesFixArray(currenttoplength, top, left) {\n    console.log(currenttoplength)\n    if (currenttoplength < this.numberofchips) {\n      let topleft = this.fixArray(currenttoplength, top, left)\n      top = topleft.top\n      left = topleft.left\n      let tobefixed = top.length\n      // for (let item of top) {\n      //   if (item === undefined) {\n      //     tobefixed = tobefixed - 1\n      //   }\n      // }\n      // if (tobefixed < top.length) {\n      //   let lefttop = this.seriesFixArray(tobefixed, top, left)\n      //   top = lefttop.top\n      //   left = lefttop.left\n      // }\n    }\n    return {top, left}\n  }\n\n  // part of the series fix array function that generates new coordinates if the number of necessary buttons is greater than the number of coordinates generated\n  fixArray(currenttoplength, top, left) {\n      let numtobefixed = top.length - currenttoplength\n      top.splice(top.length - numtobefixed, numtobefixed)\n      left.splice(left.length - numtobefixed, numtobefixed)\n      let i = 0\n      let possibilities = []\n      for (let coordinate of left) {\n        if (coordinate + this.radiusconstant*2 < this.width - 80) {\n          possibilities.push({top: top[i], left: coordinate + this.radiusconstant + 25 + Math.round(Math.random()*(this.width - 80 - (coordinate + this.radiusconstant*2)))})\n        }\n        if (coordinate - this.radiusconstant*2 > 0) {\n          possibilities.push({top: top[i], left: coordinate - this.radiusconstant - 25 - Math.round(Math.random()*(coordinate - this.radiusconstant*2))})\n        }\n        i++\n      }\n      for (let i = 0; i < numtobefixed; i++) {\n        let currenttopleft = possibilities.splice(possibilities.length - 1, 1)\n        // if (currenttopleft.length === 0) {\n        //   currenttopleft = [{top: undefined, left: undefined}]\n        // }\n        top.push(currenttopleft[0].top)\n        left.push(currenttopleft[0].left)\n      }\n    return {top, left}\n  }\n\n  // based on level this function makes the proper array of numbers/ letters\n  getArray(array: any[]) {\n    let startindex = 0\n    let numbersorletters = 0\n    let multiple = 1\n    let sevenoreight: boolean = this.level === 7 || this.level === 8\n    if (this.level === 4) {\n      numbersorletters = Math.round(Math.random()) + 1\n    }\n    if (sevenoreight) {\n      numbersorletters = 1\n      multiple = Math.round(Math.random()*5) + multiple + 1\n    }\n    if (this.level === 4 || sevenoreight) {\n      if (numbersorletters === 1) {\n        startindex = Math.round(Math.random()*10)\n      }\n      if (numbersorletters === 2) {\n        startindex = Math.round(Math.random()*6)\n      }\n    }\n    if (this.level === 6 || this.level === 9) {\n      startindex = Math.round(Math.random()*6)\n    }\n    if (this.level === 10) {\n      startindex = 2*Math.round(Math.random()*3)\n    }\n    console.log(array)\n    for (let i = 1; i < array.length + 1; i++) {\n      if (this.level === 1 || numbersorletters === 1) {\n          array[i - 1].text = multiple*(i) + startindex\n      }\n      if (this.level === 2 || numbersorletters === 2) {\n        array[i - 1].text = this.alphabet[i - 1 + startindex]\n      }\n      if (this.level === 3) {\n        array[i - 1].text = this.smallalphabet[i - 1 + startindex]\n      }\n      if (this.level === 5 || this.level === 6) {\n        if (i % 2 === 1) {\n          array[i - 1].text = (i + 1)/2 + startindex\n        }\n        if (i % 2 === 0) {\n          array[i - 1].text = this.alphabet[i/2 - 1 + startindex]\n        }\n      }\n      if (this.level === 9) {\n        switch(i % 3) {\n          case 1:\n            array[i - 1].text = (i - 1)/3 + startindex + 1\n            break\n          case 2: \n            array[i - 1].text = this.alphabet[(i - 2)/3 + startindex]\n            break\n          case 0: \n            array[i - 1].text = this.smallalphabet[(i - 3)/3 + startindex]\n            break\n        }\n      }\n      if (this.level === 10) {\n        console.log(i % 4)\n        switch (i % 4) {\n          case 1:\n            array[i - 1].text = (0.5*i) + 0.5 + startindex\n            break\n          case 2:\n            array[i - 1].text = (0.5*i) + 1 + startindex\n            break\n          case 3:\n            array[i - 1].text = this.alphabet[0.5*(i - 3) +startindex]\n            break\n          case 0:\n            array[i - 1].text = this.smallalphabet[0.5*i - 1 + startindex]\n            break\n        }\n      }\n      if (this.level === 6 || this.level > 7) {\n        array[i - 1].color = this.colors[Math.round(Math.random()*this.colors.length - 1)]\n      }\n    }\n    console.log(array)\n    return array\n  }\n\n  // level scenarios when it is level 10 or the score reaches 200\n  increaseLevel(score) {\n    if (this.level === 10) {\n      return true\n    }\n    if (score >= 200) {\n      this.level++\n    }\n  }\n\n  // resets level\n  endGame() {\n    this.level = 1\n  }\n}\n","export default \".absolute {\\n  position: fixed;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNvcnQtdGhlbS5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxlQUFBO0FBQ0oiLCJmaWxlIjoic29ydC10aGVtLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5hYnNvbHV0ZSB7XG4gICAgcG9zaXRpb246IGZpeGVkO1xufSJdfQ== */\";","export default \"\\n<app-header [(gamenumber)]=\\\"gameno\\\" [(gameHasBegun)]=\\\"gameHasBegun\\\" ></app-header>\\n\\n<app-description [(gameHasBegun)]=\\\"gameHasBegun\\\"  [(gameno)]=\\\"gameno\\\"></app-description>\\n\\n<app-score *ngIf=\\\"gameHasBegun\\\" [(score)]=\\\"score\\\" [(level)]=\\\"this.getLevel()[0]\\\"></app-score>\\n\\n<ion-content *ngIf=\\\"!gameHasBegun && !excerciseMode\\\"></ion-content>\\n\\n<!-- the menu functions and UI needs to be tested for this gamme -->\\n\\n<!-- 20 Buttons -->\\n<!-- <ion-content *ngIf=\\\"gameHasBegun\\\">\\n    <ion-button \\n        mode=\\\"ios\\\"\\n        style=\\\"text-transform: none;\\\"\\n        [color]=\\\"item.color\\\" \\n        shape=\\\"round\\\" \\n        *ngFor=\\\"let item of array; index as i\\\" \\n        (click)=\\\"onClickChip(item.text, i)\\\" \\n        [disabled]=\\\"isDisabled(item.text)\\\" \\n        class=\\\"absolute\\\" \\n        [ngStyle]=\\\"{'top': top[i] + 'px','left': left[i] + 'px','width': getRadius() + 10 + 'px', 'height': getRadius() + 'px', 'font-size': getRadius()/3.5 + 'px'}\\\">\\n        {{ item.text }}\\n    </ion-button>\\n    <ion-label><p class=\\\"ion-text-center\\\">{{ instructionsarray[getLevel()[0] - 1] }}</p></ion-label>\\n\\n</ion-content> -->\\n\\n<!-- This part is the main code that codes for all 20 buttons. It is an ngFor and has many customizable aspects -->\\n<ion-content *ngIf=\\\"gameHasBegun\\\" scrollY=\\\"false\\\">\\n    <ion-grid>\\n        <ion-row>\\n            <ion-col *ngFor=\\\"let item of array; index as i\\\" >\\n                <ion-button\\n                mode=\\\"ios\\\"\\n                style=\\\"text-transform: none;\\\"\\n                [color]=\\\"item.color\\\" \\n                shape=\\\"round\\\" \\n                (click)=\\\"onClickChip(item.text, i)\\\" \\n                [disabled]=\\\"isDisabled(item.text)\\\" \\n                class=\\\"absolute\\\" \\n                [ngStyle]=\\\"{'top': top[i] + 'px','left': left[i] + 'px','width': getRadius() + 10 + 'px', 'height': getRadius() + 'px', 'font-size': (getRadius()/3.5 + 4) + 'px'}\\\">\\n                    {{ item.text }}\\n                </ion-button>\\n            </ion-col>\\n        </ion-row>\\n    </ion-grid>\\n</ion-content>\\n<!-- <ion-footer *ngIf=\\\"gameHasBegun\\\" translucent=\\\"true\\\">\\n    <ion-toolbar>\\n        <ion-title>\\n            Level: {{getLevel()}}; Score: {{score}}\\n        </ion-title>\\n    </ion-toolbar>\\n</ion-footer> -->\\n\\n<!-- <app-score *ngIf=\\\"gameHasBegun\\\" [(level)]=\\\"getLevel()\\\" [(score)]=\\\"score\\\"></app-score> -->\\n\\n<ion-footer>\\n    <app-menu [(gamenumber)]=\\\"gameno\\\" [(gameHasBegun)]=\\\"gameHasBegun\\\" ></app-menu>\\n    <app-start [(gameHasBegun)]=\\\"gameHasBegun\\\" [(gameno)]=\\\"gameno\\\"></app-start>\\n</ion-footer>\\n\\n\";"]}