{"version":3,"sources":["./src/app/login/login-routing.module.ts","./src/app/login/login.module.ts","./src/app/login/login.page.ts","./src/app/login/login.service.ts","./src/app/login/login.page.scss","./src/app/login/login.page.html"],"names":[],"mappings":"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","file":"src_app_login_login_module_ts-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPageRoutingModule } from './login-routing.module';\n\nimport { LoginPage } from './login.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    LoginPageRoutingModule\n  ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { DataService } from '../shared/data.service';\nimport { EventemitterService } from '../shared/eventemitter.service';\nimport { LoginService } from './login.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage implements OnInit {\n  email:string;\n  password:string;\n  loginMode = true;\n  forgotPasswordMode = false;\n  isLoading = true\n  constructor(\n    private loginService: LoginService,\n    private router: Router,\n    private datastorage: DataService,\n    private eventemitter: EventemitterService) { }\n\n    // navigates to the main page if logged in\n  ngOnInit() {\n    let loggedIn = localStorage.getItem('loggedIn')\n    if (loggedIn) {\n      this.router.navigate(['/home/main'])\n    }\n  }\n\n  // what happens when the form with email and password is submitted\n  onSubmit() {\n    if (this.loginMode === true) {\n      this.loginService.login(this.email, this.password).subscribe(resData => {\n        this.datastorage.storeLocalID(resData.localId, resData.idToken, resData.email, resData.refreshToken, new Date().valueOf() + +resData.expiresIn)\n        this.isLoading = true\n        let subscription = new Subscription()\n        subscription = this.eventemitter.loading.subscribe(value => {\n          if (value === true) {\n            this.router.navigate(['/home/main'])\n            subscription.unsubscribe()\n          } else {\n            console.log('an error has occurred')\n          }\n        })\n        this.datastorage.onLogin()\n      }, error => {\n        console.log(error)\n        this.loginService.handleError(error.error.error.message)\n      })\n\n    }\n    if (this.loginMode === false) {\n      this.loginService.signUp(this.email, this.password).subscribe(resData => {\n        this.loginService.presentAlert('Sign Up Successful!', \"Now login to get started.\")\n        this.loginMode = true\n      }, error => {\n        console.log(error)\n        this.loginService.handleError(error.error.error.message)\n      })\n    }\n  }\n\n  // forgot password function\n  forgotPassword() {\n    this.loginService.forgotPassword(this.email)\n    this.forgotPasswordMode = false\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { AlertController } from '@ionic/angular';\n\nexport interface AuthResponseData {\n  kind: string;\n  idToken: string;\n  email: string;\n  refreshToken: string;\n  expiresIn: string;\n  localId: string;\n  registered?: boolean;\n  }\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  API_KEY = 'AIzaSyCf59OjdjdHXpM_bkjz6wElQAQCJLBxsEA'\n\n  constructor(private http: HttpClient, private AlertCtrl: AlertController) { }\n\n  // onLogin(email: string, password: string) {\n    // let currentemail = localStorage.getItem('credential1')\n    // let currentpassword = localStorage.getItem('credential2')\n    // if (email === currentemail && password === currentpassword) {\n    //   console.log(true)\n    //   localStorage.setItem('isLoggedIn', 'true')\n    //   return true\n    // } \n  // }\n\n  // sign up function from database\n  signUp(email, password) {\n    return this.http.post<AuthResponseData>(\n      'https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=' + this.API_KEY,\n      {\n          email: email,\n          password: password,\n          returnSecureToken: true\n      }\n  )\n  }\n\n  // login function from database\n  login(email: string, password: string) {\n    console.log('login')\n    return this.http\n      .post<AuthResponseData>(\n        'https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=' + this.API_KEY,\n        {\n          email: email,\n          password: password,\n          returnSecureToken: true\n        }\n      )\n}\n\n// in case of an error, shows the message\nhandleError(error) {\n  let message: string;\n  let errorm: string;\n  console.log(error)\n  switch(error) {\n    case 'EMAIL_EXISTS':\n      errorm = \"Email Exists\"\n      message = \"The email address is already in use by another account.\"\n      break\n    case 'INVALID_EMAIL':\n      errorm = \"Invalid Email\"\n      message = \"This email does not exist. Please enter a valid email.\"\n      break\n    case 'TOO_MANY_ATTEMPTS_TRY_LATER':\n      errorm = \"Too Many Attempts\"\n      message = \"We have blocked all requests from this device due to unusual activity. Try again later.\"\n      break\n    case 'EMAIL_NOT_FOUND':\n      errorm = \"Email Not Found\"\n      message = \"There is no user record corresponding to this identifier. The user may have been deleted.\"\n      break\n    case 'INVALID_PASSWORD':\n      errorm = \"Invalid Password\"\n      message = \"The password is invalid.\"\n      break\n    case 'USER_DISABLED':\n      errorm = \"User Disabled\"\n      message = \"The user account has been disabled by an administrator.\"\n      break\n  }\n  this.presentAlert(errorm, message)\n}\n\n// presents the error\nasync presentAlert(error, message) {\n  const alert = await this.AlertCtrl.create({\n    header: error,\n    message: message,\n    buttons: ['OK']\n  });\n\n  await alert.present();\n}\n\n// forgot password function from the database\nforgotPassword(email) {\n  this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:sendOobCode?key=' + this.API_KEY, {\n    requestType: \"PASSWORD_RESET\",\n    email: email\n  }).subscribe(value => {\n    console.log(value)\n  })\n}\n\n  // onSignUp(email, password) {\n\n    // localStorage.setItem('credential1', this.encode(email))\n    // localStorage.setItem('credential2', this.encode(password))\n  // }\n\n  // encode(string) {\n  //   let hex\n  //   let result = \"\";\n  //   for (let i = 0; i < string.length; i++) {\n  //       hex = ''+string.charCodeAt(i).toString(16);\n  //       result += (\"000\"+hex).slice(-4);\n  //   }\n  //   return result\n  // }\n\n  // decode(string) {\n  //   let hex  = string.toString();\n  //   let str = '';\n  //   for (var n = 0; n < hex.length; n += 4) {\n  //     str += String.fromCharCode(parseInt(hex.substr(n, 4), 16));\n  //   }\n  //   return str;\n  // }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsb2dpbi5wYWdlLnNjc3MifQ== */\";","export default \"<!-- has the forgot password function and title of the page -->\\n<ion-header>\\n  <ion-toolbar>\\n    <ion-title *ngIf=\\\"!forgotPasswordMode\\\">{{ loginMode ? \\\"Log In\\\" : \\\"Sign Up\\\" }}</ion-title>\\n    <ion-title *ngIf=\\\"forgotPasswordMode\\\">Forgot Password</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<!-- the login page with the email and password and the submit button -->\\n<ion-content>\\n  <form #f=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(); f.reset()\\\">\\n    <ion-grid>\\n      <ion-row>\\n        <ion-col>\\n          <div class=\\\"form-group\\\">\\n            <ion-item>\\n              <ion-label for=\\\"email\\\" position=\\\"floating\\\">\\n                E-mail\\n              </ion-label>   \\n              <ion-input\\n              type=\\\"email\\\"\\n              email\\n              required\\n              [(ngModel)]=\\\"email\\\"\\n              name=\\\"email\\\"\\n              id=\\\"email\\\"\\n              class=\\\"form-control\\\"></ion-input>         \\n            </ion-item>\\n          </div>\\n        </ion-col>\\n      </ion-row>\\n      <ion-row *ngIf=\\\"!forgotPasswordMode\\\">\\n        <ion-col>\\n          <div class=\\\"form-group\\\">\\n            <ion-item>\\n              <ion-label for=\\\"password\\\" position=\\\"floating\\\">\\n                Password\\n              </ion-label>   \\n              <ion-input\\n              type=\\\"password\\\"\\n              required\\n              [(ngModel)]=\\\"password\\\"\\n              name=\\\"password\\\"\\n              id=\\\"password\\\"\\n              class=\\\"form-control\\\"\\n              minlength=\\\"6\\\"></ion-input>         \\n            </ion-item>\\n          </div>\\n        </ion-col>\\n      </ion-row>\\n      <ion-row>\\n        <ion-col>\\n            <ion-button *ngIf=\\\"!forgotPasswordMode\\\" [disabled]=\\\"!f.valid\\\" type=\\\"submit\\\">{{ loginMode ? \\\"Log In\\\" : \\\"Sign Up\\\"}}</ion-button>\\n            <ion-label *ngIf=\\\"!forgotPasswordMode\\\" class=\\\"ion-padding\\\"> {{ loginMode ? \\\"Don't have an account?\\\" : \\\"Already have an account?\\\"}} <a (click)=\\\"loginMode = !loginMode\\\">{{ loginMode ? \\\"Sign Up\\\" : \\\"Log In\\\" }}</a></ion-label>\\n            <ion-button *ngIf=\\\"forgotPasswordMode\\\"  (click)=\\\"forgotPassword()\\\">Submit</ion-button>\\n            <a class=\\\"ion-padding\\\" (click)=\\\"forgotPasswordMode = !forgotPasswordMode\\\" *ngIf=\\\"loginMode\\\">{{ !forgotPasswordMode ? \\\"Forgot Password?\\\" : \\\"Back\\\"}}</a>\\n        </ion-col>\\n      </ion-row>\\n    </ion-grid>\\n  </form>\\n</ion-content>\\n\";"],"sourceRoot":"webpack:///"}