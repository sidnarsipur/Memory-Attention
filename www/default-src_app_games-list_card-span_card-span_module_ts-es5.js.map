{"version":3,"sources":["webpack:///src/app/games-list/card-span/card-span-routing.module.ts","webpack:///src/app/games-list/card-span/card-span.module.ts","webpack:///src/app/games-list/card-span/card-span.page.ts","webpack:///src/app/games-list/card-span/card-span.service.ts","webpack:///src/app/games-list/card-span/card.model.ts","webpack:///src/app/games-list/card-span/card-span.page.scss","webpack:///src/app/games-list/card-span/card-span.page.html"],"names":["routes","path","component","CardSpanPage","CardSpanPageRoutingModule","NgModule","imports","RouterModule","exports","CardSpanPageModule","CommonModule","FormsModule","IonicModule","HttpClientModule","SharedModule","declarations","providers","CardSpanService","router","cardService","animationCtrl","eventemitter","alertCtrl","gameService","excerciseMode","gameHasBegun","cardsRemembered","correct","wrong","formIsHidden","formSuites","suiteIsSelected","answerCards","cardCount","lost","chipsAreDisabled","submitIsTrue","cardCountIsHidden","gameno","startButtonIsDisabled","isFaded","subscription","Subscription","cardSubscription","database","levelscore","getLevelScore","databaseemitter","subscribe","value","level","score","animate","setTimeout","brighten","fade","form","startTimer","CurrentCardRoute","console","log","cardRoute","gameStateSubj","onStart","onEndGame","onRestart","onResume","onQuit","onPause","levels","navigate","create","header","getLevelandScore","message","scoringconstant","buttons","text","role","handler","generateCards","then","alert","present","pauseTimer","suite","selectedCard","cardsArray","getCards","name","imgURL","ChipsSubmit","push","Card","timer","clearTimer","formCorrect","submitAnswer","storeLevelScore","wrongs","prevscore","prevlevel","scoreneeded","onRoundFinished","alertmessage","endGame","onResetSuite","index","splice","i","unsubscribe","Router","AnimationController","EventemitterService","AlertController","GameService","ViewChild","read","ElementRef","Input","Component","selector","template","animations","trigger","state","style","opacity","transition","cardsArrayAnswers","cardsArrayDisplayed","paused","cards","randomSuite","Math","floor","random","randomNumber","cardSuite","cardNumber","JSON","stringify","cardFinalRoute","clearCards","getRandomCard","runSeries","onForm","onCurrentCardRoute","onAnimate","card","length","currentscore","getScore","alertstring","item","beginNewRound","currentCard","Injectable","providedIn"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,UAAMA,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE,6CAAAC;AAFb,OADqB,CAAvB;;UAWaC,0BAAyB;AAAA;AAAA,O;;AAAzBA,gCAAyB,uDAJrC,+CAAAC,QAAA,EAAS;AACRC,eAAO,EAAE,CAAC,6CAAAC,YAAA,UAAsBP,MAAtB,CAAD,CADD;AAERQ,eAAO,EAAE,CAAC,6CAAAD,YAAD;AAFD,OAAT,CAIqC,GAAzBH,0BAAyB,CAAzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCWAK,mBAAkB;AAAA;AAAA,O;;AAAlBA,yBAAkB,uDAd9B,+CAAAJ,QAAA,EAAS;AACRC,eAAO,EAAE,CACP,6CAAAI,YADO,EAEP,4CAAAC,WAFO,EAGP,4CAAAC,WAHO,EAIP,kDAAAC,gBAJO,EAKP,uDAAAT,yBALO,EAMP,mDAAAU,YANO,CADD;AAURC,oBAAY,EAAE,CAAC,6CAAAZ,YAAD,CAVN;AAWRa,iBAAS,EAAE,CAAC,gDAAAC,eAAD,CAXH;AAYRT,eAAO,EAAE,CAAC,6CAAAL,YAAD;AAZD,OAAT,CAc8B,GAAlBM,mBAAkB,CAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCJAN,aAAY;AA8BvB,8BACUe,MADV,EAEUC,WAFV,EAGUC,aAHV,EAIUC,YAJV,EAKUC,SALV,EAMUC,WANV,CAOE;AAPF,U;;;AACU,eAAAL,MAAA,GAAAA,MAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AACA,eAAAC,aAAA,GAAAA,aAAA;AACA,eAAAC,YAAA,GAAAA,YAAA;AACA,eAAAC,SAAA,GAAAA,SAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AAlCW,eAAAC,aAAA,GAAgB,KAAhB;AAIvB,eAAAC,YAAA,GAAe,KAAf;AACA,eAAAC,eAAA,GAA0B,CAA1B;AAEA,eAAAC,OAAA,GAAmB,KAAnB;AACA,eAAAC,KAAA,GAAiB,KAAjB;AACA,eAAAC,YAAA,GAAwB,IAAxB;AACA,eAAAC,UAAA,GAAuB,CAAC,MAAD,EAAS,OAAT,EAAkB,SAAlB,EAA6B,OAA7B,CAAvB;AAGA,eAAAC,eAAA,GAAkB,KAAlB;AAEA,eAAAC,WAAA,GAAsB,EAAtB;AACA,eAAAC,SAAA,GAAoB,CAApB;AACA,eAAAC,IAAA,GAAgB,KAAhB;AACA,eAAAC,gBAAA,GAAmB,KAAnB;AACA,eAAAC,YAAA,GAAe,KAAf;AACA,eAAAC,iBAAA,GAAoB,KAApB;AACA,eAAAC,MAAA,GAAS,CAAT;AACA,eAAAC,qBAAA,GAAwB,KAAxB;AACA,eAAAC,OAAA,GAAkB,OAAlB;AACA,eAAAC,YAAA,GAAe,IAAI,kCAAAC,YAAJ,EAAf;AACA,eAAAC,gBAAA,GAAmB,IAAI,kCAAAD,YAAJ,EAAnB;AACA,eAAAE,QAAA,GAAW,IAAI,kCAAAF,YAAJ,EAAX;AAUO;;AAtCkB;AAAA;AAAA,iBAwCvB,oBAAW;AAAA;;AAET;AACA,gBAAIG,UAAU,GAAG,KAAKtB,WAAL,CAAiBuB,aAAjB,CAA+B,KAAKR,MAApC,EAA2C,KAAKd,aAAhD,CAAjB;AACA,iBAAKD,WAAL,CAAiBuB,aAAjB,CAA+B,KAAKR,MAApC,EAA4C,KAAKd,aAAjD;AACA,iBAAKoB,QAAL,GAAgB,KAAKvB,YAAL,CAAkB0B,eAAlB,CAAkCC,SAAlC,CAA4C,UAAAC,KAAK,EAAI;AACnE,kBAAIA,KAAK,CAACC,KAAV,EAAiB;AACf,qBAAI,CAAC/B,WAAL,CAAiB+B,KAAjB,GAAyBD,KAAK,CAACC,KAA/B;AACD;;AACD,kBAAID,KAAK,CAACE,KAAV,EAAiB;AACf,qBAAI,CAAChC,WAAL,CAAiBgC,KAAjB,GAAyBF,KAAK,CAACE,KAA/B;AACD;AACF,aAPe,CAAhB,CALS,CAcT;;AACA,iBAAK9B,YAAL,CAAkB+B,OAAlB,CAA0BJ,SAA1B,CAAoC,UAAAC,KAAK,EAAI;AAC3C,kBAAIA,KAAK,KAAK,UAAd,EAA0B;AACxB;AACA;AACE;AACA;AACAI,0BAAU,CAAC,YAAM;AACf,uBAAI,CAACC,QAAL;AACD,iBAFS,EAEP,GAFO,CAAV,CALsB,CASxB;AACD;;AACD,kBAAIL,KAAK,KAAK,MAAd,EAAsB;AACpBI,0BAAU,CAAC,YAAM;AACf,uBAAI,CAACE,IAAL;AACD,iBAFS,EAEP,IAFO,CAAV;AAGD;AACF,aAjBD,EAfS,CAkCT;;AACA,iBAAKlC,YAAL,CAAkBmC,IAAlB,CAAuBR,SAAvB,CAAiC,UAAAC,KAAK,EAAI;AACxC,kBAAIA,KAAK,KAAK,WAAd,EAA2B;AACzB,qBAAI,CAACpB,YAAL,GAAoB,IAApB;AACD;;AACD,kBAAIoB,KAAK,KAAK,UAAd,EAA0B;AACxB,qBAAI,CAACpB,YAAL,GAAoB,KAApB;;AACA,qBAAI,CAACN,WAAL,CAAiBkC,UAAjB;;AACA,qBAAI,CAAC7B,KAAL,GAAa,KAAb;AACA,qBAAI,CAACD,OAAL,GAAe,KAAf;AACD;AACF,aAVD,EAnCS,CA+CT;;AACA,iBAAKgB,gBAAL,GAAwB,KAAKtB,YAAL,CAAkBqC,gBAAlB,CAAmCV,SAAnC,CAA6C,UAAAC,KAAK,EAAI;AAC5EU,qBAAO,CAACC,GAAR,CAAYX,KAAZ;AACA,mBAAI,CAACY,SAAL,GAAiBZ,KAAjB;AACAI,wBAAU,CAAC,YAAM;AACf,qBAAI,CAACE,IAAL;AACD,eAFS,EAEP,GAFO,CAAV;AAGAF,wBAAU,CAAC,YAAM;AACf,qBAAI,CAACC,QAAL;AACD,eAFS,EAEP,IAFO,CAAV;AAGD,aATuB,CAAxB,CAhDS,CA2DT;;AACA,iBAAKb,YAAL,GAAoB,KAAKpB,YAAL,CAAkByC,aAAlB,CAAgCd,SAAhC,CAA0C,UAAAC,KAAK,EAAI;AACrEU,qBAAO,CAACC,GAAR,CAAYX,KAAZ;;AACA,sBAAQA,KAAR;AACE,qBAAK,OAAL;AACE,uBAAI,CAACc,OAAL;;AACA;;AACF,qBAAK,SAAL;AACE,uBAAI,CAACxB,qBAAL,GAA6B,IAA7B;;AACA,uBAAI,CAACyB,SAAL;;AACAX,4BAAU,CAAC,YAAM;AACf,yBAAI,CAACY,SAAL;AACD,mBAFS,EAEP,GAFO,CAAV;AAGA;;AACF,qBAAK,QAAL;AACE,uBAAI,CAACC,QAAL;;AACA;;AACF,qBAAK,MAAL;AACE,uBAAI,CAACC,MAAL;;AACA;;AACF,qBAAK,OAAL;AACE,uBAAI,CAACC,OAAL;;AACA;;AACF,qBAAK,MAAL;AACE,uBAAI,CAACJ,SAAL;;AACA;AAtBJ;AAwBD,aA1BmB,CAApB,CA5DS,CAwFT;;AACA,gBAAI,KAAKxC,aAAT,EAAwB;AACtB,mBAAKL,WAAL,CAAiB+B,KAAjB,GAAyB,KAAKmB,MAAL,CAAY,CAAZ,CAAzB;AACA,mBAAKlD,WAAL,CAAiBgC,KAAjB,GAAyB,CAAzB;AACD;AACF,WArIsB,CAuIvB;;AAvIuB;AAAA;AAAA,iBAwIvB,kBAAS;AACP,iBAAK1B,YAAL,GAAoB,KAApB;AACA,iBAAKP,MAAL,CAAYoD,QAAZ,CAAqB,CAAC,OAAD,CAArB;AACD,WA3IsB,CA6IvB;;AA7IuB;AAAA;AAAA,iBA8IvB,mBAAU;AAAA;;AACRX,mBAAO,CAACC,GAAR,CAAY,eAAZ;AACA,iBAAKtC,SAAL,CAAeiD,MAAf,CAAsB;AACpBC,oBAAM,EAAE,YAAY,KAAKC,gBAAL,GAAwB,CAAxB,CADA;AAEpBC,qBAAO,EAAE,eAAe,KAAKnD,WAAL,CAAiBoD,eAAjB,GAAmC,KAAKF,gBAAL,GAAwB,CAAxB,CAAlD,IAAgF,iCAFrE;AAGpBG,qBAAO,EAAE,CAAC;AACRC,oBAAI,EAAE,UADE;AAERC,oBAAI,EAAE,UAFE;AAGRC,uBAAO,EAAE,mBAAM;AACb,wBAAI,CAACtD,YAAL,GAAoB,IAApB;;AACA,wBAAI,CAACN,WAAL,CAAiB6D,aAAjB;;AACA,wBAAI,CAAC9C,IAAL,GAAY,KAAZ;AACA,wBAAI,CAACR,eAAL,GAAuB,CAAvB;AACA,wBAAI,CAACW,iBAAL,GAAyB,KAAzB;AACH;AATS,eAAD;AAHW,aAAtB,EAYQ4C,IAZR,CAYa,UAAAC,KAAK;AAAA,qBAAGA,KAAK,CAACC,OAAN,EAAH;AAAA,aAZlB;AAaD,WA7JsB,CA+JvB;;AA/JuB;AAAA;AAAA,iBAgKvB,gBAAO;AACL;AACA,iBAAK3C,OAAL,GAAe,QAAf,CAFK,CAGL;AACA;AACA;AACA;AACA;AACA;AAEA;AACD,WA3KsB,CA6KvB;;AA7KuB;AAAA;AAAA,iBA8KvB,oBAAW;AACT,iBAAKA,OAAL,GAAe,OAAf,CADS,CAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,WAxLsB,CA0LvB;;AA1LuB;AAAA;AAAA,iBA2LvB,mBAAU;AACR,iBAAKrB,WAAL,CAAiBiD,OAAjB;AACA,iBAAK7C,WAAL,CAAiB6D,UAAjB;AACD,WA9LsB,CAgMvB;;AAhMuB;AAAA;AAAA,iBAiMvB,oBAAW;AACT,iBAAKjE,WAAL,CAAiB+C,QAAjB,CAA0B,KAAKrC,YAA/B;AACA,iBAAKN,WAAL,CAAiBkC,UAAjB;AACD,WApMsB,CAsMvB;;AAtMuB;AAAA;AAAA,iBAuMvB,sBAAa4B,KAAb,EAAoB;AAClB,iBAAKC,YAAL,GAAoBD,KAApB;AACA,iBAAKtD,eAAL,GAAuB,IAAvB;AACA,iBAAKwD,UAAL,GAAkB,KAAKpE,WAAL,CAAiBqE,QAAjB,CAA0BH,KAA1B,CAAlB;AACD,WA3MsB,CA6MvB;;AA7MuB;AAAA;AAAA,iBA8MvB,wBAAe;AACb,iBAAKC,YAAL,GAAoB,EAApB;AACA,iBAAKvD,eAAL,GAAuB,KAAvB;AACD,WAjNsB,CAmNvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AA5NuB;AAAA;AAAA,iBA6NvB,qBAAY;AAAA;;AACVsB,sBAAU,CAAC,YAAM;AACf,oBAAI,CAACU,OAAL;;AACA,oBAAI,CAACxB,qBAAL,GAA6B,KAA7B;AACD,aAHS,EAGP,GAHO,CAAV;AAKD,WAnOsB,CAqOvB;;AArOuB;AAAA;AAAA,iBAsOvB,uBAAc8C,KAAd,EAA6BI,IAA7B,EAA2CC,MAA3C,EAA2D;AACzD,gBAAI,KAAKvE,WAAL,CAAiBwE,WAAjB,CAA6B,KAAK1D,SAAlC,MAAiD,WAArD,EAAkE;AAChE,mBAAKD,WAAL,CAAiB4D,IAAjB,CAAsB,IAAI,yCAAAC,IAAJ,CAASH,MAAT,EAAiBD,IAAjB,EAAuBJ,KAAvB,CAAtB;AACA,mBAAKpD,SAAL;AACA,mBAAKI,iBAAL,GAAyB,IAAzB;AACD;;AACD,gBAAI,CAAC,KAAKlB,WAAL,CAAiBwE,WAAjB,CAA6B,KAAK1D,SAAlC,CAAL,EAAmD;AACjD,mBAAKD,WAAL,CAAiB4D,IAAjB,CAAsB,IAAI,yCAAAC,IAAJ,CAASH,MAAT,EAAiBD,IAAjB,EAAuBJ,KAAvB,CAAtB;AACA,mBAAKpD,SAAL;AACD;AACF,WAhPsB,CAkPvB;AACA;;AAnPuB;AAAA;AAAA,iBAoPvB,oBAAW;AAAA;;AACT,iBAAK4B,SAAL,GAAiB,EAAjB;AACA,gBAAIiC,KAAK,GAAG,KAAKvE,WAAL,CAAiBwE,UAAjB,EAAZ;AACApC,mBAAO,CAACC,GAAR,CAAYkC,KAAZ;AACA,gBAAIE,WAAW,GAAG,KAAK7E,WAAL,CAAiB8E,YAAjB,CAA8B,KAAKjE,WAAnC,EAAgD,KAAKC,SAArD,CAAlB;;AACA,gBAAI,KAAKT,aAAL,KAAuB,IAA3B,EAAiC;AAC/B,mBAAKD,WAAL,CAAiB2E,eAAjB,CAAiC,KAAK5D,MAAtC,EAA8C,KAAKnB,WAAL,CAAiBgC,KAA/D,EAAsE,KAAKhC,WAAL,CAAiB+B,KAAvF,EAA8F,KAAK1B,aAAnG,EAAkHsE,KAAK,GAAC,IAAxH,EAA8HE,WAAW,CAACG,MAA1I,EAAkJH,WAAW,CAACI,SAA9J,EAAyKJ,WAAW,CAACK,SAArL;AACD,aAFD,MAGK;AACH,mBAAKlF,WAAL,CAAiB+B,KAAjB;AACD;;AACC,iBAAKlB,WAAL,GAAmB,EAAnB;AACA,iBAAKC,SAAL,GAAiB,CAAjB;AACA,iBAAKP,eAAL;AACA,iBAAKW,iBAAL,GAAyB,KAAzB;AACA,gBAAIiE,WAAJ;;AACA,gBAAI,KAAK9E,aAAL,KAAuB,IAA3B,EAAiC;AAC/B8E,yBAAW,GAAG,IAAd;;AACA,kBAAI,KAAKnF,WAAL,CAAiB+B,KAAjB,GAAyB,KAAKmB,MAAL,CAAY,CAAZ,CAA7B,EAA6C;AAC3C,qBAAKhD,YAAL,CAAkBkF,eAAlB,CAAkC;AAAC,8BAAU,IAAX;AAAiBpD,uBAAK,EAAE,KAAKhC,WAAL,CAAiBgC;AAAzC,iBAAlC;AACD;AACF,aALD,MAKO;AACLmD,yBAAW,GAAG,KAAK/E,WAAL,CAAiBoD,eAAjB,GAAmC,KAAKxD,WAAL,CAAiBsD,gBAAjB,GAAoC,CAApC,CAAjD;AACD;;AACD,iBAAKnD,SAAL,CAAeiD,MAAf,CAAsB;AACpBC,oBAAM,EAAE,YAAY,KAAKC,gBAAL,GAAwB,CAAxB,CADA;AAEpBC,qBAAO,EAAE,KAAKvD,WAAL,CAAiBqF,YAAjB,GAAgC,IAAhC,GAAuC,WAAvC,GAAqDF,WAArD,GAAmE,iCAFxD;AAGpB1B,qBAAO,EAAE,CAAC;AACRC,oBAAI,EAAE,UADE;AAERC,oBAAI,EAAE,UAFE;AAGRC,uBAAO,EAAE,mBAAM;AACb,wBAAI,CAAC5D,WAAL,CAAiB6D,aAAjB;AACH;AALS,eAAD;AAHW,aAAtB,EAQQC,IARR,CAQa,UAAAC,KAAK;AAAA,qBAAGA,KAAK,CAACC,OAAN,EAAH;AAAA,aARlB,EAxBO,CAiCP;AACH,WAtRsB,CAwRvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAtSuB;AAAA;AAAA,iBAuSvB,qBAAY;AAAA;;AACV,iBAAKhE,WAAL,CAAiBsF,OAAjB;AACApD,sBAAU,CAAC,YAAM;AACf,oBAAI,CAACrB,WAAL,GAAmB,EAAnB;AACA,oBAAI,CAACC,SAAL,GAAiB,CAAjB;AACA,oBAAI,CAACJ,YAAL,GAAoB,IAApB;AACA,oBAAI,CAACJ,YAAL,GAAoB,KAApB;AACA,oBAAI,CAACE,OAAL,GAAe,KAAf;AACA,oBAAI,CAACC,KAAL,GAAa,KAAb;AACA,oBAAI,CAACG,eAAL,GAAuB,KAAvB;AACA,oBAAI,CAAC8B,SAAL,GAAiB,IAAjB;;AACA,oBAAI,CAAC6C,YAAL;AACD,aAVS,EAUP,GAVO,CAAV;AAYD,WArTsB,CAuTvB;;AAvTuB;AAAA;AAAA,iBAwTvB,kBAASrB,KAAT,EAAwB;AACtB,gBAAIA,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,OAAlC,EAA2C;AACzC,qBAAO,MAAP;AACD;;AACD,gBAAIA,KAAK,KAAK,SAAV,IAAuBA,KAAK,KAAK,OAArC,EAA8C;AAC5C,qBAAO,QAAP;AACD;AACF,WA/TsB,CAiUvB;;AAjUuB;AAAA;AAAA,iBAkUvB,sBAAasB,KAAb,EAAoB;AAClB,iBAAK3E,WAAL,CAAiB4E,MAAjB,CAAwBD,KAAxB,EAA+B,CAA/B;AACA,iBAAK1E,SAAL;;AACA,gBAAI,KAAKd,WAAL,CAAiBwE,WAAjB,CAA6B,KAAK1D,SAAlC,MAAiD,WAArD,EAAkE;AAChE,mBAAKG,YAAL,GAAoB,KAApB;AACA,mBAAKC,iBAAL,GAAyB,KAAzB;AACD;AACF,WAzUsB,CA2UvB;;AA3UuB;AAAA;AAAA,iBA4UvB,wBAAe;AACb,gBAAI,CAAC,KAAKlB,WAAL,CAAiBwE,WAAjB,CAA6B,KAAK1D,SAAlC,CAAD,IAAiD,KAAKd,WAAL,CAAiBwE,WAAjB,CAA6B,KAAK1D,SAAlC,MAAiD,WAAtG,EAAmH;AACjH,qBAAO,IAAP;AACD,aAFD,MAEO;AACL,qBAAO,KAAP;AACD;AACF;AAlVsB;AAAA;AAAA,iBAoVvB,gBAAO;AACL,mBAAO,KAAKd,WAAL,CAAiB0F,CAAxB;AACD,WAtVsB,CAuVvB;;AAvVuB;AAAA;AAAA,iBAwVvB,uBAAc;AACZ,iBAAKpE,YAAL,CAAkBqE,WAAlB;AACA,iBAAKnE,gBAAL,CAAsBmE,WAAtB,GAFY,CAGZ;AACA;AACA;AACA;AACA;AACD,WAhWsB,CAkWrB;;AAlWqB;AAAA;AAAA,iBAmWvB,2BAAkB;AAChB,iBAAKrE,YAAL,CAAkBqE,WAAlB;AACAnD,mBAAO,CAACC,GAAR,CAAY,cAAZ;AACA,iBAAKjB,gBAAL,CAAsBmE,WAAtB;AACD,WAvWsB,CAyWvB;;AAzWuB;AAAA;AAAA,iBA0WvB,4BAAmB;AACjB,mBAAO,KAAK3F,WAAL,CAAiBsD,gBAAjB,EAAP;AACD;AA5WsB;;AAAA;AAAA,S;;;;gBAtBhB,6CAAAsC;;gBACA,gDAAA9F;;gBACiB,4CAAA+F;;gBAEjB,0DAAAC;;gBAFA,4CAAAC;;gBAKA,kDAAAC;;;;;;gBAgBR,2CAAAC,S;AAAS,iBAAC,eAAD,EAAkB;AAAEC,gBAAI,EAAE,2CAAAC,UAAR;AAAoB,sBAAQ;AAA5B,WAAlB;;;gBACT,2CAAAC,K;AAAK,iBAAC,cAAD;;;gBACL,2CAAAA,K;AAAK,iBAAC,QAAD;;;AAHOpH,mBAAY,wDAbxB,+CAAAqH,SAAA,EAAU;AACTC,gBAAQ,EAAE,eADD;AAETC,gBAAQ,EAAR,uEAFS;AAITC,kBAAU,EAAE,CACV,sDAAAC,OAAA,EAAQ,UAAR,EAAoB,CAClB,sDAAAC,KAAA,EAAM,QAAN,EAAgB,sDAAAC,KAAA,EAAM;AAACC,iBAAO,EAAE;AAAV,SAAN,CAAhB,CADkB,EAElB,sDAAAC,UAAA,EAAW,YAAX,EAAyB,CAAC,sDAAA5E,OAAA,EAAQ,GAAR,CAAD,CAAzB,CAFkB,EAGlB,sDAAA4E,UAAA,EAAW,aAAX,EAA0B,CAAC,sDAAA5E,OAAA,EAAQ,GAAR,CAAD,CAA1B,CAHkB,EAIlB,sDAAAyE,KAAA,EAAM,OAAN,EAAe,sDAAAC,KAAA,EAAM;AAACC,iBAAO,EAAE;AAAV,SAAN,CAAf,CAJkB,CAApB,CADU,CAJH;;AAAA,OAAV,CAawB,GAAZ5H,aAAY,CAAZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCfAc,gBAAe;AAe1B,iCACUI,YADV,EAEUE,WAFV,EAEoC;AAAA;;AAD1B,eAAAF,YAAA,GAAAA,YAAA;AACA,eAAAE,WAAA,GAAAA,WAAA;AAhBV,eAAAsC,SAAA,GAAoB,oBAApB;AAEA,eAAAoE,iBAAA,GAA4B,EAA5B;AACA,eAAAC,mBAAA,GAAgC,EAAhC;AACA,eAAAhF,KAAA,GAAgB,CAAhB;AACA,eAAAC,KAAA,GAAgB,CAAhB;AACA,eAAAgF,MAAA,GAAkB,KAAlB;AACA,eAAAC,KAAA,GAAkB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,IAArB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,GAArC,EAA0C,GAA1C,EAA+C,GAA/C,EAAoD,GAApD,EAAyD,GAAzD,EAA8D,GAA9D,CAAlB;AASuC,SAjBb,CAmB1B;;;AAnB0B;AAAA;AAAA,iBAoB1B,yBAAgB;AACd,gBAAIC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAlB;AACA,gBAAIC,YAAY,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAnB;AACA,gBAAIE,SAAJ;AACA,gBAAIC,UAAJ;;AACA,oBAAQN,WAAR;AACE,mBAAK,CAAL;AACEK,yBAAS,GAAG,MAAZ;AACA;;AACF,mBAAK,CAAL;AACEA,yBAAS,GAAG,SAAZ;AACA;;AACF,mBAAK,CAAL;AACEA,yBAAS,GAAG,OAAZ;AACA;;AACF,mBAAK,CAAL;AACEA,yBAAS,GAAG,OAAZ;AACA;AAZJ;;AAcA,oBAAQD,YAAR;AACE,mBAAK,CAAL;AACEE,0BAAU,GAAG,GAAb;AACA;;AACF;AACEA,0BAAU,GAAGC,IAAI,CAACC,SAAL,CAAeJ,YAAY,GAAG,CAA9B,CAAb;AACA;;AACF,mBAAK,EAAL;AACEE,0BAAU,GAAG,GAAb;AACA;;AACF,mBAAK,EAAL;AACEA,0BAAU,GAAG,GAAb;AACA;;AACF,mBAAK,EAAL;AACEA,0BAAU,GAAG,GAAb;AACA;AAfJ;;AAiBA,gBAAIG,cAAc,GAAG,KAAKjF,SAAL,GAAiB,GAAjB,GAAuB6E,SAAvB,GAAmC,GAAnC,GAAyCC,UAAzC,GAAsD,MAA3E;AACA,iBAAKV,iBAAL,CAAuBrC,IAAvB,CAA4B,IAAI,yCAAAC,IAAJ,CAAS,MAAM6C,SAAN,GAAkB,MAA3B,EAAmCC,UAAnC,EAA+CD,SAA/C,CAA5B;AACA,iBAAKR,mBAAL,CAAyBtC,IAAzB,CAA8BkD,cAA9B;AACD,WA3DyB,CA6D1B;;AA7D0B;AAAA;AAAA,iBA8D1B,yBAAgB;AACd,iBAAKC,UAAL;;AACA,iBAAK,IAAIlC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK3D,KAAL,GAAa,CAAjC,EAAoC2D,CAAC,EAArC,EAAyC;AACvC,mBAAKmC,aAAL;;AACA,kBAAI,KAAKd,mBAAL,CAAyBrB,CAAzB,MAAgC,KAAKqB,mBAAL,CAAyBrB,CAAC,GAAG,CAA7B,CAApC,EAAqE;AACnE,qBAAKoB,iBAAL,CAAuBrB,MAAvB,CAA8BC,CAA9B;AACA,qBAAKqB,mBAAL,CAAyBtB,MAAzB,CAAgCC,CAAhC;AACAA,iBAAC;AACF;AACF;;AACD,iBAAKA,CAAL,GAAS,CAAT;AACA,iBAAKoC,SAAL;AACD,WA1EyB,CA4E1B;;AA5E0B;AAAA;AAAA,iBA6E1B,qBAAY;AAAA;;AACV,iBAAK5H,YAAL,CAAkB6H,MAAlB,CAAyB,WAAzB;;AACA,gBAAI,KAAKf,MAAL,KAAgB,IAApB,EAA0B;AACxB,kBAAI,KAAKtB,CAAL,IAAU,KAAK3D,KAAL,GAAa,CAA3B,EAA8B;AAC5B,qBAAK7B,YAAL,CAAkB8H,kBAAlB,CAAqC,KAAKjB,mBAAL,CAAyB,KAAKrB,CAA9B,CAArC,EAD4B,CAE1B;AACA;;AACAxD,0BAAU,CAAC,YAAM;AACf,sBAAI,MAAI,CAACwD,CAAL,IAAU,MAAI,CAAC3D,KAAnB,EAA0B;AACxB,0BAAI,CAAC2D,CAAL;;AACA,0BAAI,CAACoC,SAAL;AACD,mBAHD,MAGO;AACL5F,8BAAU,CAAC,YAAM;AACf,4BAAI,CAAChC,YAAL,CAAkB+H,SAAlB,CAA4B,MAA5B;;AACA,4BAAI,CAAC/H,YAAL,CAAkB6H,MAAlB,CAAyB,UAAzB;AACD,qBAHS,EAGP,GAHO,CAAV;AAID;AACF,iBAVS,EAUP,IAVO,CAAV;AAWH,eAhBuB,CAiBxB;AAEA;;AACD;AACF,WApGyB,CAsG1B;;AAtG0B;AAAA;AAAA,iBAuG1B,kBAAS7D,KAAT,EAAgB;AACd,gBAAIE,UAAU,GAAW,EAAzB;;AADc,uDAEG,KAAK6C,KAFR;AAAA;;AAAA;AAEd,kEAA6B;AAAA,oBAApBiB,IAAoB;AAC3B9D,0BAAU,CAACK,IAAX,CAAgB,IAAI,yCAAAC,IAAJ,CAAU,MAAMR,KAAN,GAAc,MAAxB,EAAgCgE,IAAhC,EAAsChE,KAAtC,CAAhB;AACD;AAJa;AAAA;AAAA;AAAA;AAAA;;AAKd,mBAAOE,UAAP;AACD,WA7GyB,CA+G1B;;AA/G0B;AAAA;AAAA,iBAgH1B,sBAAaA,UAAb,EAAiCtD,SAAjC,EAA4C;AAC1C,gBAAI,KAAKiB,KAAL,GAAa,CAAb,KAAmBjB,SAAvB,EAAkC;AAChC,kBAAIkE,MAAM,GAAG,CAAb;AACA,kBAAIC,SAAS,GAAG,KAAKjD,KAArB;AACA,kBAAIkD,SAAS,GAAG,KAAKnD,KAArB;;AACA,mBAAK,IAAI2D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKoB,iBAAL,CAAuBqB,MAA3C,EAAmDzC,CAAC,EAApD,EAAwD;AACtD,oBAAI,KAAKoB,iBAAL,CAAuBpB,CAAvB,EAA0BpB,IAA1B,KAAmCF,UAAU,CAACsB,CAAD,CAAV,CAAcpB,IAAjD,IAAyD,KAAKwC,iBAAL,CAAuBpB,CAAvB,EAA0BxB,KAA1B,KAAoCE,UAAU,CAACsB,CAAD,CAAV,CAAcxB,KAA/G,EAAsH;AACpH1B,yBAAO,CAACC,GAAR,CAAY,KAAKqE,iBAAL,CAAuBpB,CAAvB,CAAZ,EAAuCtB,UAAU,CAACsB,CAAD,CAAjD;AACAV,wBAAM;AACP;AACF;;AACD,kBAAIoD,YAAY,GAAG,KAAKhI,WAAL,CAAiBiI,QAAjB,CAA0B,KAAKvB,iBAAL,CAAuBqB,MAAjD,EAAyDnD,MAAzD,CAAnB;AACA,mBAAKhD,KAAL,GAAa,KAAKA,KAAL,GAAaoG,YAA1B;;AACA,kBAAI,KAAKpG,KAAL,IAAc,KAAK5B,WAAL,CAAiBoD,eAAnC,EAAoD;AAClD,qBAAKzB,KAAL;AACA,qBAAKC,KAAL,GAAa,CAAb;AACD;;AACD,kBAAIgD,MAAM,KAAK,CAAf,EAAkB;AAChB,qBAAKK,YAAL,GAAoB,UAApB;AACD,eAFD,MAGK;AACH,oBAAIiD,WAAW,GAAG,EAAlB;;AADG,4DAEc,KAAKxB,iBAFnB;AAAA;;AAAA;AAEH,yEAAyC;AAAA,wBAAhCyB,IAAgC;AACvC,wBAAIrE,KAAK,GAAG,EAAZ;;AACA,4BAAQqE,IAAI,CAACrE,KAAb;AACE,2BAAK,MAAL;AACEA,6BAAK,GAAG,IAAR;AACA;;AACF,2BAAK,SAAL;AACEA,6BAAK,GAAG,IAAR;AACA;;AACF,2BAAK,OAAL;AACEA,6BAAK,GAAG,IAAR;AACA;;AACF,2BAAK,OAAL;AACEA,6BAAK,GAAG,IAAR;AACA;AAZJ;;AAcAoE,+BAAW,GAAGA,WAAW,GAAG,GAAd,GAAoBpE,KAApB,GAA4BqE,IAAI,CAACjE,IAAjC,GAAwC,GAAtD;AACD;AAnBE;AAAA;AAAA;AAAA;AAAA;;AAoBH,qBAAKe,YAAL,GAAoB,8BAA8BiD,WAA9B,GAA4C,GAAhE;AACD;;AACD,qBAAO;AAACE,6BAAa,EAAE,IAAhB;AAAsBxD,sBAAM,EAAEA,MAA9B;AAAsCC,yBAAS,EAAEmD,YAAjD;AAA+DlD,yBAAS,EAAEA;AAA1E,eAAP;AACH;AACF,WA5J2B,CA8J5B;;AA9J4B;AAAA;AAAA,iBA+J5B,qBAAYpE,SAAZ,EAAuB;AACrB,gBAAIA,SAAS,KAAK,KAAKiB,KAAL,GAAY,CAA9B,EAAiC;AAC/B,qBAAO,IAAP;AACD;;AACD,gBAAIjB,SAAS,KAAK,KAAKiB,KAAL,GAAa,CAA/B,EAAiC;AAC/B,qBAAO,WAAP;AACD;AACF,WAtK2B,CAwK5B;;AAxK4B;AAAA;AAAA,iBAyK5B,sBAAa;AACX,iBAAK+E,iBAAL,GAAyB,EAAzB;AACA,iBAAKC,mBAAL,GAA2B,EAA3B;AACD;AA5K2B;AAAA;AAAA,iBA+K5B,mBAAU;AACR,iBAAKhF,KAAL,GAAa,CAAb;AACA,iBAAK6F,UAAL;AACA,iBAAKa,WAAL,GAAmB,EAAnB;AACD,WAnL2B,CAqL5B;;AArL4B;AAAA;AAAA,iBAsL5B,mBAAU;AACR,iBAAKzB,MAAL,GAAc,IAAd;AACD,WAxL2B,CA0L5B;;AA1L4B;AAAA;AAAA,iBA2L5B,kBAAStG,YAAT,EAAgC;AAC9B,iBAAKsG,MAAL,GAAc,KAAd;;AACA,gBAAItG,YAAY,KAAK,IAArB,EAA2B;AACzB,mBAAKoH,SAAL;AACD;AAEF,WAjM2B,CAmM5B;;AAnM4B;AAAA;AAAA,iBAoM5B,4BAAmB;AACjB,mBAAO,CAAC,KAAK/F,KAAN,EAAa,KAAKC,KAAlB,CAAP;AACD;AAtM2B;;AAAA;AAAA,S;;;;gBANnB,0DAAA8D;;gBACA,kDAAAE;;;;AAKIlG,sBAAe,uDAH3B,+CAAA4I,UAAA,EAAW;AACVC,kBAAU,EAAE;AADF,OAAX,CAG2B,GAAf7I,gBAAe,CAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCRA4E,K,GAIT,eAAYH,MAAZ,EAA4BD,IAA5B,EAA0CJ,KAA1C,EAAyD;AAAA;;AACrD,aAAKK,MAAL,GAAcA,MAAd;AACA,aAAKD,IAAL,GAAYA,IAAZ;AACA,aAAKJ,KAAL,GAAaA,KAAb;AACH,O;;;;;;;;;;;;;;;;ACRL;;;AAAA,uCAAe,umDAAf;;;;;;;;;;;;;;;ACAA;;;AAAA,uCAAe,6oJAAf","file":"default-src_app_games-list_card-span_card-span_module_ts-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CardSpanPage } from './card-span.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CardSpanPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CardSpanPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { CardSpanPageRoutingModule } from './card-span-routing.module';\n\nimport { CardSpanPage } from './card-span.page';\nimport { CardSpanService } from './card-span.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { SharedModule } from '../../shared/shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    HttpClientModule,\n    CardSpanPageRoutingModule,\n    SharedModule,\n    \n  ],\n  declarations: [CardSpanPage],\n  providers: [CardSpanService],\n  exports: [CardSpanPage],\n})\nexport class CardSpanPageModule {}\n","import { Component, OnInit, ViewChild, ElementRef, Input, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CardSpanService } from './card-span.service';\nimport { AlertController, AnimationController } from '@ionic/angular';\nimport { Card } from './card.model';\nimport { EventemitterService } from '../../shared/eventemitter.service';\nimport { trigger, style, state, animate, transition } from '@angular/animations';\nimport { Subscription } from 'rxjs';\nimport { GameService } from '../../shared/game.service';\n\n@Component({\n  selector: 'app-card-span',\n  templateUrl: './card-span.page.html',\n  styleUrls: ['./card-span.page.scss'],\n  animations: [\n    trigger('cardFade', [\n      state('bright', style({opacity: 1})),\n      transition('* => faded', [animate(900)]),\n      transition('* => bright', [animate(500)]),\n      state('faded', style({opacity: 0}))\n    ])\n  ]\n})\nexport class CardSpanPage implements OnInit, OnDestroy {\n@ViewChild('currentNumber', { read: ElementRef, static: true}) currentCardView: ElementRef;\n@Input('excerciseSet') excerciseMode = false;\n@Input('levels') levels;\nopacity: string;\ngamename: string;\ngameHasBegun = false;\ncardsRemembered: number = 0;\ncardRoute: string;\ncorrect: boolean = false;\nwrong: boolean = false;\nformIsHidden: boolean = true;\nformSuites: string[] = [\"club\", \"heart\", \"diamond\", \"spade\"]\nselectedCard: string;\ncardsArray: Card[];\nsuiteIsSelected = false;\ncurrentCard: number;\nanswerCards: Card[] = [];\ncardCount: number = 0;\nlost: boolean = false;\nchipsAreDisabled = false\nsubmitIsTrue = false\ncardCountIsHidden = false;\ngameno = 2;\nstartButtonIsDisabled = false;\nisFaded: string = 'faded';\nsubscription = new Subscription();\ncardSubscription = new Subscription();\ndatabase = new Subscription();\n\n  constructor(\n    private router: Router, \n    private cardService: CardSpanService,\n    private animationCtrl: AnimationController,\n    private eventemitter: EventemitterService,\n    private alertCtrl: AlertController,\n    private gameService: GameService\n    // private renderer: Renderer2\n  ) { }\n\n  ngOnInit() {\n\n    // gets a pre-existing level and score if it exists from the database\n    let levelscore = this.gameService.getLevelScore(this.gameno,this.excerciseMode)\n    this.gameService.getLevelScore(this.gameno, this.excerciseMode)\n    this.database = this.eventemitter.databaseemitter.subscribe(value => {\n      if (value.level) {\n        this.cardService.level = value.level\n      }\n      if (value.score) {\n        this.cardService.score = value.score\n      }\n    })\n\n    // gets the call to animate from the service\n    this.eventemitter.animate.subscribe(value => {\n      if (value === 'brighten') {\n        // this.brighten()\n        // setTimeout(() => {\n          // this.isFaded = 'bright'\n          // console.log('bright') \n          setTimeout(() => {\n            this.brighten()  \n          }, 100)   \n    \n        // }, 150)\n      }\n      if (value === 'fade') {\n        setTimeout(() => {\n          this.fade()\n        }, 1000)\n      }\n    })\n\n    // gets the call to shift to the selecting screen from the service\n    this.eventemitter.form.subscribe(value => {\n      if (value === 'disappear') {\n        this.formIsHidden = true\n      }\n      if (value === 'reappear') {\n        this.formIsHidden = false\n        this.gameService.startTimer()\n        this.wrong = false\n        this.correct = false\n      }\n    })\n\n    // gets the current card type from the service for example queen of spades\n    this.cardSubscription = this.eventemitter.CurrentCardRoute.subscribe(value => {\n      console.log(value)\n      this.cardRoute = value \n      setTimeout(() => {\n        this.fade() \n      }, 300)  \n      setTimeout(() => {\n        this.brighten()\n      }, 1000)\n    })\n\n    // gets the different game function calls like start, end game, restart, resume, quit\n    this.subscription = this.eventemitter.gameStateSubj.subscribe(value => {\n      console.log(value)\n      switch (value) {\n        case 'start': \n          this.onStart()\n          break\n        case 'restart':\n          this.startButtonIsDisabled = true\n          this.onEndGame()\n          setTimeout(() => {\n            this.onRestart()\n          }, 700)\n          break\n        case 'resume':\n          this.onResume()\n          break\n        case 'quit':\n          this.onQuit()\n          break\n        case 'pause':\n          this.onPause()\n          break\n        case 'stop':\n          this.onEndGame()\n          break\n      }\n    })\n\n    // sets level if it is in excerciseMode (meaning it is part of excercise set)\n    if (this.excerciseMode) {\n      this.cardService.level = this.levels[0]\n      this.cardService.score = 0\n    }\n  }\n\n  // goes back to home screen\n  onQuit() {\n    this.gameHasBegun = false;\n    this.router.navigate(['/home']);\n  }\n\n  // starts the game with the popup\n  onStart() {\n    console.log(\"cardspanstart\")\n    this.alertCtrl.create({\n      header: 'Level: ' + this.getLevelandScore()[0],\n      message: 'You need ' + (this.gameService.scoringconstant - this.getLevelandScore()[1]) + ' points to go to the next level',\n      buttons: [{\n        text: 'Continue',\n        role: 'Continue',\n        handler: () => {\n          this.gameHasBegun = true\n          this.cardService.generateCards()\n          this.lost = false;\n          this.cardsRemembered = 0;\n          this.cardCountIsHidden = false\n      }}]}).then(alert=> alert.present())\n  }\n\n  // fade animation\n  fade() {\n    // this.opacity = 'fade'\n    this.isFaded = 'bright'\n    // console.log('bright')\n    // const fade = this.animationCtrl.create()\n    // .addElement(this.currentCardView.nativeElement)\n    // .duration(500)\n    // .iterations(1)\n    // .fromTo('opacity', '1', '0');\n\n    // fade.play()\n  }\n\n  // brighten animation\n  brighten() {\n    this.isFaded = 'faded'\n    // console.log('faded')\n    // this.opacity = 'bright'\n    // const brighten = this.animationCtrl.create()\n    // .addElement(this.currentCardView.nativeElement)\n    // .duration(900)\n    // .iterations(1)\n    // .fromTo('opacity', '0', '1');\n    // brighten.play()\n  }\n\n  // pauses game\n  onPause() {\n    this.cardService.onPause()\n    this.gameService.pauseTimer()\n  }\n\n  //resumes game\n  onResume() {\n    this.cardService.onResume(this.formIsHidden)\n    this.gameService.startTimer()\n  }\n\n  // when someone selects a suite then it opens up the options for the suite\n  onSelectCard(suite) {\n    this.selectedCard = suite\n    this.suiteIsSelected = true\n    this.cardsArray = this.cardService.getCards(suite)\n  }\n\n  // when submit is clicked, then the suite near the middle of the screen is reset for the end of the next game\n  onResetSuite() {\n    this.selectedCard = ''\n    this.suiteIsSelected = false\n  }\n\n  // legacy code\n  // checkIfRow(index, number) {\n  //   if (index > number) {\n  //     return false\n  //   } else {\n  //     return true\n  //   }\n  // }\n\n  // what happens when restart button is clicked\n  onRestart() {\n    setTimeout(() => {\n      this.onStart()\n      this.startButtonIsDisabled = false\n    }, 300)\n\n  }\n\n  // when the a card is clicked then it is added to the picked cards area\n  onChipClicked(suite: string, name: string, imgURL: string) {\n    if (this.cardService.ChipsSubmit(this.cardCount) === \"cardCount\") {\n      this.answerCards.push(new Card(imgURL, name, suite))\n      this.cardCount++\n      this.cardCountIsHidden = true\n    }\n    if (!this.cardService.ChipsSubmit(this.cardCount)) {\n      this.answerCards.push(new Card(imgURL, name, suite))\n      this.cardCount++\n    } \n  }\n\n  // when the submit button is clicked then the data is stored in the data base and the score and excercise mode is checked and based on that the level is increased\n  // it also starts a new round\n  onSubmit() {\n    this.cardRoute = ''\n    let timer = this.gameService.clearTimer()\n    console.log(timer)\n    let formCorrect = this.cardService.submitAnswer(this.answerCards, this.cardCount)\n    if (this.excerciseMode !== true) {\n      this.gameService.storeLevelScore(this.gameno, this.cardService.score, this.cardService.level, this.excerciseMode, timer/1000, formCorrect.wrongs, formCorrect.prevscore, formCorrect.prevlevel)\n    }\n    else {\n      this.cardService.level++\n    }\n      this.answerCards = [] \n      this.cardCount = 0\n      this.cardsRemembered++\n      this.cardCountIsHidden = false\n      let scoreneeded;\n      if (this.excerciseMode === true) {\n        scoreneeded = null\n        if (this.cardService.level > this.levels[1]) {\n          this.eventemitter.onRoundFinished({continue: true, score: this.cardService.score})\n        }\n      } else {\n        scoreneeded = this.gameService.scoringconstant - this.cardService.getLevelandScore()[1]\n      }\n      this.alertCtrl.create({\n        header: 'Level: ' + this.getLevelandScore()[0],\n        message: this.cardService.alertmessage + '\\n' + 'You need ' + scoreneeded + ' points to go to the next level',\n        buttons: [{\n          text: 'Continue',\n          role: 'Continue',\n          handler: () => {\n            this.cardService.generateCards()\n        }}]}).then(alert=> alert.present())\n      // this.correct = true\n  }\n\n  // onPopup() {\n  //   this.onPause()\n  //   let scoreneeded = 200 - this.cardService.getLevelandScore()[1]\n  //   this.alertCtrl.create({\n  //     header: 'Level: ' + this.getLevelandScore()[0],\n  //     message: 'You need ' + scoreneeded + ' points to go to the next level',\n  //     buttons: [{\n  //       text: 'Continue',\n  //       role: 'Continue',\n  //       handler: () => {\n  //         this.onResume()\n  //     }}]}).then(alert=> alert.present())\n  // }\n\n  // the game is ended when the person returns to the home screen\n  onEndGame() {\n    this.cardService.endGame()\n    setTimeout(() => {\n      this.answerCards = []\n      this.cardCount = 0\n      this.formIsHidden = true\n      this.gameHasBegun = false\n      this.correct = false\n      this.wrong = false\n      this.suiteIsSelected = false\n      this.cardRoute = null\n      this.onResetSuite()\n    }, 500)\n\n  }\n\n  // returns the color class based on the suite input for the chips\n  getColor(suite: string) {\n    if (suite === 'club' || suite === 'spade') {\n      return 'dark'\n    }\n    if (suite === 'diamond' || suite === 'heart') {\n      return 'danger'\n    }\n  }\n\n  // when a chip is clicked in the picked chips section then it is deleted from the array\n  onDeleteItem(index) {\n    this.answerCards.splice(index, 1)\n    this.cardCount--\n    if (this.cardService.ChipsSubmit(this.cardCount) === \"cardCount\") {\n      this.submitIsTrue = false\n      this.cardCountIsHidden = false\n    }\n  }\n\n  // if the number of chips is right then the submit button is enabled or disabled\n  submitButton() {\n    if (!this.cardService.ChipsSubmit(this.cardCount) || this.cardService.ChipsSubmit(this.cardCount) === \"cardCount\") {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  getI() {\n    return this.cardService.i\n  }\n  // unsubscribes from subscriptions when the component is destroyed\n  ngOnDestroy() {\n    this.subscription.unsubscribe()\n    this.cardSubscription.unsubscribe()\n    // console.log(\"unsubscribed\")\n    // this.cardSubscription.unsubscribe()\n    // this.eventemitter.form.unsubscribe()\n    // this.eventemitter.animate.unsubscribe()\n    // this.eventemitter.CurrentCardRoute.unsubscribe()\n  }\n\n    // unsubscribes from subscriptions when the component is left \n  ionViewDidLeave() {\n    this.subscription.unsubscribe()\n    console.log(\"unsubscribed\")\n    this.cardSubscription.unsubscribe()\n  }\n\n  // gets the level and score from the service \n  getLevelandScore() {\n    return this.cardService.getLevelandScore()\n  }\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { Card } from './card.model';\nimport { EventemitterService } from '../../shared/eventemitter.service';\nimport { GameService } from '../../shared/game.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CardSpanService {\n  cardRoute: string = \"../../assets/cards\";\n  currentCard: string;\n  cardsArrayAnswers: Card[] = [];\n  cardsArrayDisplayed: string[] = []\n  level: number = 1;\n  score: number = 0\n  paused: boolean = false;\n  cards: string[] = [\"A\", \"K\", \"Q\", \"J\", \"10\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\"];\n  pausedi: number;\n  i: number;\n  alertmessage: string;\n  \"♦️\"\n\n\n  constructor(\n    private eventemitter: EventemitterService,\n    private gameService: GameService) { }\n\n  // creates a random card and returns it\n  getRandomCard() {\n    let randomSuite = Math.floor(Math.random() * 3)\n    let randomNumber = Math.floor(Math.random() * 12)\n    let cardSuite: string;\n    let cardNumber: string;\n    switch (randomSuite) {\n      case 0:\n        cardSuite = \"club\"\n        break\n      case 1:\n        cardSuite = \"diamond\"\n        break\n      case 2: \n        cardSuite = \"heart\"\n        break\n      case 3:\n        cardSuite = \"spade\"\n        break\n    }\n    switch (randomNumber) {\n      case 0:\n        cardNumber = \"A\"\n        break\n      default:\n        cardNumber = JSON.stringify(randomNumber + 1)\n        break\n      case 10:\n        cardNumber = \"J\"\n        break\n      case 11: \n        cardNumber = \"Q\"\n        break\n      case 12:\n        cardNumber = \"K\"\n        break\n    }\n    let cardFinalRoute = this.cardRoute + '/' + cardSuite + '/' + cardNumber + '.jpg'\n    this.cardsArrayAnswers.push(new Card('/' + cardSuite + '.png', cardNumber, cardSuite))\n    this.cardsArrayDisplayed.push(cardFinalRoute)\n  }\n\n  // starts the timer and clears the previous array\n  generateCards() {\n    this.clearCards()\n    for (let i = 0; i < this.level + 2; i++) {\n      this.getRandomCard()\n      if (this.cardsArrayDisplayed[i] === this.cardsArrayDisplayed[i - 1]) {\n        this.cardsArrayAnswers.splice(i)\n        this.cardsArrayDisplayed.splice(i)\n        i--\n      }\n    }\n    this.i = 0\n    this.runSeries()\n  }\n\n  // starts the series which generates random cards on an interval and tells the component when to animate and when the length is done then it stops\n  runSeries() {\n    this.eventemitter.onForm('disappear')  \n    if (this.paused !== true) {\n      if (this.i <= this.level + 1) {\n        this.eventemitter.onCurrentCardRoute(this.cardsArrayDisplayed[this.i]) \n          // this.eventemitter.onAnimate('brighten') \n          // this.eventemitter.onAnimate('fade')  \n          setTimeout(() => {\n            if (this.i <= this.level) {\n              this.i++  \n              this.runSeries()  \n            } else {\n              setTimeout(() => {\n                this.eventemitter.onAnimate('fade')\n                this.eventemitter.onForm('reappear')\n              }, 600)\n            }\n          }, 2000)\n      } \n      // else {\n\n      // }\n    }\n  }\n\n  // formats the card data and gives it to the component\n  getCards(suite) {\n    let cardsArray: Card[] = []\n    for (let card of this.cards) {\n      cardsArray.push(new Card( '/' + suite + '.png', card, suite))\n    }\n    return cardsArray\n  }\n\n  // deals with level and score when submit is clicked\n  submitAnswer(cardsArray: Card[], cardCount) {\n    if (this.level + 2 === cardCount) {\n      let wrongs = 0\n      let prevscore = this.score\n      let prevlevel = this.level\n      for (let i = 0; i < this.cardsArrayAnswers.length; i++) {\n        if (this.cardsArrayAnswers[i].name !== cardsArray[i].name || this.cardsArrayAnswers[i].suite !== cardsArray[i].suite) {\n          console.log(this.cardsArrayAnswers[i], cardsArray[i])    \n          wrongs++   \n        } \n      }\n      let currentscore = this.gameService.getScore(this.cardsArrayAnswers.length, wrongs)\n      this.score = this.score + currentscore\n      if (this.score >= this.gameService.scoringconstant) {\n        this.level++\n        this.score = 0\n      }\n      if (wrongs === 0) {\n        this.alertmessage = \"Correct!\"\n      }\n      else {\n        let alertstring = '';\n        for (let item of this.cardsArrayAnswers) {\n          let suite = ''\n          switch (item.suite) {\n            case \"club\":\n              suite = \"♣️\"\n              break\n            case \"diamond\":\n              suite = \"♦️\"\n              break\n            case \"spade\":\n              suite = \"♠️\"\n              break\n            case \"heart\":\n              suite = \"♥️\"\n              break\n          }\n          alertstring = alertstring + \" \" + suite + item.name + \",\"\n        }\n        this.alertmessage = \"The correct answers were:\" + alertstring + \".\"\n      }\n      return {beginNewRound: true, wrongs: wrongs, prevscore: currentscore, prevlevel: prevlevel}\n  }\n}\n\n// deals with submit button being disabled and length of the card count\nChipsSubmit(cardCount) {\n  if (cardCount === this.level+ 2) {\n    return true\n  }\n  if (cardCount === this.level + 1){\n    return 'cardCount'\n  } \n}\n\n// clears the cards array\nclearCards() {\n  this.cardsArrayAnswers = []\n  this.cardsArrayDisplayed = []\n}\n\n\nendGame() {\n  this.level = 1\n  this.clearCards() \n  this.currentCard = ''\n}\n\n// pauses the game\nonPause() {\n  this.paused = true\n}\n\n// resumes the game after a pause\nonResume(formIsHidden: boolean) {\n  this.paused = false\n  if (formIsHidden === true) {\n    this.runSeries()\n  }\n\n}\n\n// passes level and score to the component\ngetLevelandScore() {\n  return [this.level, this.score]\n}\n\n}","export class Card {\n    public imgURL: string;\n    public name: string;\n    public suite: string;\n    constructor(imgURL: string, name: string, suite: string) {\n        this.imgURL = imgURL;\n        this.name = name;\n        this.suite = suite;\n    }\n}","export default \".card {\\n  font-family: \\\"Times New Roman\\\", Times, serif;\\n  font-size: large;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhcmQtc3Bhbi5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0JBO0VBQ0ksNENBQUE7RUFDQSxnQkFBQTtBQXJCSiIsImZpbGUiOiJjYXJkLXNwYW4ucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gLmNsdWIge1xuLy8gICAgIGZvbnQtZmFtaWx5OiAnVGltZXMgTmV3IFJvbWFuJywgVGltZXMsIHNlcmlmO1xuLy8gICAgIGZvbnQtc2l6ZTogbGFyZ2U7XG4vLyB9XG5cbi8vIC5kaWFtb25kIHtcbi8vICAgICBmb250LWZhbWlseTogJ1RpbWVzIE5ldyBSb21hbicsIFRpbWVzLCBzZXJpZjtcbi8vICAgICBmb250LXNpemU6IGxhcmdlO1xuLy8gICAgIGNvbG9yOiByZWQ7XG4vLyB9XG5cbi8vIC5oZWFydCB7XG4vLyAgICAgZm9udC1mYW1pbHk6ICdUaW1lcyBOZXcgUm9tYW4nLCBUaW1lcywgc2VyaWY7XG4vLyAgICAgZm9udC1zaXplOiBsYXJnZTtcbi8vICAgICBjb2xvcjogcmVkO1xuLy8gfVxuXG4vLyAuc3BhZGUge1xuLy8gICAgIGZvbnQtZmFtaWx5OiAnVGltZXMgTmV3IFJvbWFuJywgVGltZXMsIHNlcmlmO1xuLy8gICAgIGZvbnQtc2l6ZTogbGFyZ2U7XG4vLyB9XG5cbi5jYXJkIHtcbiAgICBmb250LWZhbWlseTogJ1RpbWVzIE5ldyBSb21hbicsIFRpbWVzLCBzZXJpZjtcbiAgICBmb250LXNpemU6IGxhcmdlO1xufVxuXG4vLyAuYnJpZ2h0IHtcbi8vICAgICBhbmltYXRpb24tbmFtZTogYnJpZ2h0ZW47XG4vLyAgICAgYW5pbWF0aW9uLWR1cmF0aW9uOiA5MDBtcztcbi8vIH1cblxuLy8gLmZhZGUge1xuLy8gICAgIGFuaW1hdGlvbi1uYW1lOiBmYWRlO1xuLy8gICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogNTAwbXM7XG4vLyB9XG5cbi8vIEBrZXlmcmFtZXMgYnJpZ2h0ZW4ge1xuLy8gICAgIGZyb20ge1xuLy8gICAgICAgICBvcGFjaXR5OiAwO1xuLy8gICAgIH1cblxuLy8gICAgIHRvIHtcbi8vICAgICAgICAgb3BhY2l0eTogMTtcbi8vICAgICB9IFxuLy8gfVxuXG4vLyBAa2V5ZnJhbWVzIGZhZGUge1xuLy8gICAgIGZyb20ge1xuLy8gICAgICAgICBvcGFjaXR5OiAxO1xuLy8gICAgIH1cblxuLy8gICAgIHRvIHtcbi8vICAgICAgICAgb3BhY2l0eTogMDtcbi8vICAgICB9XG4vLyB9XG4iXX0= */\";","export default \"<app-header [(gamenumber)]=\\\"gameno\\\" [(gameHasBegun)]=\\\"gameHasBegun\\\" ></app-header>\\n\\n<app-description [(gameHasBegun)]=\\\"gameHasBegun\\\" [(gameno)]=\\\"gameno\\\"></app-description>\\n\\n<app-score *ngIf=\\\"gameHasBegun\\\" [(level)]=\\\"getLevelandScore()[0]\\\" [(score)]=\\\"getLevelandScore()[1]\\\"></app-score>\\n\\n<ion-content *ngIf=\\\"!gameHasBegun && !excerciseMode\\\"></ion-content>\\n\\n<!-- This game is mostly complete but the menu functions need to be tested and figured out. -->\\n\\n<!-- the game itself -->\\n<ion-content *ngIf=\\\"gameHasBegun\\\">\\n\\n    <!-- <ion-item color=\\\"danger\\\" *ngIf=\\\"wrong\\\">\\n      <ion-label class=\\\"ion-text-center\\\">Incorrect Answer!</ion-label>\\n    </ion-item> -->\\n    <!-- <ion-item color=\\\"dark\\\" *ngIf=\\\"correct\\\" >\\n      <ion-label class=\\\"ion-text-center\\\" >Good Job! Correct Answer!</ion-label>\\n    </ion-item> -->\\n\\n    <!-- This part is the selecting screen of the game after the cards are displayed -->\\n    <ion-row *ngIf=\\\"!cardCountIsHidden\\\">\\n      <ion-col class=\\\"ion-text-center\\\">\\n        <ion-label>Card: {{ formIsHidden ? getI() + 1 : cardCount + 1 }}</ion-label>\\n      </ion-col>\\n    </ion-row>\\n  <ion-grid *ngIf=\\\"gameHasBegun && !formIsHidden\\\">\\n      <ion-row>\\n        <ion-col *ngFor=\\\"let suite of formSuites\\\" size-md=\\\"2\\\" offset-md=\\\"0.75\\\" offset-lg=\\\"1.5\\\" size-lg=\\\"1\\\">\\n          <ion-card button=\\\"true\\\" [disabled]=\\\"selectedCard === suite\\\" (click)=\\\"onSelectCard(suite)\\\" >\\n            <img [src]=\\\"'../../assets/cards/card-suites' + '/' + suite + '.png'\\\">            \\n          </ion-card>\\n        </ion-col>\\n      </ion-row>\\n    <div *ngIf=\\\"suiteIsSelected\\\">\\n        <ion-row class=\\\"ion-text-center\\\">\\n          <ion-col *ngFor=\\\"let card of cardsArray\\\"  size-md=\\\"2\\\" offset-md=\\\"0.75\\\">\\n            <div class=\\\"ion-text-center\\\">\\n              <ion-chip [color]=\\\"getColor(card.suite)\\\" outline style=\\\"background-color: white\\\" (click)=\\\"onChipClicked(card.suite, card.name, card.imgURL)\\\">\\n                <!-- <ion-avatar>\\n                  <img [src]=\\\"'../../assets/cards/card-suites/' + card.imgURL\\\"> >\\n                </ion-avatar> -->\\n                <div class=\\\"card\\\">\\n                  <ion-label>{{ card.name }}</ion-label>\\n                </div>                  \\n              </ion-chip>\\n            </div>\\n          </ion-col>\\n        </ion-row>\\n        <div class=\\\"ion-text-center\\\">\\n          <ion-row>\\n            <ion-col>\\n              <ion-label>Picked Cards (Click to delete):</ion-label>\\n            </ion-col>\\n          </ion-row>\\n        </div>\\n          <ion-row>\\n            <ion-col (click)=\\\"onDeleteItem(i)\\\" *ngFor=\\\"let card of answerCards; let i = index\\\" size=\\\"3\\\" size-md=\\\"2\\\" offset-md=\\\"0.75\\\">\\n              <ion-chip [color]=\\\"getColor(card.suite)\\\" outline style=\\\"background-color: white\\\">\\n                <ion-avatar>\\n                  <img [src]=\\\"'../../assets/cards/card-suites/' + card.imgURL\\\"> >\\n                </ion-avatar>\\n                <div class=\\\"card\\\">\\n                  <ion-label>{{ card.name }}</ion-label>\\n                </div> \\n                <!-- <ion-icon name=\\\"close-sharp\\\" ></ion-icon>                 -->\\n              </ion-chip>\\n            </ion-col>\\n          </ion-row>    \\n        <ion-row>\\n          <ion-col>\\n            <div class=\\\"ion-text-center\\\">\\n              <ion-button color=\\\"light\\\" (click)=\\\"onSubmit()\\\" [disabled]=\\\"submitButton()\\\">Submit</ion-button>\\n            </div>\\n          </ion-col>\\n        </ion-row>\\n    </div>\\n  </ion-grid>\\n\\n  <!-- This part makes up the cards that are animated through angular animations -->\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col class=\\\"ion-text-center\\\" size=\\\"auto\\\" [class]=\\\"opacity\\\" #currentNumber [@cardFade]=\\\"isFaded\\\" offset=\\\"1\\\" size=\\\"10\\\" size-md=\\\"6\\\" size-lg=\\\"4\\\" >\\n        <div *ngIf=\\\"gameHasBegun && formIsHidden\\\">\\n          <ion-card>\\n            <img  width-md=\\\"480\\\" height-md=\\\"733.5\\\" [src]=\\\"cardRoute\\\">\\n          </ion-card>\\n        </div>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\\n\\n<!-- <ion-footer *ngIf=\\\"gameHasBegun\\\">\\n  <ion-toolbar>\\n    <ion-title>\\n      Level: {{ getLevelandScore()[0] }}; Score: {{ getLevelandScore()[1] }} \\n    </ion-title>\\n    <ion-buttons slot=\\\"end\\\"><ion-button (click)=\\\"onPopup()\\\"></ion-button></ion-buttons>\\n    <ion-buttons>\\n      <ion-button (click)=\\\"onPopup()\\\"> </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-footer> -->\\n\\n<!-- Common element -->\\n<ion-footer>\\n  <app-menu [(gamenumber)]=\\\"gameno\\\" [(gameHasBegun)]=\\\"gameHasBegun\\\" ></app-menu>\\n  <app-start [(gameHasBegun)]=\\\"gameHasBegun\\\" [(gameno)]=\\\"gameno\\\"></app-start>\\n</ion-footer>\\n\\n\\n\";"]}