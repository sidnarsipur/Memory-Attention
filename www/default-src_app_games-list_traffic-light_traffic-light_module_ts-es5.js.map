{"version":3,"sources":["webpack:///src/app/games-list/traffic-light/levels.ts","webpack:///src/app/games-list/traffic-light/traffic-light-routing.module.ts","webpack:///src/app/games-list/traffic-light/traffic-light.module.ts","webpack:///src/app/games-list/traffic-light/traffic-light.page.ts","webpack:///src/app/games-list/traffic-light/traffic-light.page.scss","webpack:///src/app/games-list/traffic-light/traffic-light.page.html"],"names":["Levels","instructions","ratio","interval","totallength","mode","routes","path","component","TrafficLightPage","TrafficLightPageRoutingModule","NgModule","imports","RouterModule","exports","TrafficLightPageModule","CommonModule","FormsModule","IonicModule","SharedModule","declarations","eventemitter","gameService","router","gameno","gameHasBegun","colors","isHidden","possibilities","timer","red","yellow","green","grey","currentRed","currentYellow","currentGreen","clicked","round","wrong","correct","subscription","Subscription","level","score","levels","countdowntimer","countdownTimerIsHidden","instructionsAreHidden","doubleupmode","index","database","startButtonIsDisabled","excerciseMode","getLevelScore","databaseemitter","subscribe","value","gameStateSubj","onStart","onEndGame","setTimeout","navigate","exlevels","clearInterval","timerfunc","slice","length","console","log","colorneeded","splice","Math","random","join","dominantcolor","ratios","determineRatio","greenratio","yellowratio","redratio","totalratio","possibilitiesarr","ceil","possibilitiesnumber","yellowpossibilities","floor","greenpossibilities","redpossibilities","leftovers","i","randnum","greenyellow","greenred","redyellow","current","item","push","possibilitiesall","generateColors","countdown","setInterval","endRound","getRandomColor","resetMatch","array","currentscore","getScore","onRoundFinished","prevlevel","scoringconstant","storeLevelScore","checkIfClicked","resetColor","color","previous","unsubscribe","EventemitterService","GameService","Router","Input","Component","selector","template"],"mappings":"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","file":"default-src_app_games-list_traffic-light_traffic-light_module_ts-es5.js","sourcesContent":["import { level } from '../stroop-game/level.model'\nimport {Level} from './level'\n\n// this contains the time, ratio of red to green to yellow, the interval between lights and the instructions for each level\n\nexport const Levels: Level[] = [\n    //level 1\n    {\n        instructions: \"Only click if blank appears!\",\n        ratio: [1, 1, 1],\n        interval: 2000,\n        totallength: 30000\n    },\n    //level 2\n    {\n        instructions: \"Only click if blank appears!\",\n        ratio: [5, 2, 2],\n        interval: 2000,\n        totallength: 30000\n    },\n    //level 3\n    {\n        instructions: \"Only click if blank appears!\",\n        ratio: [1, 1, 1],\n        interval: 1000,\n        totallength: 30000\n    },\n    //level 4\n    {\n        instructions: \"Only click if blank appears!\",\n        ratio: [5, 2, 2],\n        interval: 1000,\n        totallength: 30000\n    },\n    //level 5\n    {\n        instructions: \"Only click if blank appears!\",\n        ratio: [1, 1, 1],\n        interval: 2000,\n        totallength: 30000,\n        mode: \"double-up\"\n    },\n    //level 6\n    {\n        instructions: \"Only click if blank appears!\",\n        ratio: [5, 2, 2],\n        interval: 2000,\n        totallength: 30000,\n        mode: \"double-up\"\n    },\n    //level 7\n    {\n        instructions: \"Only click if blank appears!\",\n        ratio: [1, 1, 1],\n        interval: 1000,\n        totallength: 30000,\n        mode: \"double-up\"\n    },\n    //level 8\n    {\n        instructions: \"Only click if blank appears!\",\n        ratio: [5, 2, 2],\n        interval: 1000,\n        totallength: 30000,\n        mode: \"double-up\"\n    },\n    //level 9\n    {\n        instructions: \"Only click if blank appears!\",\n        ratio: [1, 1, 1],\n        interval: 500,\n        totallength: 30000,\n        mode: \"double-up\"\n    },\n    //level 10\n    {\n        instructions: \"Only click if blank appears!\",\n        ratio: [5, 2, 2],\n        interval: 500,\n        totallength: 30000,\n        mode: \"double-up\"\n    },\n]","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TrafficLightPage } from './traffic-light.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TrafficLightPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TrafficLightPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { TrafficLightPageRoutingModule } from './traffic-light-routing.module';\n\nimport { TrafficLightPage } from './traffic-light.page';\nimport { SharedModule } from '../../shared/shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    TrafficLightPageRoutingModule,\n    SharedModule\n  ],\n  declarations: [TrafficLightPage],\n  exports: [TrafficLightPage],\n})\nexport class TrafficLightPageModule {}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { EventemitterService } from '../../shared/eventemitter.service';\nimport { Levels } from './levels'\nimport { Level } from './level'\nimport { GameService } from 'src/app/shared/game.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-traffic-light',\n  templateUrl: './traffic-light.page.html',\n  styleUrls: ['./traffic-light.page.scss'],\n})\nexport class TrafficLightPage implements OnInit, OnDestroy {\n  gameno = 3\n  gameHasBegun = false\n  path = \"../../assets/traffic-light/\"\n  colors = ['Green', 'Yellow', 'Red']\n  isHidden = false\n  possibilities = []\n  timer = 0\n  current: string;\n  red = \"#BB1E10\"\n  yellow = \"#FAD201\"\n  green = \"#33A532\"\n  grey = \"#8E9291\"\n  currentRed = this.grey\n  currentYellow = this.grey\n  currentGreen = this.grey\n  clicked = false;\n  round = 1\n  interval = 3000\n  totallength = 120000\n  wrong = 0\n  correct = 0\n  subscription = new Subscription()\n  timerfunc;\n  level = 1;\n  score = 0;\n  colorneeded: any;\n  levels: Level[] = Levels\n  countdowntimer: any = 4\n  instructions = this.levels[this.level - 1].instructions\n  countdownTimerIsHidden: boolean = true;\n  possibilitiesnumber: number;\n  instructionsAreHidden: boolean = true\n  doubleupmode = false\n  possibilitiesall: String[];\n  index: number = 0;\n  database = new Subscription()\n  startButtonIsDisabled = false\n  @Input('excerciseSet') excerciseMode = false;\n  @Input('levels') exlevels;\n\n  constructor(\n    private eventemitter: EventemitterService,\n    private gameService: GameService,\n    private router: Router) { }\n\n  ngOnInit() {\n    // gets preexisting level and score data from database\n    this.gameService.getLevelScore(this.gameno, this.excerciseMode)\n    this.database = this.eventemitter.databaseemitter.subscribe(value => {\n      if(value.level) {\n        this.level = value.level\n      }\n      if (value.score) {\n        this.score = value.score\n      }\n    })\n\n    // controls the menu functions\n    this.subscription = this.eventemitter.gameStateSubj.subscribe(value => {\n      switch (value) {\n        case 'start':\n          this.onStart()\n          break\n        case 'restart':\n          this.startButtonIsDisabled = true\n          this.onEndGame()\n          setTimeout(() => {\n            this.onStart()\n            this.startButtonIsDisabled = false\n          }, 300)\n          break\n        case 'quit':\n          this.onEndGame()\n          this.router.navigate(['/home'])\n      }\n    })\n\n    // what to do if it is an exercise set\n    if (this.excerciseMode) {\n      this.level = this.exlevels[0]\n      this.score = 0\n    }\n\n  }\n\n  // ends the game\n  onEndGame() {\n    this.gameHasBegun = false\n    clearInterval(this.timerfunc)\n  }\n\n  // based on level, it determines the ratio of reds to greens to yellow\n  determineRatio() {\n    if (this.doubleupmode === true) {\n      let colors = this.colors.slice(0, this.colors.length);\n      console.log(colors)\n      this.colorneeded = [colors.splice(Math.round(Math.random()*(colors.length - 1)), 1)[0], colors.splice(Math.round(Math.random()*(colors.length - 1)), 1)[0]]\n      colors = this.colors\n      console.log(this.colorneeded)\n      switch (this.colorneeded.join(\" \")) {\n        case \"Green Yellow\":\n          return this.levels[this.level - 1].ratio\n          break\n        case \"Yellow Green\":\n          return this.levels[this.level - 1].ratio\n          break\n        case \"Green Red\":\n          return [this.levels[this.level - 1].ratio[2] , this.levels[this.level - 1].ratio[0], this.levels[this.level - 1].ratio[1]]\n          break\n        case \"Red Green\":\n          return [this.levels[this.level - 1].ratio[2] , this.levels[this.level - 1].ratio[0], this.levels[this.level - 1].ratio[1]]\n          break\n        case \"Red Yellow\":\n          return [this.levels[this.level - 1].ratio[1], this.levels[this.level - 1].ratio[2], this.levels[this.level - 1].ratio[0]]\n          break\n        case \"Yellow Red\":\n          return [this.levels[this.level - 1].ratio[1], this.levels[this.level - 1].ratio[2], this.levels[this.level - 1].ratio[0]]\n          break\n      }\n    } else {\n      this.colorneeded = this.colors[Math.round(Math.random()*(this.colors.length - 1))]\n      let dominantcolor = this.colorneeded\n      switch (dominantcolor) {\n        case \"Green\":\n          return this.levels[this.level - 1].ratio\n          break\n        case \"Yellow\":\n          return [this.levels[this.level - 1].ratio[2] , this.levels[this.level - 1].ratio[0], this.levels[this.level - 1].ratio[1]]\n          break\n        case \"Red\":\n          return [this.levels[this.level - 1].ratio[1], this.levels[this.level - 1].ratio[2], this.levels[this.level - 1].ratio[0]]\n          break\n      }\n    }\n\n  }\n\n  // creates the random array of colors\n  generateColors() {\n    let ratios = this.determineRatio()\n    console.log(this.colorneeded, ratios)\n    let greenratio = ratios[0]\n    let yellowratio = ratios[1]\n    let redratio = ratios[2]\n    let totalratio: number = greenratio + yellowratio + redratio\n    let possibilitiesarr = []\n    let possibilities: number = Math.ceil(this.totallength/this.interval)\n    if (this.doubleupmode) {\n      possibilities = Math.ceil(this.totallength/(2*this.interval))\n    }\n    console.log(possibilities)\n    let length = possibilities\n    this.possibilitiesnumber = possibilities\n    //gets total number of reds yellows and greens    \n    let yellowpossibilities = Math.floor(possibilities*(yellowratio/totalratio))\n    let greenpossibilities = Math.floor(possibilities*(greenratio/totalratio))\n    let redpossibilities = Math.floor(possibilities*(redratio/totalratio))\n    //randomly assigns leftovers to red green or yellow\n    let leftovers = possibilities - (yellowpossibilities + greenpossibilities + redpossibilities) \n    if (leftovers > 0) {\n      for (let i = 0; i < leftovers; i++) {\n        let randnum = Math.round(Math.random()*2)\n        switch (randnum) {\n          case 0:\n            greenpossibilities++\n            break\n          case 1:\n            yellowpossibilities++\n            break\n          case 2: \n            redpossibilities++\n        }\n      }\n    }\n    console.log(yellowpossibilities, greenpossibilities, redpossibilities)\n    let greenyellow;\n    let greenred;\n    let redyellow;\n    if (this.doubleupmode === true) {\n      greenyellow = Math.round(greenpossibilities/2)\n      greenred = Math.round(yellowpossibilities/2)\n      redyellow = Math.round(redpossibilities/2)\n    }\n    //randomly asigns red, green and yellow to different positions in an array\n    for (let i = 0; i < length; i++) {\n      let current: any = \"\"\n      let randnum = Math.round(Math.random()*(possibilities-1))\n      if (randnum < greenpossibilities) {\n        if (this.doubleupmode === true) {\n          let randnum = Math.round(Math.random()*greenpossibilities) + 1\n          if (randnum > greenyellow) {\n            current = [\"Yellow\", \"Green\"]\n          } else {\n            current = [\"Green\", \"Yellow\"]\n            greenyellow--\n          }\n        } else {\n          current = \"Green\"\n        }\n        greenpossibilities--\n      } else if (randnum < yellowpossibilities + greenpossibilities) {\n        if (this.doubleupmode === true) {\n          let randnum = Math.round(Math.random()*greenpossibilities) + 1\n          if (randnum > greenred) {\n            current = [\"Red\", \"Green\"]\n          } else {\n            current = [\"Green\", \"Red\"]\n            greenred--\n          }\n        } else {\n          current = \"Yellow\"\n        }\n        yellowpossibilities--\n      } else if (randnum < possibilities) {\n        if (this.doubleupmode === true) {\n          let randnum = Math.round(Math.random()*greenpossibilities)\n          if (randnum > redyellow) {\n            current = [\"Red\", \"Yellow\"]\n          } else {\n            current = [\"Yellow\", \"Red\"]\n            redyellow--\n          }\n        } else {\n        current = \"Red\"\n        }\n        redpossibilities--\n      }\n      possibilities--\n      if (this.doubleupmode) {\n        for (let item of current) {\n          possibilitiesarr.push(item)\n        }\n        this.possibilitiesall = possibilitiesarr.slice(0, possibilitiesarr.length)\n      } else {\n        possibilitiesarr.push(current)\n      }      \n    }\n    console.log(possibilitiesarr)\n    this.possibilities = possibilitiesarr\n  }\n\n  // creates a random color\n  getRandomColor() {\n    console.log(this.possibilities)\n    this.index++\n    this.current = this.possibilities.splice(0, 1)[0]\n\n    switch (this.current) {\n      case 'Green' :\n        this.currentGreen = this.green\n        break\n      case 'Yellow':\n        this.currentYellow = this.yellow\n        break\n      case 'Red': \n        this.currentRed = this.red\n        break\n    }\n\n  }\n\n  // starts the game and controls the intervals that lights are displayed\n  onStart() {\n    if (this.levels[this.level - 1].mode === \"double-up\") {\n      this.doubleupmode = true\n\n    } else {\n      this.doubleupmode = false\n    }\n    this.interval = this.levels[this.level - 1].interval\n    this.totallength = this.levels[this.level - 1].totallength\n    this.generateColors() \n    this.gameHasBegun = true\n    this.countdownTimerIsHidden = false\n    this.instructionsAreHidden = false\n    let countdown = setInterval(() => {\n      if (this.instructionsAreHidden === false) {\n        this.instructionsAreHidden = true\n      }\n      this.countdowntimer--\n      if (this.countdowntimer === 0) {\n        this.countdowntimer = \"Go!\"\n      }\n    }, 1000)\n    setTimeout(() => {\n      clearInterval(countdown)\n      this.countdownTimerIsHidden = true\n\n      this.timerfunc = setInterval(() => {\n        this.timer = this.timer + this.interval\n        console.log(this.timer)\n        if (this.timer > this.totallength) {\n          clearInterval(this.timerfunc)\n          console.log(this.correct, this.wrong)\n          this.endRound()\n        }\n        this.getRandomColor()\n        setTimeout(() => {\n          this.resetMatch()\n        },this.interval/2)\n      }, this.interval)\n    }, 4900)\n\n  }\n\n  // checks if the light is clicked when its supposed to or is clicked when its not suppossed to be clicked and records that\n  checkIfClicked() {\n    if (this.clicked === false) {\n      if (this.doubleupmode === true) {\n        let array = [this.possibilitiesall[this.index - 2], this.current]\n        console.log(array, this.colorneeded)\n        if (array[0] === this.colorneeded[0] && array[1] === this.colorneeded[1]) {\n          console.log('incorrect, not clicked')\n          this.wrong++\n        }\n      } else {\n        if (this.current === this.colorneeded) {\n          console.log('incorrect, not clicked')\n          this.wrong++\n        }\n      }\n    }\n  }\n\n  // ends the round and figures out the score and the levels\n  endRound() {\n    //score and levels here\n    this.index = 0\n    this.timer = 0\n    this.countdowntimer = 4\n    let currentscore = this.gameService.getScore(this.possibilitiesnumber, Math.round(this.wrong*1.5))\n    this.score = this.score + currentscore\n    if (this.excerciseMode) {\n\n      if (this.level === this.exlevels[1]) {\n        this.eventemitter.onRoundFinished({continue: true, score: this.score})\n      }\n      this.level++\n    } else {\n\n\n      let prevlevel = [this.level].slice(0,1)\n      console.log(this.score)\n      if (this.score > this.gameService.scoringconstant) {\n        this.level++\n        this.score = 0\n      }\n      this.gameService.storeLevelScore(this.gameno, this.score, this.level, this.excerciseMode, 120, this.wrong, currentscore, prevlevel[0])\n    }\n    this.onStart()\n  }\n\n  // resets the game to begin the next round\n  resetMatch() {\n    this.round++\n    console.log(this.round)\n    this.checkIfClicked()\n    this.current = \"\"\n    this.resetColor()\n    this.clicked = false\n  }\n\n  // turns all colors back to grey\n  resetColor() {\n    this.currentGreen = this.grey\n    this.currentRed = this.grey\n    this.currentYellow = this.grey\n  }\n\n  // what happens when something is clicked\n  onTap(color: string) {\n    if (this.clicked === false) {\n    if (this.doubleupmode === true) {\n      switch (color) {\n        case this.colorneeded[1]:\n          if (color === this.current) {\n            let previous = this.possibilitiesall[this.index - 2]\n            if (previous === this.colorneeded[0]) {\n              this.correct++\n              console.log('correct')\n            } else {\n              this.wrong++\n            }\n          } else {\n            this.wrong++\n          }\n          break\n        case \"\":\n          console.log('greyclicked')\n          break\n        default:\n          console.log('incorrect', this.current)\n          this.wrong++\n      }\n    } else {\n      switch (color) {\n        case this.colorneeded:\n          if (color === this.current) {\n            console.log('correct')\n            this.correct++\n          } else {\n            this.wrong++\n          }\n          this.current = \"\"\n          break\n        case \"\":\n          console.log('greyclicked')\n          break\n        default:\n          console.log('incorrect', this.current)\n          this.wrong++\n      }\n    }\n    this.resetColor()\n    }\n    this.clicked = true\n  }\n\n  // unsubscribes and clears the timer when the component is left\n  ionViewDidLeave() {\n    this.subscription.unsubscribe()\n    clearInterval(this.timerfunc)\n  }\n\n  // unsubscribes and clears the timer when the component is destroyed\n  ngOnDestroy() {\n    this.subscription.unsubscribe()\n    clearInterval(this.timerfunc)\n  }\n}\n","export default \".image {\\n  size: 10px;\\n}\\n\\n.round {\\n  width: 100px;\\n  height: 100px;\\n  border-radius: 50%;\\n}\\n\\n.text-large {\\n  font-weight: bold;\\n  font-size: 1.5in;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYWZmaWMtbGlnaHQucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksVUFBQTtBQUNKOztBQUVBO0VBQ0ksWUFBQTtFQUNBLGFBQUE7RUFDQSxrQkFBQTtBQUNKOztBQUVBO0VBQ0ksaUJBQUE7RUFDQSxnQkFBQTtBQUNKIiwiZmlsZSI6InRyYWZmaWMtbGlnaHQucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmltYWdlIHtcbiAgICBzaXplOiAxMHB4O1xufVxuXG4ucm91bmQge1xuICAgIHdpZHRoOiAxMDBweDtcbiAgICBoZWlnaHQ6IDEwMHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgfVxuXG4udGV4dC1sYXJnZSB7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAxLjVpbjtcbn0iXX0= */\";","export default \"<app-header [(gamenumber)]=\\\"gameno\\\" [(gameHasBegun)]=\\\"gameHasBegun\\\" ></app-header>\\n\\n<app-description [(gameHasBegun)]=\\\"gameHasBegun\\\" [(gameno)]=\\\"gameno\\\"></app-description>\\n\\n\\n<!--  the instructions that are shown at the top during the game-->\\n<div class=\\\"ion-text-center\\\" *ngIf=\\\"gameHasBegun && countdownTimerIsHidden\\\">\\n  <ion-label >{{ doubleupmode ? instructions.replace(\\\"blank\\\", colorneeded[0] + \\\" then \\\" + colorneeded[1]) : instructions.replace(\\\"blank\\\", colorneeded) }}</ion-label>\\n</div>\\n\\n<!-- blank ion content needed so UI doesn't get messed up -->\\n<ion-content *ngIf=\\\"!gameHasBegun && !excerciseMode\\\"></ion-content>\\n\\n<!--  instructions and timer that are shown at the start -->\\n<ion-content *ngIf=\\\"!countdownTimerIsHidden && gameHasBegun\\\" scroll-Y=\\\"disabled\\\">\\n  <ion-grid >\\n    <ion-row *ngIf=\\\"!instructionsAreHidden\\\">\\n      <ion-col class=\\\"ion-text-center\\\">\\n        <ion-label style=\\\"font-weight: bold; font-size: 0.5in\\\">{{ doubleupmode ? instructions.replace(\\\"blank\\\", colorneeded[0] + \\\" then \\\" + colorneeded[1]) : instructions.replace(\\\"blank\\\", colorneeded) }}</ion-label>\\n      </ion-col>\\n    </ion-row>\\n    <div style=\\\"display: flex; align-items: center; justify-content: center;\\\" *ngIf=\\\"instructionsAreHidden\\\">\\n      <ion-label class=\\\"text-large\\\">{{ countdowntimer }}</ion-label>\\n    </div>\\n  </ion-grid>\\n\\n</ion-content>\\n\\n<app-score *ngIf=\\\"gameHasBegun && countdownTimerIsHidden\\\" [(level)]=\\\"level\\\" [(score)]=\\\"score\\\"></app-score>\\n\\n<ion-content *ngIf=\\\"gameHasBegun && countdownTimerIsHidden\\\" scroll-Y=\\\"disabled\\\">\\n\\n<!-- The menu functions and testing is required -->\\n\\n  <!-- the traffic light itself -->\\n<ion-grid>\\n  <div style=\\\"display: flex; align-items: top; justify-content: center;\\\">\\n    <ion-card class=\\\"ion-text-center\\\" [ngStyle]=\\\"{'width': '150px'}\\\">\\n        <ion-row>\\n          <ion-col class=\\\"ion-text-center\\\">\\n            <ion-chip (click)=\\\"onTap('Red')\\\" class=\\\"round\\\" size=\\\"medium\\\" [ngStyle]=\\\"{'background-color': currentRed}\\\"></ion-chip>\\n          </ion-col>\\n        </ion-row>\\n        <ion-row>\\n          <ion-col class=\\\"ion-text-center\\\">\\n            <ion-chip (click)=\\\"onTap('Yellow')\\\" class=\\\"round\\\" size=\\\"medium\\\" [ngStyle]=\\\"{'background-color': currentYellow}\\\"></ion-chip>\\n          </ion-col>\\n        </ion-row>\\n        <ion-row>\\n          <ion-col class=\\\"ion-text-center\\\">\\n            <ion-chip (click)=\\\"onTap('Green')\\\" class=\\\"round\\\" size=\\\"medium\\\" [ngStyle]=\\\"{'background-color': currentGreen}\\\"></ion-chip>\\n          </ion-col>\\n        </ion-row>\\n    </ion-card>\\n  </div>      \\n</ion-grid>\\n</ion-content>\\n\\n<ion-footer>\\n  <app-menu [(gamenumber)]=\\\"gameno\\\" [(gameHasBegun)]=\\\"gameHasBegun\\\" ></app-menu>\\n  <app-start [(gameHasBegun)]=\\\"gameHasBegun\\\" [(gameno)]=\\\"gameno\\\"></app-start>\\n</ion-footer>\\n\\n\\n\";"]}