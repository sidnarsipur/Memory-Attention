{"version":3,"sources":["webpack:///src/app/games-list/digit-span/digit-span-routing.module.ts","webpack:///src/app/games-list/digit-span/digit-span.module.ts","webpack:///src/app/games-list/digit-span/digit-span.page.ts","webpack:///src/app/games-list/digit-span/digit-span.service.ts","webpack:///src/app/games-list/digit-span/digit-span.page.scss","webpack:///src/app/games-list/digit-span/digit-span.page.html"],"names":["routes","path","component","DigitSpanPage","DigitSpanPageRoutingModule","NgModule","imports","RouterModule","exports","DigitSpanPageModule","CommonModule","FormsModule","IonicModule","SharedModule","declarations","router","menu","animationCtrl","gameService","digitSpanService","eventemitter","alertCtrl","excerciseMode","numarray","gameHasBegun","paused","answer","wrongcount","wrong","lost","currentIndex","formIsHidden","correct","gameno","startButtonIsDisabled","subscription","Subscription","database","isFaded","gamename","getGames","name","getLevelScore","console","log","databaseemitter","subscribe","value","level","score","levels","animate","setTimeout","gameStateSubj","onStart","onEndGame","onRestart","onResume","onQuit","onPause","form","CurrentNumber","currNum","JSON","parse","presentAlert","number","stringify","pause","slice","length","scoreneeded","scoringconstant","create","header","getLevelandScore","message","alertmessage","buttons","text","role","handler","generateNumbers","startTimer","then","alert","present","timer","submitanswer","submitAnswer","clearTimer","onRoundFinished","storeLevelScore","wrongs","prevscore","prevlevel","clearLevels","unpause","navigate","unsubscribe","Router","MenuController","AnimationController","GameService","DigitSpanService","EventemitterService","AlertController","ViewChild","read","ElementRef","Input","Component","selector","template","animations","trigger","state","style","opacity","transition","numbersArray","levelExp","EventEmitter","answerarray","split","i","item","currentscore","getScore","join","push","randomNumber","splice","emit","runSeries","currentNumber","randomnum","Math","floor","random","Injectable","providedIn"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,UAAMA,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE,8CAAAC;AAFb,OADqB,CAAvB;;UAWaC,2BAA0B;AAAA;AAAA,O;;AAA1BA,iCAA0B,uDAJtC,+CAAAC,QAAA,EAAS;AACRC,eAAO,EAAE,CAAC,6CAAAC,YAAA,UAAsBP,MAAtB,CAAD,CADD;AAERQ,eAAO,EAAE,CAAC,6CAAAD,YAAD;AAFD,OAAT,CAIsC,GAA1BH,2BAA0B,CAA1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCMAK,oBAAmB;AAAA;AAAA,O;;AAAnBA,0BAAmB,uDAX/B,+CAAAJ,QAAA,EAAS;AACRC,eAAO,EAAE,CACP,6CAAAI,YADO,EAEP,4CAAAC,WAFO,EAGP,4CAAAC,WAHO,EAIP,wDAAAR,0BAJO,EAKP,mDAAAS,YALO,CADD;AAQRC,oBAAY,EAAE,CAAC,8CAAAX,aAAD,CARN;AASRK,eAAO,EAAE,CAAC,8CAAAL,aAAD;AATD,OAAT,CAW+B,GAAnBM,oBAAmB,CAAnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCEAN,cAAa;AAuBxB,+BACUY,MADV,EAEUC,IAFV,EAGUC,aAHV,EAIUC,WAJV,EAKUC,gBALV,EAMUC,YANV,EAOUC,SAPV,EAOoC;AAAA;;AAN1B,eAAAN,MAAA,GAAAA,MAAA;AACA,eAAAC,IAAA,GAAAA,IAAA;AACA,eAAAC,aAAA,GAAAA,aAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AACA,eAAAC,gBAAA,GAAAA,gBAAA;AACA,eAAAC,YAAA,GAAAA,YAAA;AACA,eAAAC,SAAA,GAAAA,SAAA;AA5Ba,eAAAC,aAAA,GAAgB,KAAhB;AAEvB,eAAAC,QAAA,GAAW,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,CAAX;AACA,eAAAC,YAAA,GAAe,KAAf;AACA,eAAAC,MAAA,GAAS,KAAT;AACA,eAAAC,MAAA,GAAiB,EAAjB;AACA,eAAAC,UAAA,GAAqB,CAArB;AACA,eAAAC,KAAA,GAAQ,KAAR;AACA,eAAAC,IAAA,GAAO,KAAP;AACA,eAAAC,YAAA,GAAuB,CAAvB;AACA,eAAAC,YAAA,GAAwB,KAAxB;AAGA,eAAAC,OAAA,GAAU,KAAV;AAEA,eAAAC,MAAA,GAAS,CAAT;AACA,eAAAC,qBAAA,GAAwB,KAAxB;AACA,eAAAC,YAAA,GAAe,IAAI,kCAAAC,YAAJ,EAAf;AACA,eAAAC,QAAA,GAAW,IAAI,kCAAAD,YAAJ,EAAX;AACA,eAAAE,OAAA,GAAkB,OAAlB;AAUO;;AA/BiB;AAAA;AAAA,iBAiCxB,oBAAW;AAAA;;AACT;AACA,iBAAKC,QAAL,GAAgB,KAAKrB,WAAL,CAAiBsB,QAAjB,GAA4B,CAA5B,EAA+BC,IAA/C;AACA,iBAAKvB,WAAL,CAAiBwB,aAAjB,CAA+B,KAAKT,MAApC,EAA4C,KAAKX,aAAjD;AACAqB,mBAAO,CAACC,GAAR,CAAY,KAAKtB,aAAjB,EAJS,CAMT;;AACA,iBAAKe,QAAL,GAAgB,KAAKjB,YAAL,CAAkByB,eAAlB,CAAkCC,SAAlC,CAA4C,UAAAC,KAAK,EAAI;AACnEJ,qBAAO,CAACC,GAAR,CAAYG,KAAZ;;AACA,kBAAIA,KAAK,CAACC,KAAV,EAAiB;AACf,qBAAI,CAAC7B,gBAAL,CAAsB6B,KAAtB,GAA8BD,KAAK,CAACC,KAApC;AACD;;AACD,kBAAID,KAAK,CAACE,KAAV,EAAiB;AACf,qBAAI,CAAC9B,gBAAL,CAAsB8B,KAAtB,GAA8BF,KAAK,CAACE,KAApC;AACD;;AACD,kBAAI,KAAI,CAAC3B,aAAL,KAAuB,IAA3B,EAAiC;AAC/B,qBAAI,CAACH,gBAAL,CAAsB6B,KAAtB,GAA8B,KAAI,CAACE,MAAL,CAAY,CAAZ,CAA9B;AACA,qBAAI,CAAC/B,gBAAL,CAAsB8B,KAAtB,GAA8B,CAA9B;AACD;AACF,aAZe,CAAhB,CAPS,CAqBT;;AACA,iBAAK9B,gBAAL,CAAsBgC,OAAtB,CAA8BL,SAA9B,CAAwC,UAAAC,KAAK,EAAI;AAC/C,kBAAIA,KAAK,KAAK,UAAd,EAA0B;AACxB;AACA;AACE;AACA;AACAK,0BAAU,CAAC,YAAM;AACf,uBAAI,CAACd,OAAL,GAAe,OAAf;AACD,iBAFS,EAEP,GAFO,CAAV,CALsB,CASxB;AACD;;AACD,kBAAIS,KAAK,KAAK,MAAd,EAAsB;AACpBK,0BAAU,CAAC,YAAM;AACf,uBAAI,CAACd,OAAL,GAAe,QAAf;AACD,iBAFS,EAEP,IAFO,CAAV;AAGD;AACF,aAjBD,EAtBS,CAyCT;;AACA,iBAAKH,YAAL,GAAoB,KAAKf,YAAL,CAAkBiC,aAAlB,CAAgCP,SAAhC,CAA0C,UAAAC,KAAK,EAAI;AACrEJ,qBAAO,CAACC,GAAR,CAAYG,KAAZ;;AACA,sBAAQA,KAAR;AACE,qBAAK,OAAL;AACE,uBAAI,CAACO,OAAL;;AACA;;AACF,qBAAK,SAAL;AACE,uBAAI,CAACpB,qBAAL,GAA6B,IAA7B;;AACA,uBAAI,CAACqB,SAAL;;AACAH,4BAAU,CAAC,YAAM;AACf,yBAAI,CAACI,SAAL;AACD,mBAFS,EAEP,GAFO,CAAV;AAGA;;AACF,qBAAK,QAAL;AACE,uBAAI,CAACC,QAAL;;AACA;;AACF,qBAAK,MAAL;AACE,uBAAI,CAACC,MAAL;;AACA;;AACF,qBAAK,OAAL;AACE,uBAAI,CAACC,OAAL;;AACA;;AACF,qBAAK,MAAL;AACE,uBAAI,CAACJ,SAAL;;AACA;AAtBJ;AAwBD,aA1BmB,CAApB,CA1CS,CAsET;;AACA,iBAAKpC,gBAAL,CAAsByC,IAAtB,CAA2Bd,SAA3B,CAAqC,UAAAC,KAAK,EAAI;AAC5C,kBAAIA,KAAK,KAAK,WAAd,EAA2B;AACzB,qBAAI,CAAChB,YAAL,GAAoB,IAApB;AACD;;AACD,kBAAIgB,KAAK,KAAK,UAAd,EAA0B;AACxB,qBAAI,CAAChB,YAAL,GAAoB,KAApB;AACA,qBAAI,CAACH,KAAL,GAAa,KAAb;AACA,qBAAI,CAACI,OAAL,GAAe,KAAf;AACD;AACF,aATD,EAvES,CAkFT;;AACA,iBAAKb,gBAAL,CAAsB0C,aAAtB,CAAoCf,SAApC,CAA8C,UAAAC,KAAK,EAAI;AACrD,mBAAI,CAACe,OAAL,GAAeC,IAAI,CAACC,KAAL,CAAWjB,KAAX,CAAf;AACAK,wBAAU,CAAC,YAAM;AACf,qBAAI,CAACd,OAAL,GAAe,QAAf;AACD,eAFS,EAEP,GAFO,CAAV;AAGAc,wBAAU,CAAC,YAAM;AACf,qBAAI,CAACd,OAAL,GAAe,OAAf;AACD,eAFS,EAEP,IAFO,CAAV;AAGD,aARD;AAUD,WA9HuB,CAgIxB;;AAhIwB;AAAA;AAAA,iBAiIxB,4BAAmB;AACjB,mBAAO,CAAC,KAAKnB,gBAAL,CAAsB6B,KAAvB,EAA8B,KAAK7B,gBAAL,CAAsB8B,KAApD,CAAP;AACD,WAnIuB,CAqIxB;;AArIwB;AAAA;AAAA,iBAsIxB,mBAAU;AACRN,mBAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,iBAAKqB,YAAL;AACD,WAzIuB,CA2IxB;;AA3IwB;AAAA;AAAA,iBA4IxB,gBAAOC,MAAP,EAAuB;AACrB,iBAAKxC,MAAL,GAAc,KAAKA,MAAL,GAAcqC,IAAI,CAACI,SAAL,CAAeD,MAAf,CAA5B;AACD,WA9IuB,CAgJxB;;AAhJwB;AAAA;AAAA,iBAiJxB,mBAAU;AACR,iBAAKzC,MAAL,GAAc,IAAd;AACA,iBAAKN,gBAAL,CAAsBiD,KAAtB;AACD,WApJuB,CAsJxB;;AAtJwB;AAAA;AAAA,iBAuJxB,yBAAgB;AACd,gBAAG,KAAK1C,MAAL,KAAgB,EAAnB,EAAuB;AACrB,qBAAO,IAAP;AACD,aAFD,MAEO;AACL,qBAAO,KAAP;AACD;AACF,WA7JuB,CA+JxB;;AA/JwB;AAAA;AAAA,iBAgKxB,oBAAW;AACT,iBAAKA,MAAL,GAAc,KAAKA,MAAL,CAAY2C,KAAZ,CAAkB,CAAlB,EAAqB,KAAK3C,MAAL,CAAY4C,MAAZ,GAAqB,CAA1C,CAAd,CADS,CAET;AACD,WAnKuB,CAqKxB;;AArKwB;AAAA;AAAA,iBAsKxB,mBAAU;AACR,iBAAK5C,MAAL,GAAc,EAAd;AACD,WAxKuB,CA0KxB;;AA1KwB;AAAA;AAAA,iBA2KxB,wBAAe;AAAA;;AACb,gBAAI6C,WAAW,GAAG,KAAKrD,WAAL,CAAiBsD,eAAjB,GAAmC,KAAKrD,gBAAL,CAAsB8B,KAA3E;AACA,iBAAK5B,SAAL,CAAeoD,MAAf,CAAsB;AACpBC,oBAAM,EAAE,YAAY,KAAKC,gBAAL,GAAwB,CAAxB,CADA;AAEpBC,qBAAO,EAAE,KAAKzD,gBAAL,CAAsB0D,YAAtB,GAAqC,WAArC,GAAmDN,WAAnD,GAAiE,kCAFtD;AAGpBO,qBAAO,EAAE,CAAC;AACRC,oBAAI,EAAE,UADE;AAERC,oBAAI,EAAE,UAFE;AAGRC,uBAAO,EAAE,mBAAM;AACb,wBAAI,CAAC9D,gBAAL,CAAsB+D,eAAtB;;AACA,wBAAI,CAAC1D,YAAL,GAAoB,IAApB;;AACA,wBAAI,CAACN,WAAL,CAAiBiE,UAAjB;AACH;AAPS,eAAD;AAHW,aAAtB,EAUQC,IAVR,CAUa,UAAAC,KAAK;AAAA,qBAAGA,KAAK,CAACC,OAAN,EAAH;AAAA,aAVlB;AAWD,WAxLuB,CA0LxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAnNwB;AAAA;AAAA,iBAoNxB,0BAAiB;AACf,gBAAIC,KAAK,GAAG,KAAKrE,WAAL,CAAiBqE,KAA7B;AACA,gBAAIC,YAAY,GAAG,KAAKrE,gBAAL,CAAsBsE,YAAtB,CAAmC,KAAK/D,MAAxC,CAAnB;AACA,iBAAKR,WAAL,CAAiBwE,UAAjB;;AACA,gBAAI,KAAKpE,aAAL,KAAuB,IAA3B,EAAiC;AAC/B,mBAAKH,gBAAL,CAAsB6B,KAAtB,GAA8B,KAAK7B,gBAAL,CAAsB6B,KAAtB,GAA8B,CAA5D;;AACA,kBAAI,KAAK7B,gBAAL,CAAsB6B,KAAtB,GAA8B,KAAKE,MAAL,CAAY,CAAZ,CAAlC,EAAkD;AAChD,qBAAK9B,YAAL,CAAkBuE,eAAlB,CAAkC;AAAC,8BAAU,IAAX;AAAiB1C,uBAAK,EAAE,KAAK9B,gBAAL,CAAsB8B;AAA9C,iBAAlC;AACD,eAFD,MAGK;AACH,qBAAKgB,YAAL;AACD;AACF,aARD,MAQO;AAEL,mBAAK/C,WAAL,CAAiB0E,eAAjB,CAAiC,KAAK3D,MAAtC,EAA8C,KAAKd,gBAAL,CAAsB8B,KAApE,EAA2E,KAAK9B,gBAAL,CAAsB6B,KAAjG,EAAwG,KAAK1B,aAA7G,EAA4HiE,KAAK,GAAC,IAAlI,EAAwIC,YAAY,CAACK,MAArJ,EAA6JL,YAAY,CAACM,SAA1K,EAAqLN,YAAY,CAACO,SAAlM;AACA,mBAAK9B,YAAL;AACD;;AACDtB,mBAAO,CAACC,GAAR,CAAY,KAAKlB,MAAjB;AACA,iBAAKA,MAAL,GAAc,EAAd,CAlBe,CAmBf;AACE;AACA;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,WAxPuB,CA0PxB;;AA1PwB;AAAA;AAAA,iBA2PxB,qBAAY;AACV,iBAAKF,YAAL,GAAoB,KAApB;AACA,iBAAKQ,OAAL,GAAe,KAAf;AACA,iBAAKJ,KAAL,GAAa,KAAb;AACA,iBAAKD,UAAL,GAAkB,CAAlB;AACA,iBAAKR,gBAAL,CAAsB6E,WAAtB;AACD,WAjQuB,CAmQxB;;AAnQwB;AAAA;AAAA,iBAoQxB,kBAAS;AACP,iBAAKxE,YAAL,GAAoB,KAApB;AACA,iBAAKL,gBAAL,CAAsB8E,OAAtB;AACA,iBAAKxE,MAAL,GAAc,KAAd;AACAkB,mBAAO,CAACC,GAAR,CAAY,MAAZ;AACA,iBAAKW,SAAL;AACA,iBAAKxC,MAAL,CAAYmF,QAAZ,CAAqB,CAAC,OAAD,CAArB;AACD,WA3QuB,CA6QxB;;AA7QwB;AAAA;AAAA,iBA8QxB,qBAAY;AAAA;;AACV9C,sBAAU,CAAC,YAAM;AACf,oBAAI,CAACE,OAAL;;AACA,oBAAI,CAACpB,qBAAL,GAA6B,KAA7B;AACD,aAHS,EAGP,GAHO,CAAV;AAID,WAnRuB,CAqRxB;;AArRwB;AAAA;AAAA,iBAsRxB,oBAAW,CAEV,CAxRuB,CA0RxB;;AA1RwB;AAAA;AAAA,iBA2RxB,oBAAW;AACT,iBAAKT,MAAL,GAAc,KAAd;AACA,iBAAKN,gBAAL,CAAsB8E,OAAtB;AACD,WA9RuB,CAgSxB;AACA;AACA;AACA;AACA;AAEA;;AAtSwB;AAAA;AAAA,iBAuSxB,uBAAc;AACZ,iBAAK9D,YAAL,CAAkBgE,WAAlB;AACA,iBAAK9D,QAAL,CAAc8D,WAAd,GAFY,CAGZ;AACA;AACA;AACA;AACD,WA9SuB,CAgTxB;;AAhTwB;AAAA;AAAA,iBAiTxB,2BAAkB;AAChB,iBAAKhE,YAAL,CAAkBgE,WAAlB;AACA,iBAAK9D,QAAL,CAAc8D,WAAd;AACD;AApTuB;;AAAA;AAAA,S;;;;gBAvBjB,6CAAAC;;gBACA,4CAAAC;;gBAAgB,4CAAAC;;gBAChB,kDAAAC;;gBACA,iDAAAC;;gBACA,0DAAAC;;gBAHqC,4CAAAC;;;;;;gBAuB3C,2CAAAC,S;AAAS,iBAAC,eAAD,EAAkB;AAAEC,gBAAI,EAAE,2CAAAC,UAAR;AAAoB,sBAAQ;AAA5B,WAAlB;;;gBACT,2CAAAC,K;AAAK,iBAAC,cAAD;;;gBACL,2CAAAA,K;AAAK,iBAAC,QAAD;;;AAHK3G,oBAAa,uDAfzB,+CAAA4G,SAAA,EAAU;AACTC,gBAAQ,EAAE,gBADD;AAETC,gBAAQ,EAAR,wEAFS;AAITC,kBAAU,EAAE,CACV,sDAAAC,OAAA,EAAQ,UAAR,EAAoB,CAClB,sDAAAC,KAAA,EAAM,QAAN,EAAgB,sDAAAC,KAAA,EAAM;AAACC,iBAAO,EAAE;AAAV,SAAN,CAAhB,CADkB,EAElB,sDAAAC,UAAA,EAAW,YAAX,EAAyB,CAAC,sDAAApE,OAAA,EAAQ,GAAR,CAAD,CAAzB,CAFkB,EAGlB,sDAAAoE,UAAA,EAAW,aAAX,EAA0B,CAAC,sDAAApE,OAAA,EAAQ,GAAR,CAAD,CAA1B,CAHkB,EAIlB,sDAAAiE,KAAA,EAAM,OAAN,EAAe,sDAAAC,KAAA,EAAM;AAACC,iBAAO,EAAE;AAAV,SAAN,CAAf,CAJkB,CAApB,CADU,CAJH;;AAAA,OAAV,CAeyB,GAAbnH,cAAa,CAAb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UClBAqG,iBAAgB;AAe3B,kCAAoBtF,WAApB,EAA8C;AAAA;;AAA1B,eAAAA,WAAA,GAAAA,WAAA;AAdpB,eAAAsG,YAAA,GAAyB,EAAzB;AACA,eAAAxE,KAAA,GAAgB,CAAhB;AACA,eAAAyE,QAAA,GAAmB,CAAnB;AAEA,eAAAhG,MAAA,GAAkB,KAAlB;AAEA,eAAAwB,KAAA,GAAgB,CAAhB;AAEA,eAAA4B,YAAA,GAAuB,EAAvB;AAEA,eAAA1B,OAAA,GAAU,IAAI,2CAAAuE,YAAJ,EAAV;AACA,eAAA7D,aAAA,GAAgB,IAAI,2CAAA6D,YAAJ,EAAhB;AACA,eAAA9D,IAAA,GAAO,IAAI,2CAAA8D,YAAJ,EAAP;AAEiD,SAftB,CAiB3B;;;AAjB2B;AAAA;AAAA,iBAkB3B,sBAAahG,MAAb,EAAqB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAIqE,SAAS,GAAG,CAAC,KAAK/C,KAAN,EAAaqB,KAAb,CAAmB,CAAnB,EAAsB,CAAtB,CAAhB;AACA,gBAAIsD,WAAW,GAAGjG,MAAM,CAACkG,KAAP,CAAa,EAAb,CAAlB;AACA,gBAAI/B,MAAM,GAAG,CAAb;AACA,gBAAIgC,CAAC,GAAG,CAAR;AACAlF,mBAAO,CAACC,GAAR,CAAY+E,WAAZ,EAAyBjG,MAAzB;;AAbmB,uDAcF,KAAK8F,YAdH;AAAA;;AAAA;AAcnB,kEAAoC;AAAA,oBAA3BM,IAA2B;;AAClC,oBAAI/D,IAAI,CAACI,SAAL,CAAe2D,IAAf,MAAyBH,WAAW,CAACE,CAAD,CAAxC,EAA6C;AAC3ChC,wBAAM;AACP;;AACDgC,iBAAC;AACF;AAnBkB;AAAA;AAAA;AAAA;AAAA;;AAoBnB,gBAAIE,YAAY,GAAG,KAAK7G,WAAL,CAAiB8G,QAAjB,CAA0B,KAAKR,YAAL,CAAkBlD,MAA5C,EAAoDuB,MAApD,CAAnB;AACA,iBAAK5C,KAAL,GAAa,KAAKA,KAAL,GAAa8E,YAA1B;;AACA,gBAAI,KAAK9E,KAAL,IAAc,KAAK/B,WAAL,CAAiBsD,eAAnC,EAAoD;AAClD,mBAAKxB,KAAL;AACA,mBAAKC,KAAL,GAAa,CAAb;AACD;;AAED,gBAAI4C,MAAM,GAAG,CAAb,EAAgB;AACd,mBAAKhB,YAAL,GAAoB,4BAA4B,KAAK2C,YAAL,CAAkBS,IAAlB,CAAuB,EAAvB,CAA5B,GAAyD,IAA7E;AACD,aAFD,MAGK;AACH,mBAAKpD,YAAL,GAAoB,WAApB;AACD;;AACD,mBAAO;AAACgB,oBAAM,EAAEA,MAAT;AAAiBC,uBAAS,EAAEiC,YAA5B;AAA0ChC,uBAAS,EAAEA,SAAS,CAAC,CAAD;AAA9D,aAAP;AACD,WApD0B,CAsD3B;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AA9D2B;AAAA;AAAA,iBA+D3B,uBAAc;AACZ,iBAAK/C,KAAL,GAAa,CAAb;AACA,iBAAKyE,QAAL,GAAgB,CAAhB;AACA,iBAAKD,YAAL,GAAoB,EAApB;AACD,WAnE0B,CAqE3B;;AArE2B;AAAA;AAAA,iBAsE3B,2BAAkB;AAChB,iBAAKA,YAAL,GAAoB,EAApB;;AACA,iBAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK7E,KAAL,GAAa,CAAjC,EAAoC6E,CAAC,EAArC,EAAyC;AACvC,mBAAKL,YAAL,CAAkBU,IAAlB,CAAuB,KAAKC,YAAL,EAAvB;;AACA,kBAAI,KAAKX,YAAL,CAAkBK,CAAlB,MAAyB,KAAKL,YAAL,CAAkBK,CAAC,GAAG,CAAtB,CAA7B,EAAuD;AACrD,qBAAKL,YAAL,CAAkBY,MAAlB,CAAyBP,CAAzB;AACAA,iBAAC;AACF;AACF;;AACD,iBAAKjE,IAAL,CAAUyE,IAAV,CAAe,WAAf;AACA,iBAAKR,CAAL,GAAS,CAAT;AACA,iBAAKS,SAAL;AACD,WAlF0B,CAoF3B;;AApF2B;AAAA;AAAA,iBAqF3B,qBAAY;AAAA;;AACV,gBAAI,KAAK7G,MAAL,KAAgB,IAApB,EAA0B;AACxB,kBAAI,KAAKoG,CAAL,GAAS,KAAK7E,KAAL,GAAa,CAA1B,EAA6B;AAC7B;AACA,qBAAKuF,aAAL,GAAqB,KAAKf,YAAL,CAAkB,KAAKK,CAAvB,CAArB;AACA,qBAAKhE,aAAL,CAAmBwE,IAAnB,CAAwBtE,IAAI,CAACI,SAAL,CAAe,KAAKoE,aAApB,CAAxB,EAH6B,CAI7B;AACA;;AACAnF,0BAAU,CAAC,YAAM;AACf,wBAAI,CAACyE,CAAL;;AACA,wBAAI,CAACS,SAAL;;AACA;AACD,iBAJS,EAIP,IAJO,CAAV;AAKD,eAXC,MAWK;AACL;AACAlF,0BAAU,CAAC,YAAM;AACf,wBAAI,CAACQ,IAAL,CAAUyE,IAAV,CAAe,UAAf;AACD,iBAFS,EAEP,GAFO,CAAV;AAGD;AACA;AACF,WAzG0B,CA2G3B;;AA3G2B;AAAA;AAAA,iBA4G3B,wBAAe;AACb,gBAAIG,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAhB;AACA,mBAAOH,SAAP;AACD,WA/G0B,CAiH3B;;AAjH2B;AAAA;AAAA,iBAkH3B,iBAAQ;AACN,iBAAK/G,MAAL,GAAc,IAAd;AACD,WApH0B,CAsH3B;;AAtH2B;AAAA;AAAA,iBAuH3B,mBAAU;AACR,iBAAKA,MAAL,GAAc,KAAd;AACA,iBAAK6G,SAAL;AACD;AA1H0B;;AAAA;AAAA,S;;;;gBALpB,kDAAA/B;;;;AAKIC,uBAAgB,uDAH5B,+CAAAoC,UAAA,EAAW;AACVC,kBAAU,EAAE;AADF,OAAX,CAG4B,GAAhBrC,iBAAgB,CAAhB;;;;;;;;;;;;;;;ACNb;;;AAAA,uCAAe,i3BAAf;;;;;;;;;;;;;;;ACAA;;;AAAA,uCAAe,2jIAAf","file":"default-src_app_games-list_digit-span_digit-span_module_ts-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DigitSpanPage } from './digit-span.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DigitSpanPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DigitSpanPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { DigitSpanPageRoutingModule } from './digit-span-routing.module';\n\nimport { DigitSpanPage } from './digit-span.page';\nimport { SharedModule } from '../../shared/shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    DigitSpanPageRoutingModule,\n    SharedModule\n  ],\n  declarations: [DigitSpanPage],\n  exports: [DigitSpanPage],\n})\nexport class DigitSpanPageModule {}\n","import { Component, OnInit, ViewChild, ElementRef, Input, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { MenuController, AnimationController, AlertController } from '@ionic/angular';\nimport { GameService } from '../../shared/game.service';\nimport { DigitSpanService } from './digit-span.service';\nimport { EventemitterService } from '../../shared/eventemitter.service';\nimport { Subscription } from 'rxjs';\nimport { trigger, style, state, animate, transition } from '@angular/animations';\n\n@Component({\n  selector: 'app-digit-span',\n  templateUrl: './digit-span.page.html',\n  styleUrls: ['./digit-span.page.scss'],\n  animations: [\n    trigger('cardFade', [\n      state('bright', style({opacity: 1})),\n      transition('* => faded', [animate(900)]),\n      transition('* => bright', [animate(500)]),\n      state('faded', style({opacity: 0}))\n    ])\n  ]\n})\n\n\nexport class DigitSpanPage implements OnInit, OnDestroy {\n  @ViewChild('currentNumber', { read: ElementRef, static: true}) currentNum: ElementRef;\n  @Input('excerciseSet') excerciseMode = false;\n  @Input('levels') levels;\n  numarray = [1,2,3,4,5,6,7,8,9]\n  gameHasBegun = false;\n  paused = false;\n  answer: string = '';\n  wrongcount: number = 0;\n  wrong = false;\n  lost = false;\n  currentIndex: number = 0;\n  formIsHidden: boolean = false;\n  numbersRemembered: number;\n  gamename: string;\n  correct = false;\n  currNum: string;\n  gameno = 0;\n  startButtonIsDisabled = false;\n  subscription = new Subscription();\n  database = new Subscription();\n  isFaded: string = 'faded';\n\n  constructor(\n    private router: Router,\n    private menu: MenuController,\n    private animationCtrl: AnimationController,\n    private gameService: GameService,\n    private digitSpanService: DigitSpanService,\n    private eventemitter: EventemitterService,\n    private alertCtrl: AlertController,\n    ) { }\n\n  ngOnInit() {\n    // Setup for game getting information from gameservice\n    this.gamename = this.gameService.getGames()[0].name\n    this.gameService.getLevelScore(this.gameno, this.excerciseMode)\n    console.log(this.excerciseMode)\n\n    // gets any pre-existing level and score information from database\n    this.database = this.eventemitter.databaseemitter.subscribe(value => {\n      console.log(value)\n      if (value.level) {\n        this.digitSpanService.level = value.level\n      }\n      if (value.score) {\n        this.digitSpanService.score = value.score\n      }\n      if (this.excerciseMode === true) {\n        this.digitSpanService.level = this.levels[0]\n        this.digitSpanService.score = 0\n      }\n    })\n\n    // call from the service to animate the number\n    this.digitSpanService.animate.subscribe(value => {\n      if (value === 'brighten') {\n        // this.brighten()\n        // setTimeout(() => {\n          // this.isFaded = 'bright'\n          // console.log('bright') \n          setTimeout(() => {\n            this.isFaded = 'faded'\n          }, 100)   \n    \n        // }, 150)\n      }\n      if (value === 'fade') {\n        setTimeout(() => {\n          this.isFaded = 'bright'\n        }, 1000)\n      }\n    })\n\n    // for the menu functions from the start component\n    this.subscription = this.eventemitter.gameStateSubj.subscribe(value => {\n      console.log(value)\n      switch (value) {\n        case 'start': \n          this.onStart()\n          break\n        case 'restart':\n          this.startButtonIsDisabled = true\n          this.onEndGame()\n          setTimeout(() => {\n            this.onRestart()\n          }, 700)\n          break\n        case 'resume':\n          this.onResume()\n          break\n        case 'quit':\n          this.onQuit()\n          break\n        case 'pause':\n          this.onPause()\n          break\n        case 'stop':\n          this.onEndGame()\n          break\n      }\n    })\n\n    // emitter that controls when the form with the selecting numbers is displayed or not\n    this.digitSpanService.form.subscribe(value => {\n      if (value === 'disappear') {\n        this.formIsHidden = true\n      }\n      if (value === 'reappear') {\n        this.formIsHidden = false\n        this.wrong = false\n        this.correct = false\n      }\n    })\n\n    // Gets the number from the service\n    this.digitSpanService.CurrentNumber.subscribe(value => {\n      this.currNum = JSON.parse(value)\n      setTimeout(() => {\n        this.isFaded = 'bright'\n      }, 100)   \n      setTimeout(() => {\n        this.isFaded = 'faded'\n      }, 1000)\n    })\n\n  }\n\n  // just returns level and score from the service\n  getLevelandScore() {\n    return [this.digitSpanService.level, this.digitSpanService.score]\n  }\n\n  // starts the game when the button is clicked\n  onStart() {\n    console.log(\"digitspanstart\")\n    this.presentAlert()\n  }\n\n  // takes the answer and places the next number that is input to the end\n  addNum(number: number) {\n    this.answer = this.answer + JSON.stringify(number)\n  }\n\n  // pauses the game (idk if this works)\n  onPause() {\n    this.paused = true;\n    this.digitSpanService.pause();\n  }\n  \n  // disables the submit button if no answer is there\n  disableSubmit() {\n    if(this.answer === '') {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  // removes a number from the answer\n  onDelete() {\n    this.answer = this.answer.slice(0, this.answer.length - 1)\n    //delete\n  }\n\n  // resets the answer\n  onReset() {\n    this.answer = ''\n  }\n\n  // starts the game and shows the popup\n  presentAlert() {\n    let scoreneeded = this.gameService.scoringconstant - this.digitSpanService.score\n    this.alertCtrl.create({\n      header: 'Level: ' + this.getLevelandScore()[0],\n      message: this.digitSpanService.alertmessage + 'You need ' + scoreneeded + ' points to go to the next level.',\n      buttons: [{\n        text: 'Continue',\n        role: 'Continue',\n        handler: () => {\n          this.digitSpanService.generateNumbers()\n          this.gameHasBegun = true;\n          this.gameService.startTimer()\n      }}]}).then(alert=> alert.present())\n  }\n\n  // other type of animation\n  // fade(finalopacity: string, startopacity) {\n  //   const fade = this.animationCtrl.create()\n  //   .addElement(this.currentNum.nativeElement)\n  //   .duration(600)\n  //   .iterations(1)\n  //   .fromTo('opacity', startopacity, finalopacity);\n  //   fade.play()\n  // }\n\n  // brighten() {\n  //   const brighten = this.animationCtrl.create()\n  //   .addElement(this.currentNum.nativeElement)\n  //   .duration(900)\n  //   .iterations(1)\n  //   .fromTo('opacity', '0.05', '1');\n  //   brighten.play()\n  // }\n\n  // generates a random number from 1-9 (legacy)\n  // randomNumber() {\n  //   let randomnum = Math.floor(Math.random() * 9)\n  //   return randomnum\n  // }\n\n  // the timer is stopped and the level and score are figured out when the answer is submitted\n  onSubmitAnswer() {\n    let timer = this.gameService.timer\n    let submitanswer = this.digitSpanService.submitAnswer(this.answer)\n    this.gameService.clearTimer()\n    if (this.excerciseMode === true) {\n      this.digitSpanService.level = this.digitSpanService.level + 1\n      if (this.digitSpanService.level > this.levels[1]) {\n        this.eventemitter.onRoundFinished({continue: true, score: this.digitSpanService.score})\n      }\n      else {\n        this.presentAlert()\n      }\n    } else {\n\n      this.gameService.storeLevelScore(this.gameno, this.digitSpanService.score, this.digitSpanService.level, this.excerciseMode, timer/1000, submitanswer.wrongs, submitanswer.prevscore, submitanswer.prevlevel)\n      this.presentAlert()\n    }\n    console.log(this.answer)\n    this.answer = ''\n    // if (submitReturned === true) {\n      // this.correct = true;\n      // this.wrongcount = 0\n      // this.wrong = false\n    // } \n    // if (submitReturned === false) {\n    //   this.correct = false\n    //   this.wrongcount++;\n    //   this.wrong = true;\n    //   let endgame = this.digitSpanService.checkWrongs(this.wrongcount)\n    //   if (endgame) {\n    //     console.log(endgame)\n    //     this.lost = true\n    //     this.numbersRemembered = endgame - 1\n    //     this.onEndGame()\n    //   }\n    // }\n  }\n\n  // ends the game\n  onEndGame() {\n    this.gameHasBegun = false;\n    this.correct = false\n    this.wrong = false;\n    this.wrongcount = 0;\n    this.digitSpanService.clearLevels()\n  }\n\n  // quits to the home\n  onQuit() {\n    this.gameHasBegun = false;\n    this.digitSpanService.unpause();\n    this.paused = false;\n    console.log('quit')\n    this.onEndGame();\n    this.router.navigate(['/home']);\n  }\n\n  // restarts the game\n  onRestart() {\n    setTimeout(() => {\n      this.onStart()\n      this.startButtonIsDisabled = false\n    }, 300)\n  }\n\n  // maybe the function is to be added???\n  getColor() {\n    \n  }\n\n  // resumes the game\n  onResume() {\n    this.paused = false\n    this.digitSpanService.unpause();\n  }\n\n  // closes the menu in other words it unpauses the game (legacy)\n  // onMenuClosed() {\n  //     this.paused = false;\n  //     this.digitSpanService.unpause();\n  // }\n\n  // unsubscribes from subscriptions when the component is destroyed\n  ngOnDestroy() {\n    this.subscription.unsubscribe()\n    this.database.unsubscribe()\n    // this.eventemitter.gameState.unsubscribe()\n    // this.digitSpanService.animate.unsubscribe()\n    // this.digitSpanService.form.unsubscribe()\n    // this.digitSpanService.CurrentNumber.unsubscribe()\n  }\n\n  // unsubscribes when the user leaves the screen\n  ionViewDidLeave() {\n    this.subscription.unsubscribe()\n    this.database.unsubscribe()\n  }\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { GameService } from '../../shared/game.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DigitSpanService {\n  numbersArray: number[] = [];\n  level: number = 1;\n  levelExp: number = 1;\n  currentNumber: number;\n  paused: boolean = false;\n  pausedi: number;\n  score: number = 0\n  i: number;\n  alertmessage: string = \"\";\n\n  animate = new EventEmitter<string>(); \n  CurrentNumber = new EventEmitter<string>();\n  form = new EventEmitter<string>();\n\n  constructor(private gameService: GameService) { }\n\n  // deals with level and score when the answer is submitted\n  submitAnswer(answer) {\n    // if (+answer === +this.numbersArray.join(\"\")) { \n    //   this.checkLevel()\n    //   return true;\n    // }\n    // else {\n    //   this.levelExp = 1\n    //   return false;\n    // }\n    let prevlevel = [this.level].slice(0, 1)\n    let answerarray = answer.split(\"\")\n    let wrongs = 0\n    let i = 0\n    console.log(answerarray, answer)\n    for (let item of this.numbersArray) {\n      if (JSON.stringify(item) !== answerarray[i]) {\n        wrongs++\n      }\n      i++\n    }\n    let currentscore = this.gameService.getScore(this.numbersArray.length, wrongs)\n    this.score = this.score + currentscore\n    if (this.score >= this.gameService.scoringconstant) {\n      this.level++\n      this.score = 0\n    }\n\n    if (wrongs > 0) {\n      this.alertmessage = \"The correct answer was \" + this.numbersArray.join(\"\") + \". \"\n    }\n    else {\n      this.alertmessage = \"Correct! \"\n    }\n    return {wrongs: wrongs, prevscore: currentscore, prevlevel: prevlevel[0]}\n  }\n\n  // checkWrongs(wrongcount) {\n  //   if (wrongcount === 2) {\n  //     return this.level\n  //   } else {\n  //     this.generateNumbers();\n  //   }\n  // }\n\n  // clears the levels\n  clearLevels() {\n    this.level = 1\n    this.levelExp = 1\n    this.numbersArray = []\n  }\n\n  // creates the random numbers\n  generateNumbers() {\n    this.numbersArray = []\n    for (let i = 0; i < this.level + 2; i++) {\n      this.numbersArray.push(this.randomNumber())\n      if (this.numbersArray[i] === this.numbersArray[i - 1]) {\n        this.numbersArray.splice(i)\n        i--\n      }\n    }\n    this.form.emit('disappear')\n    this.i = 0\n    this.runSeries()\n  }\n\n  // runs the game it has the info for when to animate, measures for pause, and what happens when the numbers are done\n  runSeries() {\n    if (this.paused !== true) {\n      if (this.i < this.level + 2) {\n      // this.animate.emit('fade')\n      this.currentNumber = this.numbersArray[this.i]\n      this.CurrentNumber.emit(JSON.stringify(this.currentNumber))\n      // this.animate.emit('brighten')\n      // this.animate.emit('fade')\n      setTimeout(() => {\n        this.i++  \n        this.runSeries()\n        return        \n      }, 2000)\n    } else {\n      // this.animate.emit('fade')\n      setTimeout(() => {\n        this.form.emit('reappear')\n      }, 600)\n    }\n    }\n  }\n\n  // creates a random number from 1-9\n  randomNumber() {\n    let randomnum = Math.floor(Math.random() * 9)\n    return randomnum\n  }\n\n  // pauses the game\n  pause() {\n    this.paused = true;\n  }\n\n  // unpauses the game\n  unpause() {\n    this.paused = false;\n    this.runSeries()\n  }\n}\n\n","export default \".text-large {\\n  font-weight: bold;\\n  font-size: 1.5in;\\n}\\n\\n.shadow {\\n  font-weight: \\\"Bold\\\";\\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\\n  border-radius: 20px;\\n  text-transform: capitalize;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpZ2l0LXNwYW4ucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksaUJBQUE7RUFDQSxnQkFBQTtBQUNKOztBQUVBO0VBRUksbUJBQUE7RUFFQSwyQ0FBQTtFQUNBLG1CQUFBO0VBQ0EsMEJBQUE7QUFESiIsImZpbGUiOiJkaWdpdC1zcGFuLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi50ZXh0LWxhcmdlIHtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBmb250LXNpemU6IDEuNWluO1xufVxuXG4uc2hhZG93e1xuICAgIC8vIGZvbnQtZmFtaWx5OiAnTGF0by1MaWdodCc7XG4gICAgZm9udC13ZWlnaHQ6ICdCb2xkJztcbiAgICBcbiAgICBib3gtc2hhZG93OiAwcHggNHB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMjUpO1xuICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XG59Il19 */\";","export default \"<app-header [(gamenumber)]=\\\"gameno\\\" [(gameHasBegun)]=\\\"gameHasBegun\\\" ></app-header>\\n\\n<app-description [(gameHasBegun)]=\\\"gameHasBegun\\\" [(gameno)]=\\\"gameno\\\"></app-description>\\n\\n<app-score *ngIf=\\\"gameHasBegun\\\" [(level)]=\\\"getLevelandScore()[0]\\\" [(score)]=\\\"getLevelandScore()[1]\\\"></app-score>\\n\\n<!-- This game is mostly done except for menu functions testing and also get color might be added -->\\n\\n<!-- is needed because UI gets messed up when there is no ion content -->\\n<ion-content *ngIf=\\\"!gameHasBegun && !excerciseMode\\\"></ion-content>\\n\\n<ion-content *ngIf=\\\"gameHasBegun\\\">\\n  <!-- <ion-list *ngIf=\\\"gameHasBegun && correct || wrong\\\">\\n    <ion-item color=\\\"danger\\\" *ngIf=\\\"wrong\\\">\\n      <ion-label class=\\\"ion-text-center\\\">Incorrect Answer!</ion-label>\\n    </ion-item>\\n    <ion-item color=\\\"success\\\" *ngIf=\\\"correct\\\" >\\n      <ion-label class=\\\"ion-text-center\\\" >Good Job! Correct Answer!</ion-label>\\n    </ion-item>\\n  </ion-list> -->\\n  <!-- <form #f (ngSubmit)=\\\"onSubmitAnswer(); f.reset()\\\" *ngIf=\\\"gameHasBegun && !formIsHidden\\\">\\n    <ion-grid>\\n      <ion-row>\\n        <ion-col> \\n        </ion-col>\\n      </ion-row>\\n      <div class=\\\"form-group\\\">\\n        <ion-row>\\n          <ion-col>\\n            <ion-item>\\n              <ion-label for=\\\"answer\\\" position=\\\"floating\\\">Type the numbers you saw.</ion-label>\\n              <ion-input\\n              id=\\\"answer\\\"\\n              type=\\\"number\\\"\\n              class=\\\"form-control\\\"\\n              [(ngModel)]=\\\"answer\\\"\\n              name=\\\"answer\\\"\\n              required\\n              ></ion-input>\\n            </ion-item>\\n          </ion-col>\\n        </ion-row> \\n      </div> \\n      <div class=\\\"form-group\\\">      \\n        <ion-row>\\n          <ion-col>\\n            <ion-button type=\\\"submit\\\" class=\\\"ion-text-center\\\" [disabled]=\\\"disableSubmit()\\\">Submit</ion-button>\\n          </ion-col>\\n        </ion-row>\\n      </div> \\n    </ion-grid>\\n  </form> -->\\n\\n  <!-- This is the selection screen where they can choose what numbers they saw in what order -->\\n  <ion-grid *ngIf=\\\"gameHasBegun && !formIsHidden\\\" class=\\\"ion-text-center\\\">\\n    <ion-row>\\n      <ion-col class=\\\"ion-text-center\\\">\\n        <ion-label><h1>{{ answer }}</h1></ion-label>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row >\\n      <ion-col size=\\\"3\\\" offset=\\\"0.75\\\" *ngFor=\\\"let item of numarray\\\" >\\n        <ion-button color=\\\"light\\\" class=\\\"shadow\\\" style=\\\"width: 80%\\\" size=\\\"large\\\" (click)=\\\"addNum(item)\\\">{{ item }}</ion-button>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row>\\n      <ion-col size=\\\"3\\\" offset=\\\"0.75\\\" class=\\\"ion-text-center\\\">\\n        <ion-button color=\\\"light\\\" class=\\\"shadow\\\" style=\\\"width: 80%\\\" size=\\\"large\\\" (click)=\\\"onDelete()\\\"><ion-icon name=\\\"backspace-outline\\\"></ion-icon></ion-button>\\n      </ion-col>\\n      <ion-col size=\\\"3\\\" offset=\\\"0.75\\\" class=\\\"ion-text-center\\\">\\n        <ion-button color=\\\"light\\\" class=\\\"shadow\\\" style=\\\"width: 80%\\\" size=\\\"large\\\" (click)=\\\"addNum(0)\\\">0</ion-button>\\n      </ion-col>\\n      <ion-col size=\\\"3\\\" offset=\\\"0.75\\\" class=\\\"ion-text-center\\\">\\n        <ion-button color=\\\"light\\\" class=\\\"shadow\\\" style=\\\"width: 80%\\\" size=\\\"large\\\" (click)=\\\"onReset()\\\"><ion-icon name=\\\"refresh-outline\\\"></ion-icon></ion-button>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row>\\n      <ion-col class=\\\"ion-text-center\\\">\\n        <ion-button (click)=\\\"onSubmitAnswer()\\\" size=\\\"large\\\" type=\\\"submit\\\" color=\\\"warning\\\" style=\\\"width: 80%;\\\" class=\\\"ion-text-center shadow\\\" [disabled]=\\\"disableSubmit()\\\">Submit</ion-button>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n\\n  <!-- The animated number -->\\n  <div #currentNumber [@cardFade]=\\\"isFaded\\\">\\n    <ion-label class=\\\"ion-text-center\\\" *ngIf=\\\"gameHasBegun && formIsHidden\\\">\\n      <h1 class=\\\"text-large\\\" [style]=\\\"'color: ' + getColor()\\\">{{ currNum }}</h1>\\n    </ion-label>\\n  </div>\\n\\n</ion-content>\\n\\n<ion-footer>\\n  <app-menu [(gamenumber)]=\\\"gameno\\\" [(gameHasBegun)]=\\\"gameHasBegun\\\" ></app-menu>\\n  <app-start [(gameHasBegun)]=\\\"gameHasBegun\\\" [(gameno)]=\\\"gameno\\\"></app-start>\\n</ion-footer>\\n\\n\\n\";"]}