{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-checkbox.entry.js"],"names":["checkboxIosCss","checkboxMdCss","Checkbox","hostRef","r","ionChange","ionFocus","ionBlur","ionStyle","inputId","checkboxIds","name","checked","indeterminate","disabled","value","onClick","setFocus","onFocus","emit","onBlur","emitStyle","isChecked","buttonEl","focus","color","el","labelId","mode","label","f","id","path","h","d","part","H","role","c","viewBox","type","ref","btnEl","style","ios","md"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,UAAMA,cAAc,GAAG,2jFAAvB;AAEA,UAAMC,aAAa,GAAG,ssFAAtB;;AAEA,UAAMC,QAAQ;AACV,0BAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACjB,8DAAAC,CAAA,EAAiB,IAAjB,EAAuBD,OAAvB;AACA,eAAKE,SAAL,GAAiB,uDAAY,IAAZ,EAAkB,WAAlB,EAA+B,CAA/B,CAAjB;AACA,eAAKC,QAAL,GAAgB,uDAAY,IAAZ,EAAkB,UAAlB,EAA8B,CAA9B,CAAhB;AACA,eAAKC,OAAL,GAAe,uDAAY,IAAZ,EAAkB,SAAlB,EAA6B,CAA7B,CAAf;AACA,eAAKC,QAAL,GAAgB,uDAAY,IAAZ,EAAkB,UAAlB,EAA8B,CAA9B,CAAhB;AACA,eAAKC,OAAL,oBAAyBC,WAAW,EAApC;AACA;AACR;AACA;;AACQ,eAAKC,IAAL,GAAY,KAAKF,OAAjB;AACA;AACR;AACA;;AACQ,eAAKG,OAAL,GAAe,KAAf;AACA;AACR;AACA;;AACQ,eAAKC,aAAL,GAAqB,KAArB;AACA;AACR;AACA;;AACQ,eAAKC,QAAL,GAAgB,KAAhB;AACA;AACR;AACA;AACA;AACA;AACA;AACA;;AACQ,eAAKC,KAAL,GAAa,IAAb;;AACA,eAAKC,OAAL,GAAe,YAAM;AACjB,iBAAI,CAACC,QAAL;;AACA,iBAAI,CAACL,OAAL,GAAe,CAAC,KAAI,CAACA,OAArB;AACA,iBAAI,CAACC,aAAL,GAAqB,KAArB;AACH,WAJD;;AAKA,eAAKK,OAAL,GAAe,YAAM;AACjB,iBAAI,CAACZ,QAAL,CAAca,IAAd;AACH,WAFD;;AAGA,eAAKC,MAAL,GAAc,YAAM;AAChB,iBAAI,CAACb,OAAL,CAAaY,IAAb;AACH,WAFD;AAGH;;AA3CS;AAAA;AAAA,iBA4CV,6BAAoB;AAChB,iBAAKE,SAAL;AACH;AA9CS;AAAA;AAAA,iBA+CV,wBAAeC,SAAf,EAA0B;AACtB,iBAAKjB,SAAL,CAAec,IAAf,CAAoB;AAChBP,qBAAO,EAAEU,SADO;AAEhBP,mBAAK,EAAE,KAAKA;AAFI,aAApB;AAIA,iBAAKM,SAAL;AACH;AArDS;AAAA;AAAA,iBAsDV,2BAAkB;AACd,iBAAKA,SAAL;AACH;AAxDS;AAAA;AAAA,iBAyDV,qBAAY;AACR,iBAAKb,QAAL,CAAcW,IAAd,CAAmB;AACf,kCAAoB,KAAKP,OADV;AAEf,sCAAwB,KAAKE;AAFd,aAAnB;AAIH;AA9DS;AAAA;AAAA,iBA+DV,oBAAW;AACP,gBAAI,KAAKS,QAAT,EAAmB;AACf,mBAAKA,QAAL,CAAcC,KAAd;AACH;AACJ;AAnES;AAAA;AAAA,iBAoEV,kBAAS;AAAA;AAAA;;AACL,gBAAQf,OAAR,GAAwE,IAAxE,CAAQA,OAAR;AAAA,gBAAiBI,aAAjB,GAAwE,IAAxE,CAAiBA,aAAjB;AAAA,gBAAgCC,QAAhC,GAAwE,IAAxE,CAAgCA,QAAhC;AAAA,gBAA0CF,OAA1C,GAAwE,IAAxE,CAA0CA,OAA1C;AAAA,gBAAmDG,KAAnD,GAAwE,IAAxE,CAAmDA,KAAnD;AAAA,gBAA0DU,KAA1D,GAAwE,IAAxE,CAA0DA,KAA1D;AAAA,gBAAiEC,EAAjE,GAAwE,IAAxE,CAAiEA,EAAjE;AACA,gBAAMC,OAAO,GAAGlB,OAAO,GAAG,MAA1B;AACA,gBAAMmB,IAAI,GAAG,8DAAW,IAAX,CAAb;AACA,gBAAMC,KAAK,GAAG,sDAAAC,CAAA,EAAcJ,EAAd,CAAd;;AACA,gBAAIG,KAAJ,EAAW;AACPA,mBAAK,CAACE,EAAN,GAAWJ,OAAX;AACH;;AACD,qEAAkB,IAAlB,EAAwBD,EAAxB,EAA4B,KAAKf,IAAjC,EAAwCC,OAAO,GAAGG,KAAH,GAAW,EAA1D,EAA+DD,QAA/D;AACA,gBAAIkB,IAAI,GAAGnB,aAAa,GAClB,oDAAAoB,CAAA,EAAE,MAAF,EAAU;AAAEC,eAAC,EAAE,aAAL;AAAoBC,kBAAI,EAAE;AAA1B,aAAV,CADkB,GAElB,oDAAAF,CAAA,EAAE,MAAF,EAAU;AAAEC,eAAC,EAAE,2BAAL;AAAkCC,kBAAI,EAAE;AAAxC,aAAV,CAFN;;AAGA,gBAAIP,IAAI,KAAK,IAAb,EAAmB;AACfI,kBAAI,GAAGnB,aAAa,GACd,oDAAAoB,CAAA,EAAE,MAAF,EAAU;AAAEC,iBAAC,EAAE,UAAL;AAAiBC,oBAAI,EAAE;AAAvB,eAAV,CADc,GAEd,oDAAAF,CAAA,EAAE,MAAF,EAAU;AAAEC,iBAAC,EAAE,kCAAL;AAAyCC,oBAAI,EAAE;AAA/C,eAAV,CAFN;AAGH;;AACD,mBAAQ,oDAAAF,CAAA,EAAE,gDAAAG,CAAF,EAAQ;AAAEpB,qBAAO,EAAE,KAAKA,OAAhB;AAAyBqB,kBAAI,EAAE,UAA/B;AAA2C,+BAAiBvB,QAAQ,GAAG,MAAH,GAAY,IAAhF;AAAsF,wCAAmBF,OAAnB,CAAtF;AAAoH,iCAAmBe,OAAvI;AAAgJ,uBAAO,oDAAAW,CAAA,EAAmBb,KAAnB,oCAC9JG,IAD8J,EACvJ,IADuJ,yBAE/J,SAF+J,EAEpJ,oDAAAK,CAAA,EAAY,UAAZ,EAAwBP,EAAxB,CAFoJ,yBAG/J,kBAH+J,EAG3Id,OAH2I,yBAI/J,mBAJ+J,EAI1IE,QAJ0I,yBAK/J,wBAL+J,EAKrID,aALqI,yBAM/J,aAN+J,EAMhJ,IANgJ;AAAvJ,aAAR,EAOE,oDAAAoB,CAAA,EAAE,KAAF,EAAS;AAAE,uBAAO,eAAT;AAA0BM,qBAAO,EAAE,WAAnC;AAAgDJ,kBAAI,EAAE;AAAtD,aAAT,EAA8EH,IAA9E,CAPF,EAOuF,oDAAAC,CAAA,EAAE,QAAF,EAAY;AAAEO,kBAAI,EAAE,QAAR;AAAkBtB,qBAAO,EAAE,KAAKA,OAAhC;AAAyCE,oBAAM,EAAE,KAAKA,MAAtD;AAA8DN,sBAAQ,EAAE,KAAKA,QAA7E;AAAuF2B,iBAAG,EAAE,aAAAC,KAAK;AAAA,uBAAI,MAAI,CAACnB,QAAL,GAAgBmB,KAApB;AAAA;AAAjG,aAAZ,CAPvF,CAAR;AAQH;AA7FS;AAAA;AAAA,eA8FV,eAAS;AAAE,mBAAO,uDAAW,IAAX,CAAP;AAA0B;AA9F3B;AAAA;AAAA,eA+FV,eAAsB;AAAE,mBAAO;AAC3B,yBAAW,CAAC,gBAAD,CADgB;AAE3B,0BAAY,CAAC,iBAAD;AAFe,aAAP;AAGpB;AAlGM;;AAAA;AAAA,SAAd;;AAoGA,UAAIhC,WAAW,GAAG,CAAlB;AACAR,cAAQ,CAACyC,KAAT,GAAiB;AACbC,WAAG,EAAE5C,cADQ;AAEb6C,UAAE,EAAE5C;AAFS,OAAjB","file":"node_modules_ionic_core_dist_esm_ion-checkbox_entry_js-es5.js","sourcesContent":["import { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-92848855.js';\nimport { b as getIonMode } from './ionic-global-23e7365a.js';\nimport { f as findItemLabel, c as renderHiddenInput } from './helpers-47d562d2.js';\nimport { c as createColorClasses, h as hostContext } from './theme-5641d27f.js';\n\nconst checkboxIosCss = \":host{--background-checked:var(--ion-color-primary, #3880ff);--border-color-checked:var(--ion-color-primary, #3880ff);--checkmark-color:var(--ion-color-primary-contrast, #fff);--checkmark-width:1;--transition:none;display:inline-block;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.ion-color){--background-checked:var(--ion-color-base);--border-color-checked:var(--ion-color-base);--checkmark-color:var(--ion-color-contrast)}button{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none}[dir=rtl] button,:host-context([dir=rtl]) button{left:unset;right:unset;right:0}button::-moz-focus-inner{border:0}.checkbox-icon{border-radius:var(--border-radius);display:block;position:relative;width:100%;height:100%;-webkit-transition:var(--transition);transition:var(--transition);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--background);-webkit-box-sizing:border-box;box-sizing:border-box}.checkbox-icon path{fill:none;stroke:var(--checkmark-color);stroke-width:var(--checkmark-width);opacity:0}:host(.checkbox-checked) .checkbox-icon,:host(.checkbox-indeterminate) .checkbox-icon{border-color:var(--border-color-checked);background:var(--background-checked)}:host(.checkbox-checked) .checkbox-icon path,:host(.checkbox-indeterminate) .checkbox-icon path{opacity:1}:host(.checkbox-disabled){pointer-events:none}:host{--border-radius:50%;--border-width:1px;--border-style:solid;--border-color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.23);--background:var(--ion-item-background, var(--ion-background-color, #fff));--size:26px;width:var(--size);height:var(--size)}:host(.checkbox-disabled){opacity:0.3}:host(.in-item){margin-left:0;margin-right:8px;margin-top:10px;margin-bottom:9px;display:block;position:static}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-item){margin-left:unset;margin-right:unset;-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:8px;margin-inline-end:8px}}:host(.in-item[slot=start]){margin-left:2px;margin-right:20px;margin-top:8px;margin-bottom:8px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:20px;margin-inline-end:20px}}\";\n\nconst checkboxMdCss = \":host{--background-checked:var(--ion-color-primary, #3880ff);--border-color-checked:var(--ion-color-primary, #3880ff);--checkmark-color:var(--ion-color-primary-contrast, #fff);--checkmark-width:1;--transition:none;display:inline-block;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.ion-color){--background-checked:var(--ion-color-base);--border-color-checked:var(--ion-color-base);--checkmark-color:var(--ion-color-contrast)}button{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none}[dir=rtl] button,:host-context([dir=rtl]) button{left:unset;right:unset;right:0}button::-moz-focus-inner{border:0}.checkbox-icon{border-radius:var(--border-radius);display:block;position:relative;width:100%;height:100%;-webkit-transition:var(--transition);transition:var(--transition);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--background);-webkit-box-sizing:border-box;box-sizing:border-box}.checkbox-icon path{fill:none;stroke:var(--checkmark-color);stroke-width:var(--checkmark-width);opacity:0}:host(.checkbox-checked) .checkbox-icon,:host(.checkbox-indeterminate) .checkbox-icon{border-color:var(--border-color-checked);background:var(--background-checked)}:host(.checkbox-checked) .checkbox-icon path,:host(.checkbox-indeterminate) .checkbox-icon path{opacity:1}:host(.checkbox-disabled){pointer-events:none}:host{--border-radius:calc(var(--size) * .125);--border-width:2px;--border-style:solid;--border-color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.51);--checkmark-width:3;--background:var(--ion-item-background, var(--ion-background-color, #fff));--transition:background 180ms cubic-bezier(0.4, 0, 0.2, 1);--size:18px;width:var(--size);height:var(--size)}.checkbox-icon path{stroke-dasharray:30;stroke-dashoffset:30}:host(.checkbox-checked) .checkbox-icon path,:host(.checkbox-indeterminate) .checkbox-icon path{stroke-dashoffset:0;-webkit-transition:stroke-dashoffset 90ms linear 90ms;transition:stroke-dashoffset 90ms linear 90ms}:host(.checkbox-disabled){opacity:0.3}:host(.in-item){margin-left:0;margin-right:0;margin-top:18px;margin-bottom:18px;display:block;position:static}:host(.in-item[slot=start]){margin-left:4px;margin-right:36px;margin-top:18px;margin-bottom:18px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:4px;margin-inline-start:4px;-webkit-margin-end:36px;margin-inline-end:36px}}\";\n\nconst Checkbox = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n        this.ionFocus = createEvent(this, \"ionFocus\", 7);\n        this.ionBlur = createEvent(this, \"ionBlur\", 7);\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\n        this.inputId = `ion-cb-${checkboxIds++}`;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        /**\n         * If `true`, the checkbox is selected.\n         */\n        this.checked = false;\n        /**\n         * If `true`, the checkbox will visually appear as indeterminate.\n         */\n        this.indeterminate = false;\n        /**\n         * If `true`, the user cannot interact with the checkbox.\n         */\n        this.disabled = false;\n        /**\n         * The value of the toggle does not mean if it's checked or not, use the `checked`\n         * property for that.\n         *\n         * The value of a toggle is analogous to the value of a `<input type=\"checkbox\">`,\n         * it's only used when the toggle participates in a native `<form>`.\n         */\n        this.value = 'on';\n        this.onClick = () => {\n            this.setFocus();\n            this.checked = !this.checked;\n            this.indeterminate = false;\n        };\n        this.onFocus = () => {\n            this.ionFocus.emit();\n        };\n        this.onBlur = () => {\n            this.ionBlur.emit();\n        };\n    }\n    componentWillLoad() {\n        this.emitStyle();\n    }\n    checkedChanged(isChecked) {\n        this.ionChange.emit({\n            checked: isChecked,\n            value: this.value\n        });\n        this.emitStyle();\n    }\n    disabledChanged() {\n        this.emitStyle();\n    }\n    emitStyle() {\n        this.ionStyle.emit({\n            'checkbox-checked': this.checked,\n            'interactive-disabled': this.disabled,\n        });\n    }\n    setFocus() {\n        if (this.buttonEl) {\n            this.buttonEl.focus();\n        }\n    }\n    render() {\n        const { inputId, indeterminate, disabled, checked, value, color, el } = this;\n        const labelId = inputId + '-lbl';\n        const mode = getIonMode(this);\n        const label = findItemLabel(el);\n        if (label) {\n            label.id = labelId;\n        }\n        renderHiddenInput(true, el, this.name, (checked ? value : ''), disabled);\n        let path = indeterminate\n            ? h(\"path\", { d: \"M6 12L18 12\", part: \"mark\" })\n            : h(\"path\", { d: \"M5.9,12.5l3.8,3.8l8.8-8.8\", part: \"mark\" });\n        if (mode === 'md') {\n            path = indeterminate\n                ? h(\"path\", { d: \"M2 12H22\", part: \"mark\" })\n                : h(\"path\", { d: \"M1.73,12.91 8.1,19.28 22.79,4.59\", part: \"mark\" });\n        }\n        return (h(Host, { onClick: this.onClick, role: \"checkbox\", \"aria-disabled\": disabled ? 'true' : null, \"aria-checked\": `${checked}`, \"aria-labelledby\": labelId, class: createColorClasses(color, {\n                [mode]: true,\n                'in-item': hostContext('ion-item', el),\n                'checkbox-checked': checked,\n                'checkbox-disabled': disabled,\n                'checkbox-indeterminate': indeterminate,\n                'interactive': true\n            }) }, h(\"svg\", { class: \"checkbox-icon\", viewBox: \"0 0 24 24\", part: \"container\" }, path), h(\"button\", { type: \"button\", onFocus: this.onFocus, onBlur: this.onBlur, disabled: this.disabled, ref: btnEl => this.buttonEl = btnEl })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"checked\": [\"checkedChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n};\nlet checkboxIds = 0;\nCheckbox.style = {\n    ios: checkboxIosCss,\n    md: checkboxMdCss\n};\n\nexport { Checkbox as ion_checkbox };\n"]}