{"version":3,"sources":["./src/app/shared/data.service.ts","./src/app/shared/eventemitter.service.ts"],"names":[],"mappings":"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","file":"default-src_app_shared_data_service_ts-es2015.js","sourcesContent":["// needs a database sync function and needs to store data from the new games and the images and data from the database\n\nimport { HttpClient, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EventemitterService } from './eventemitter.service';\nimport { SQLite, SQLiteObject } from '@ionic-native/sqlite/ngx'\nimport { Platform } from '@ionic/angular';\nimport { GameService } from './game.service';\n\nexport interface AutoLoginData {\n  email: string;\n  idToken: string;\n  refreshToken: string;\n  localID: string;\n  expiresIn: number;\n}\n\nexport interface RefreshData {\n  expires_in:\tstring;\n  token_type:\tstring;\n  refresh_token: string;\n  id_token:\tstring;\n  user_id: string;\t\n  project_id:\tstring;\t\n}\n\nexport interface SessionData {\n  time: number;\n  date: Date;\n  score: number;\n  level: number;\n  wrongs: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  localID: string;\n  idToken: any;\n  complete: string;\n  idPath: any;\n  link = \"https://memoryattention-1.firebaseio.com/\"\n  imglink = \"gs://memoryattention-1.appspot.com/\" \n\n  constructor(\n    private http: HttpClient,\n    private eventemitter: EventemitterService,\n    private sqlite: SQLite,\n    private platform: Platform) \n    { }\n\n\n\n  take1() {\n    this.http.get('https://firebasestorage.googleapis.com/v0/b/memoryattention-1.appspot.com/o/download-8.jpg?alt=media&token=5d723f86-5887-4049-bfaa-fcfd686725ed', {}).subscribe(value => {console.log(value)})\n  }\n\n  // this function stores level and score in the database as well as session data\n\n  getTriviaData(){\n    this.gameinfoget('Trivia')\n  }\n\n  getMatrixReasoningData(){\n    this.gameinfoget('MatrixReasoning')\n  }\n\n\n  storeLevelScore(gamename, score, level, excerciseSetMode: boolean, time?, wrongs?, prevscore?, prevlevel?) {\n    this.getLocalID('storeLevelScore(', [gamename, score, level, excerciseSetMode])\n    let path = ''\n    if (excerciseSetMode === true) {\n      path = \"excerciseset\"\n    } else {\n      path = \"gameslist\"\n    }\n    this.put('score/' + gamename + '/' + path, score).subscribe(value => {\n      console.log(value)\n    }, error => {\n      console.log(error)\n    })\n    this.put('level/' + gamename + '/' + path, level).subscribe(value => {\n      console.log(value)\n    }, error => {\n      console.log(error)\n    })\n\n    if (this.platform.is('capacitor') === true) {\n      let excerciseMode = excerciseSetMode ? 1 : 0\n      this.sqlite.create(\n        {\n          name: this.localID + '.db',\n          location: 'default'\n        }\n      ).then((db: SQLiteObject) => {\n        db.executeSql('create table [' + gamename + ' score] (excerciseMode boolean, score float)', [])\n        .then(() => {\n          db.executeSql('insert into [' + gamename + ' score] (excerciseMode, score) values (' + excerciseMode + ',' + score + ')').then().catch(e => {console.log(e)})\n        })\n        .catch(e => {\n          console.log(e)\n          db.executeSql('update [' + gamename + ' score] set score =' + score + ' where excerciseMode = ' + excerciseMode, []).then(value => {\n            console.log(value)\n          }).catch(() => {\n            db.executeSql('insert into [' + gamename + ' score] (excerciseMode, score) values (' + excerciseMode + ',' + score + ')').then().catch(e => {console.log(e)})\n          })\n        })\n\n        db.executeSql('create table [' + gamename + ' level] (excerciseMode boolean, level int)', [])\n        .then(() => {\n          db.executeSql('insert into [' + gamename + ' level] (excerciseMode, level) values (' + excerciseMode + ',' + level + ')').then().catch(e => {console.log(e)})\n        })\n        .catch(e => {\n          console.log(e)\n          db.executeSql('update [' + gamename + ' level] set level =' + level + ' where excerciseMode = ' + excerciseMode, []).then(value => {\n            console.log(value)\n          }).catch(() => {\n            db.executeSql('insert into [' + gamename + ' level] (excerciseMode, level) values (' + excerciseMode + ',' + level + ')').then().catch(e => {console.log(e)})\n          })\n        })\n\n      })\n    }\n\n    if ((time !== null && wrongs !== null) && (prevlevel !== null && prevscore !== null)) {\n      let date = new Date()\n      let sessiondata: SessionData = {\n        time: time,\n        date: date,\n        score: prevscore,\n        level: prevlevel,\n        wrongs: wrongs\n      }\n      this.http.post<SessionData>(this.link + 'users/' + this.localID + '/sessiondata/' + gamename + this.idPath, sessiondata).subscribe()\n      if (this.platform.is(\"capacitor\") === true) {\n        // sessiondata stored as (gameName VARCHAR(64), date date, level int, score float, time float, wrongs int)\n        this.sqlite.create(\n          {\n            name: this.localID + '.db',\n            location: 'default'\n          }).then((db: SQLiteObject) => {\n            db.executeSql('create table sessiondata (gameName VARCHAR(64), date VARCHAR(64), level int, score float, time float, wrongs int)', []).then(() => {\n              db.executeSql('insert into sessiondata (gameName, date, level, score, time, wrongs) values ( \"' + gamename + '\", \"' + date + '\", ' + prevlevel + ', ' + prevscore + ', ' + time + ', ' + wrongs + ')', []).then().catch(e => {console.log(e)})\n            }).catch(e => {\n              console.log(e)\n              db.executeSql('insert into sessiondata (gameName, date, level, score, time, wrongs) values ( \"' + gamename + '\", \"' + date + '\", ' + prevlevel + ', ' + prevscore + ', ' + time + ', ' + wrongs + ')', []).then().catch(e => {console.log(e)})\n            })\n            \n          })\n      }\n    }\n  }\n\n\n  // this function gets the level and score from the database\n\n  getLevelScore(gamename, excerciseSetMode) {\n    this.getLocalID('getLevelScore(', [gamename, excerciseSetMode])\n    let path = ''\n    if (excerciseSetMode === true) {\n      path = \"excerciseset\"\n    } else {\n      path = \"gameslist\"\n    }\n    this.get('score/' + gamename + '/' + path).subscribe(value => {\n      console.log(value)\n      if (value) {\n        this.eventemitter.onDatabase({score: value})\n      }\n    }, error => {\n      console.log(error)\n      if (this.platform.is(\"capacitor\") === true) {\n        let excerciseMode = excerciseSetMode ? 1 : 0\n        this.sqlite.create(\n        {\n          name: this.localID + '.db',\n          location: 'default'\n        }).then((db: SQLiteObject) => {\n          db.executeSql('select * from [' + gamename + ' score] where excerciseMode = ' + excerciseMode, []).then(resData => {\n            this.eventemitter.onDatabase({score: resData.rows.item(0).score})\n          })\n        }).catch(() => {\n          this.eventemitter.onDatabase({score: null})\n        })\n      }\n    })\n    this.get('level/' + gamename + '/' + path).subscribe(value => {\n      console.log(value)\n      if (value) {\n        this.eventemitter.onDatabase({level: value})\n      }\n    }, error => {\n      console.log(error)\n      if (this.platform.is(\"capacitor\") === true) {\n        let excerciseMode = excerciseSetMode ? 1 : 0\n        this.sqlite.create(\n        {\n          name: this.localID + '.db',\n          location: 'default'\n        }).then((db: SQLiteObject) => {\n          db.executeSql('select * from [' + gamename + ' level] where excerciseMode = ' + excerciseMode, []).then(resData => {\n            console.log(resData.rows.item(0))\n            this.eventemitter.onDatabase({level: resData.rows.item(0).level})\n          })\n        }).catch(() => {\n          this.eventemitter.onDatabase({level: null})\n        })\n      }\n    })\n\n  }\n\n  // this function gets sessiondata\n\n  getSessionData() {\n    this.getLocalID('getSessionData(')\n    // if (this.platform.is(\"capacitor\") === true) {\n    //   console.log('sessiondata')\n    //   let emittedObject = []\n    //   this.sqlite.create(\n    //     {\n    //       name: this.localID + '.db',\n    //       location: 'default'\n    //     }).then((db: SQLiteObject) => {\n    //       db.executeSql('select * from [sessiondata]')\n    //       .then(value => {\n    //         console.log(value.rows.item(0))\n    //         if (value.rows.item(0)) {\n    //           for (let i = 0; i < value.rows.length; i++) {\n    //             value.rows.item(i).date = new Date(value.rows.item(i).date)\n    //             emittedObject.push(value.rows.item(i))\n    //           }\n    //           // this.eventemitter.onDatabase(emittedObject)\n    //           console.log(emittedObject)\n    //         } else {\n    //           console.log(emittedObject)\n    //           // this.eventemitter.onDatabase(emittedObject)\n    //         }\n    //       })\n    //       .catch(e => {\n    //         console.log(\"an error has occurred\", e)\n    //         console.log(e.rows.item(0))\n    //         if (e.rows.item(0)) {\n    //           for (let i = 0; i < e.rows.length; i++) {\n    //             e.rows.item(i).date = new Date(e.rows.item(i).date)\n    //             emittedObject.push(e.rows.item(i))\n    //           }\n    //           // this.eventemitter.onDatabase(emittedObject)\n    //           console.log(emittedObject)\n    //           console.log(\"emittedObject\")\n    //         } else {\n    //           console.log(emittedObject)\n    //           console.log(\"emittedObject\")\n    //           // this.eventemitter.onDatabase(emittedObject)\n    //         }\n    //       })\n    //     })\n    // }\n    this.http.get(this.link +'users/' + this.localID + '/sessiondata' + this.idPath).subscribe(value => {\n      let emittedObject = []\n      for (let game in value) {\n        for (let sessionID in value[game]) {\n          let object = {\n            game: game,\n            date: value[game][sessionID].date,\n            level: value[game][sessionID].level,\n            score: value[game][sessionID].score,\n            time: value[game][sessionID].time,\n            wrongs: value[game][sessionID].wrongs\n          }\n          emittedObject.push(object)\n        }\n      }\n      this.eventemitter.onDatabase(emittedObject)\n    }, error => {\n      if (this.platform.is(\"capacitor\") === true) {\n        console.log('sessiondata23')\n        let emittedObject = []\n        this.sqlite.create(\n          {\n            name: this.localID + '.db',\n            location: 'default'\n          }).then((db: SQLiteObject) => {\n            db.executeSql('select * from [sessiondata]')\n            .then(value => {\n              console.log(value.rows.item(0))\n              if (value.rows.item(0)) {\n                for (let i = 0; i < value.rows.length; i++) {\n                  let theobject = value.rows.item(i)\n                  value.rows.item(i).date = new Date(value.rows.item(i).date)\n                  let object = {\n                    game: theobject.gameName,\n                    date: theobject.date,\n                    level: theobject.level,\n                    score: theobject.score,\n                    time: theobject.time,\n                    wrongs: theobject.wrongs\n                  }\n                  emittedObject.push(object)\n                }\n                this.eventemitter.onDatabase(emittedObject)\n              } else {\n                this.eventemitter.onDatabase(emittedObject)\n              }\n            })\n            .catch(e => {\n              console.log(\"an error has occurred\", e)\n              console.log(e.rows.item(0))\n              if (e.rows.item(0)) {\n                for (let i = 0; i < e.rows.length; i++) {\n                  let theobject = e.rows.item(i)\n                  e.rows.item(i).date = new Date(e.rows.item(i).date)\n                  let object = {\n                    game: theobject.gameName,\n                    date: theobject.date,\n                    level: theobject.level,\n                    score: theobject.score,\n                    time: theobject.time,\n                    wrongs: theobject.wrongs\n                  }\n                  emittedObject.push(object)\n                }\n                this.eventemitter.onDatabase(emittedObject)\n              } else {\n                this.eventemitter.onDatabase(emittedObject)\n              }\n            })\n          })\n      }\n    })\n  }\n\n  //this function clears localstorage after the user logs out\n\n  logout() {\n    localStorage.clear()\n  }\n\n  // after the user is authenticated or after a new refreshtoken is issued, this function runs and the localID gets stored in localStorage\n\n  storeLocalID(localID, idToken, email, refreshtoken, expiresIn) {\n    let autoLogin: AutoLoginData = {\n      email: email,\n      idToken: idToken,\n      refreshToken: refreshtoken,\n      localID: localID,\n      expiresIn: expiresIn\n    }\n    localStorage.setItem('loggedIn', JSON.stringify(autoLogin))\n  }\n\n  // this function gets the localID from localstorage and should be run before every function accessing the database\n  // this is because if the user's timer runs out and is no longer authenticated, this function runs the refreshToken function\n\n  getLocalID(funcname?: string, funcparams?) {\n    let autoLogin = JSON.parse(localStorage.getItem('loggedIn'))\n    let expiresIn = autoLogin.expiresIn\n    this.localID = JSON.parse(localStorage.getItem('loggedIn')).localID\n    this.idToken = JSON.parse(localStorage.getItem('loggedIn')).idToken\n    this.idPath = '.json?auth=' + this.idToken\n    console.log(this.localID)\n    if (new Date().valueOf() > expiresIn) {\n      this.refreshToken(funcname, funcparams)\n    } \n  }\n\n\n  // this function gets refreshtokens from the database and reaunthenticate the user\n\n  refreshToken(funcname?: string, funcparams?) {\n    let autoLogin = JSON.parse(localStorage.getItem('loggedIn'))\n    this.http.post<RefreshData>(\"https://securetoken.googleapis.com/v1/token?key=AIzaSyAXQtQdjbu_Sq341mRWn_s_jaqV9LxtftM\", {\n      grant_type: \"refresh_token\",\n      refresh_token: autoLogin.refreshToken\n    }).subscribe(resData => {\n      autoLogin.idToken = resData.id_token\n      autoLogin.refreshToken = resData.refresh_token\n      autoLogin.expiresIn = new Date().valueOf() + +resData.expires_in*1000\n      localStorage.setItem('loggedIn', JSON.stringify(autoLogin))\n      console.log('refreshtoken')\n      if (funcname) {\n        if (funcparams) {\n          let params = \"\"\n          for (let object of funcparams) {\n            params = params + JSON.stringify(object)\n          }\n          this[funcname + funcparams + \")\"]\n        }\n        else {\n          this[funcname + ')']\n        }\n      }\n    })\n  }\n\n  // this function puts user data like score, level or sessions into the database\n\n  put(path, storedvar) {\n    return this.http.put(this.link + 'users/' + this.localID + '/' + path + this.idPath, storedvar)\n  }\n\n  // this function gets user data like score or level or can get previously played sessions\n\n  get(path) {\n    return this.http.get(this.link +'users/' + this.localID + '/' + path + this.idPath)\n  }\n\n  //This command can be used to get something from gameinfo\n  // To call it just put this.gameinfoget('Word Pairs/pair1'), this would pull from \"https://memoryattention-1.firebaseio.com/gameinfo/WordPairs/pair1.json\"\n\n  gameinfoget(path) {\n    this.http.get(this.link + 'gameinfo/' + path + this.idPath).subscribe(value => {\n      this.eventemitter.onDatabase({path: path, value: value})\n    })\n  }\n\n\n  onLogin() {\n    this.getLocalID('onLogin(')\n    this.http.get<{level?: Object, score?: Object, sessiondata?: Object}>(this.link + 'users/' + this.localID + this.idPath).subscribe(value => {\n      console.log(value)\n      if (this.platform.is(\"capacitor\") === true && value) {\n        // SQLite sync with the database occurs in this code\n        // The db.executeSql statements run sql code and add to the sql database and the database is stored under localID\n        // The firebase structure is users/{localID}/(score, level, sessiondata) (3 separate folders)\n\n        this.sqlite.create(\n          {\n            name: this.localID + '.db',\n            location: 'default'\n          }).then((db: SQLiteObject) => {\n              if (value.level) {\n                for (let game in value.level) {\n\n                  db.executeSql('create table [' + game + ' level]' + ' (excerciseMode boolean, level int)', []).then(resData => {\n                    console.log(value.level[game] + \"LEVEL STUFF HERE\")\n                    console.log(value.level + 'level')\n                    console.log(resData)\n                    if (value.level[game].excerciseset) {\n                      db.executeSql('insert into [' + game + ' level]' + ' (excerciseMode, level) values (1, ' + value.level[game].excerciseset + ')').then(resData => {\n                        console.log(resData)\n                      })\n                    }\n                    if (value.level[game].gameslist) {\n                      db.executeSql('insert into [' + game + ' level]' + ' (excerciseMode, level) values (0, ' + value.level[game].gameslist + ')').then(resData => {\n                        console.log(resData)\n                      })\n                    }\n                  })\n                  .catch(e => {\n                    console.log(e)\n                    if (value.level[game].excerciseset) {\n                      db.executeSql('update [' + game + ' level] set level = ' + value.level[game].excerciseset + ' where excerciseMode = 1', []).then(resData => {\n                        console.log(resData)\n                      })\n                      .catch(() => {\n                        db.executeSql('insert into [' + game + ' level]' + ' (excerciseMode, level) values (1, ' + value.level[game].excerciseset + ')').then().catch(e => {console.log(e)})\n                      })\n                    }\n                    if (value.score[game].gameslist) {\n                      db.executeSql('update [' + game + ' level] set level = ' + value.level[game].gameslist + ' where excerciseMode = 1', []).then(resData => {\n                        console.log(resData)\n                      })\n                      .catch(() => {\n                        db.executeSql('insert into [' + game + ' level]' + ' (excerciseMode, level) values (1, ' + value.level[game].gameslist + ')').then().catch(e => {console.log(e)})\n                      })\n                    }\n                  })\n                }\n              }\n              if (value.score) {\n                \n                for (let game in value.score) {\n                  console.log(value.score[game])\n                  db.executeSql('create table [' + game + ' score]' + ' (excerciseMode boolean, score float)', [])\n                  .then(() => {\n                    if (value.level[game].excerciseset) {\n                      db.executeSql('insert into [' + game + ' score]' + ' (excerciseMode, score) values (1, ' + value.score[game].excerciseset + ')').then(resData => {\n                        console.log(resData)\n                      })\n                    }\n                    if (value.level[game].gameslist) {\n                      db.executeSql('insert into [' + game + ' score]' + ' (excerciseMode, score) values (0, ' + value.score[game].gameslist + ')').then(resData => {\n                        console.log(resData)\n                      })\n                    }\n                  })\n                  .catch(e => {\n                    console.log(e)\n                    if (value.score[game].excerciseset) {\n                      db.executeSql('update [' + game + ' score] set score = ' + value.score[game].excerciseset + ' where excerciseMode = 1', []).then(resData => {\n                        console.log(resData)\n                      })\n                      .catch(error => {\n                        db.executeSql('insert into [' + game + ' score]' + ' (excerciseMode, score) values (1, ' + value.score[game].excerciseset + ')').then().catch(e => {console.log(e)})\n                      })\n                    }\n                    if (value.score[game].gameslist) {\n                      db.executeSql('update [' + game + ' score] set score = ' + value.score[game].gameslist + ' where excerciseMode = 1', []).then(resData => {\n                        console.log(resData)\n                      })\n                      .catch(error => {\n                        db.executeSql('insert into [' + game + ' score]' + ' (excerciseMode, score) values (1, ' + value.score[game].gameslist + ')').then().catch(e => {console.log(e)})\n                      })\n                    }\n                  })\n                }\n              }\n              // sessiondata stored as (gameName VARCHAR(64), date date, level int, score float, time float, wrongs int)\n              if (value.sessiondata) {\n\n                db.executeSql('create table [sessiondata] (id integer primary key, gameName VARCHAR(64), date VARCHAR(64), level int, score float, time float, wrongs int)',[])\n                .then(() => {\n                  console.log(value.sessiondata)\n                  for (let game in value.sessiondata) {\n                    console.log(game)\n                    for (let sessionID in value.sessiondata[game]) {\n                      let gameinfo = value.sessiondata[game][sessionID]\n                      db.executeSql('insert into sessiondata (gameName, date, level, score, time, wrongs) values (\"' + game + '\", \"' + gameinfo.date + '\", ' + gameinfo.level + ', ' + gameinfo.score + ', ' + gameinfo.time + ', ' + gameinfo.wrongs + ')', [] ).then(resData => {\n                        console.log(resData)\n                      }).catch(e => {console.log(e)})\n                    }\n                  }\n                })\n                .catch(e => {\n                  console.log(e)\n                  for (let game in value.sessiondata) {\n                    console.log(game)\n                    for (let sessionID in value.sessiondata[game]) {\n                      let gameinfo = value.sessiondata[game][sessionID]\n                      // db.executeSql('update sessiondata set date = \"' + gameinfo.date + '\", gameName = \"' + game + '\", level = ' + gameinfo.level + ', score = ' + gameinfo.score + ', time = ' + gameinfo.time + ', wrongs = ' + gameinfo.wrongs + ' where date = \"' + gameinfo.date + '\" and time = ' + gameinfo.time + ' and gameName = \"' + game + '\"', []).then().catch(e => {\n                      //   console.log(e)\n                        db.executeSql('insert or replace into [sessiondata] values ( \"' + game + '\", \"' + gameinfo.date + '\", ' + gameinfo.level + ', ' + gameinfo.score + ', ' + gameinfo.time + ', ' + gameinfo.wrongs + ')', [] ).then(resData => {\n                          console.log(resData)\n                        }).catch(e => {console.log(e)})\n                      // })\n\n                    }\n                  }\n                })\n              }\n          }).then(() => {\n            this.eventemitter.onLoading(true)\n          })\n        }\n        else {\n          this.eventemitter.onLoading(true)\n        }\n    }, error => {\n      console.log(error)\n      this.eventemitter.onLoading(false)\n    })\n  }\n\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventemitterService {\n  animate = new EventEmitter<string>();\n  // CurrentCardRoute = new EventEmitter<string>();\n  form = new EventEmitter<string>();\n  // gameState = new EventEmitter<string>();\n  CurrentCardRoute = new Subject<string>();\n  gameStateSubj = new Subject<string>();\n  RoundFinished = new Subject<any>();\n  memorizedItems = new Subject<any>();\n  databaseemitter = new Subject<any>();\n  loading = new Subject<boolean>();\n\n  constructor() { }\n  // has the different subjects and event emitters that are used in the app\n\n  onAnimate(string: string) {\n    this.animate.emit(string)\n  }\n\n  onCurrentCardRoute(string: string) {\n    this.CurrentCardRoute.next(string)\n  }\n\n  onForm(string: string) {\n    this.form.emit(string)\n  }\n\n  onGameState(string: string) {\n    // this.gameState.emit(string)\n    this.gameStateSubj.next(string)\n  }\n\n  onRoundFinished(any) {\n    this.RoundFinished.next(any)\n  }\n\n  onMemorizedItems(array: any) {\n    this.memorizedItems.next(array)\n  }\n\n  onDatabase(object) {\n    this.databaseemitter.next(object)\n  }\n\n  onLoading(boolean: boolean) {\n    this.loading.next(boolean)\n  }\n\n}\n"],"sourceRoot":"webpack:///"}